{"name":"Mathlib.Tactic.Replace","instances":[],"imports":["Init","Lean","Mathlib.Tactic.Have"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Replace.lean#L56-L87","name":"Mathlib.Tactic.replace'","kind":"def","docLink":"./Mathlib/Tactic/Replace.html#Mathlib.Tactic.replace'","doc":"Acts like `have`, but removes a hypothesis with the same name as\nthis one if possible. For example, if the state is:\n\nThen after `replace h : β` the state will be:\n\n```lean\ncase h\nf : α → β\nh : α\n⊢ β\n\nf : α → β\nh : β\n⊢ goal\n```\n\nwhereas `have h : β` would result in:\n\n```lean\ncase h\nf : α → β\nh : α\n⊢ β\n\nf : α → β\nh✝ : α\nh : β\n⊢ goal\n```\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Replace.lean#L13-L42","name":"Mathlib.Tactic.tacticReplace_","kind":"def","docLink":"./Mathlib/Tactic/Replace.html#Mathlib.Tactic.tacticReplace_","doc":"Acts like `have`, but removes a hypothesis with the same name as\nthis one if possible. For example, if the state is:\n\n```lean\nf : α → β\nh : α\n⊢ goal\n```\n\nThen after `replace h := f h` the state will be:\n\n```lean\nf : α → β\nh : β\n⊢ goal\n```\n\nwhereas `have h := f h` would result in:\n\n```lean\nf : α → β\nh† : α\nh : β\n⊢ goal\n```\n\nThis can be used to simulate the `specialize` and `apply at` tactics of Coq.\n"}]}