{"name":"Mathlib.Logic.Embedding.Set","instances":[],"imports":["Init","Mathlib.Logic.Embedding.Basic","Mathlib.Data.Set.Image"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Embedding/Set.lean#L147-L149","name":"subtypeOrEquiv_symm_inr","kind":"theorem","docLink":"./Mathlib/Logic/Embedding/Set.html#subtypeOrEquiv_symm_inr","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Embedding/Set.lean#L141-L143","name":"subtypeOrEquiv_symm_inl","kind":"theorem","docLink":"./Mathlib/Logic/Embedding/Set.html#subtypeOrEquiv_symm_inl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Embedding/Set.lean#L111-L136","name":"subtypeOrEquiv","kind":"def","docLink":"./Mathlib/Logic/Embedding/Set.html#subtypeOrEquiv","doc":"A subtype `{x // p x ∨ q x}` over a disjunction of `p q : α → Prop` is equivalent to a sum of\nsubtypes `{x // p x} ⊕ {x // q x}` such that `¬ p x` is sent to the right, when\n`Disjoint p q`.\n\nSee also `Equiv.sumCompl`, for when `IsCompl p q`.  "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Embedding/Set.lean#L110-L110","name":"subtypeOrEquiv_apply","kind":"theorem","docLink":"./Mathlib/Logic/Embedding/Set.html#subtypeOrEquiv_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Embedding/Set.lean#L92-L95","name":"Set.embeddingOfSubset","kind":"def","docLink":"./Mathlib/Logic/Embedding/Set.html#Set.embeddingOfSubset","doc":"The injection map is an embedding between subsets. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Embedding/Set.lean#L91-L91","name":"Set.embeddingOfSubset_apply","kind":"theorem","docLink":"./Mathlib/Logic/Embedding/Set.html#Set.embeddingOfSubset_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Embedding/Set.lean#L79-L80","name":"Function.Embedding.image","kind":"def","docLink":"./Mathlib/Logic/Embedding/Set.html#Function.Embedding.image","doc":"`Set.image` as an embedding `Set α ↪ Set β`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Embedding/Set.lean#L78-L78","name":"Function.Embedding.image_apply","kind":"theorem","docLink":"./Mathlib/Logic/Embedding/Set.html#Function.Embedding.image_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Embedding/Set.lean#L71-L72","name":"Function.Embedding.codRestrict_apply","kind":"theorem","docLink":"./Mathlib/Logic/Embedding/Set.html#Function.Embedding.codRestrict_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Embedding/Set.lean#L66-L67","name":"Function.Embedding.codRestrict","kind":"def","docLink":"./Mathlib/Logic/Embedding/Set.html#Function.Embedding.codRestrict","doc":"Restrict the codomain of an embedding. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Embedding/Set.lean#L55-L59","name":"Function.Embedding.optionEmbeddingEquiv","kind":"def","docLink":"./Mathlib/Logic/Embedding/Set.html#Function.Embedding.optionEmbeddingEquiv","doc":"Equivalence between embeddings of `Option α` and a sigma type over the embeddings of `α`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Embedding/Set.lean#L54-L54","name":"Function.Embedding.optionEmbeddingEquiv_apply_snd_coe","kind":"theorem","docLink":"./Mathlib/Logic/Embedding/Set.html#Function.Embedding.optionEmbeddingEquiv_apply_snd_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Embedding/Set.lean#L54-L54","name":"Function.Embedding.optionEmbeddingEquiv_apply_fst","kind":"theorem","docLink":"./Mathlib/Logic/Embedding/Set.html#Function.Embedding.optionEmbeddingEquiv_apply_fst","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Embedding/Set.lean#L54-L54","name":"Function.Embedding.optionEmbeddingEquiv_symm_apply","kind":"theorem","docLink":"./Mathlib/Logic/Embedding/Set.html#Function.Embedding.optionEmbeddingEquiv_symm_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Embedding/Set.lean#L48-L49","name":"Function.Embedding.optionElim","kind":"def","docLink":"./Mathlib/Logic/Embedding/Set.html#Function.Embedding.optionElim","doc":"Given an embedding `f : α ↪ β` and a point outside of `Set.range f`, construct an embedding\n`Option α ↪ β`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Embedding/Set.lean#L47-L47","name":"Function.Embedding.optionElim_apply","kind":"theorem","docLink":"./Mathlib/Logic/Embedding/Set.html#Function.Embedding.optionElim_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Embedding/Set.lean#L40-L41","name":"Function.Embedding.coeWithTop","kind":"def","docLink":"./Mathlib/Logic/Embedding/Set.html#Function.Embedding.coeWithTop","doc":"Embedding into `WithTop α`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Embedding/Set.lean#L39-L39","name":"Function.Embedding.coeWithTop_apply","kind":"theorem","docLink":"./Mathlib/Logic/Embedding/Set.html#Function.Embedding.coeWithTop_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Embedding/Set.lean#L27-L29","name":"Equiv.asEmbedding_range","kind":"theorem","docLink":"./Mathlib/Logic/Embedding/Set.html#Equiv.asEmbedding_range","doc":""}]}