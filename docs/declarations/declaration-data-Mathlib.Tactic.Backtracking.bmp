{"name":"Mathlib.Tactic.Backtracking","instances":[],"imports":["Init","Lean.Meta.Basic","Lean.Meta.Tactic.Util","Mathlib.Control.Basic","Mathlib.Lean.Meta","Mathlib.Data.Sum.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Backtracking.lean#L174-L206","name":"Mathlib.Tactic.backtrack.processIndependentGoals","kind":"opaque","docLink":"./Mathlib/Tactic/Backtracking.html#Mathlib.Tactic.backtrack.processIndependentGoals","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Backtracking.lean#L122-L171","name":"Mathlib.Tactic.backtrack.run","kind":"opaque","docLink":"./Mathlib/Tactic/Backtracking.html#Mathlib.Tactic.backtrack.run","doc":"* `n : Nat` steps remaining.\n* `curr : List MVarId` the current list of unsolved goals.\n* `acc : List MVarId` a list of \"suspended\" goals, which will be returned as subgoals.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Backtracking.lean#L111-L206","name":"Mathlib.Tactic.backtrack","kind":"def","docLink":"./Mathlib/Tactic/Backtracking.html#Mathlib.Tactic.backtrack","doc":"Attempts to solve the `goals`, by recursively calling `alternatives g` on each subgoal that appears.\n`alternatives` returns a list of list of goals (wrapped in `MetaM`).\nThe outermost list corresponds to alternative outcomes,\nwhile the innermost list is the subgoals generated in that outcome.\n\n`backtrack` performs a backtracking search, attempting to close all subgoals.\n\nFurther flow control options are available via the `Config` argument.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Backtracking.lean#L98-L99","name":"Mathlib.Tactic.ppMVarIds","kind":"def","docLink":"./Mathlib/Tactic/Backtracking.html#Mathlib.Tactic.ppMVarIds","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Backtracking.lean#L96-L96","name":"Mathlib.Tactic.BacktrackConfig.commitIndependentGoals","kind":"def","docLink":"./Mathlib/Tactic/Backtracking.html#Mathlib.Tactic.BacktrackConfig.commitIndependentGoals","doc":"If we solve any \"independent\" goals, don't fail. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Backtracking.lean#L94-L94","name":"Mathlib.Tactic.BacktrackConfig.discharge","kind":"def","docLink":"./Mathlib/Tactic/Backtracking.html#Mathlib.Tactic.BacktrackConfig.discharge","doc":"`discharge g` is called on goals for which no lemmas apply.\nIf `none` we return `g` as a new subgoal.\nIf `some l`, we replace `g` by `l` in the list of active goals, and recurse.\nIf failure, we backtrack. (defaults to failure) "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Backtracking.lean#L89-L89","name":"Mathlib.Tactic.BacktrackConfig.suspend","kind":"def","docLink":"./Mathlib/Tactic/Backtracking.html#Mathlib.Tactic.BacktrackConfig.suspend","doc":"If `suspend g`, then we do not attempt to apply any further lemmas,\nbut return `g` as a new subgoal. (defaults to `false`) "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Backtracking.lean#L86-L86","name":"Mathlib.Tactic.BacktrackConfig.proc","kind":"def","docLink":"./Mathlib/Tactic/Backtracking.html#Mathlib.Tactic.BacktrackConfig.proc","doc":"An arbitrary procedure which can be used to modify the list of goals\nbefore each attempt to apply a lemma.\nCalled as `proc goals curr`, where `goals` are the original goals for `backtracking`,\nand `curr` are the current goals.\nReturning `some l` will replace the current goals with `l` and recurse\n(consuming one step of maximum depth).\nReturning `none` will proceed to applying lemmas without changing goals.\nFailure will cause backtracking.\n(defaults to `none`) "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Backtracking.lean#L76-L76","name":"Mathlib.Tactic.BacktrackConfig.maxDepth","kind":"def","docLink":"./Mathlib/Tactic/Backtracking.html#Mathlib.Tactic.BacktrackConfig.maxDepth","doc":"Maximum recursion depth. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Backtracking.lean#L74-L96","name":"Mathlib.Tactic.BacktrackConfig","kind":"structure","docLink":"./Mathlib/Tactic/Backtracking.html#Mathlib.Tactic.BacktrackConfig","doc":"Configuration structure to control the behaviour of `backtrack`:\n* control the maximum depth and behaviour (fail or return subgoals) at the maximum depth,\n* and hooks allowing\n  * modifying intermediate goals before running the external tactic,\n  * 'suspending' goals, returning them in the result, and\n  * discharging subgoals if the external tactic fails.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Backtracking.lean#L58-L60","name":"Lean.MVarId.firstContinuation","kind":"def","docLink":"./Mathlib/Tactic/Backtracking.html#Lean.MVarId.firstContinuation","doc":"Given any tactic that takes a goal, and returns a sequence of alternative outcomes\n(each outcome consisting of a list of new subgoals),\nwe can perform backtracking search by repeatedly applying the tactic.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Backtracking.lean#L46-L49","name":"List.tryAllM","kind":"def","docLink":"./Mathlib/Tactic/Backtracking.html#List.tryAllM","doc":"Run a monadic function on every element of a list,\nreturning the list of elements on which the function fails, and the list of successful results. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Backtracking.lean#L40-L42","name":"Except.emoji","kind":"def","docLink":"./Mathlib/Tactic/Backtracking.html#Except.emoji","doc":"Visualize an `Except` using a checkmark or a cross. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Backtracking.lean#L1-L1","name":"Mathlib.Tactic.BacktrackConfig.mk","kind":"ctor","docLink":"./Mathlib/Tactic/Backtracking.html#Mathlib.Tactic.BacktrackConfig.mk","doc":""}]}