{"name":"Std.Data.RBMap.Alter","instances":[],"imports":["Init","Std.Data.RBMap.WF"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L458-L464","name":"Std.RBMap.alter","kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBMap.alter","doc":"`O(log n)`. `alterP cut f t` simultaneously handles inserting, erasing and replacing an element\nusing a function `f : Option α → Option α`. It is passed the result of `t.findP? cut`\nand can either return `none` to remove the element or `some a` to replace/insert\nthe element with `a` (which must have the same ordering properties as the original element).\n\nThe element is used linearly if `t` is unshared.\n\nThe `AlterWF` assumption is required because `f` may change\nthe ordering properties of the element, which would break the invariants.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L437-L445","name":"Std.RBMap.alter.adapt","kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBMap.alter.adapt","doc":"Auxiliary definition for `alter`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L432-L434","name":"Std.RBMap.modify","kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBMap.modify","doc":"`O(log n)`. In-place replace the corresponding to key `k`.\nThis takes the element out of the tree while `f` runs,\nso it uses the element linearly if `t` is unshared.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L417-L421","name":"Std.RBSet.ModifyWF.of_eq","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBSet.ModifyWF.of_eq","doc":"A sufficient condition for `ModifyWF` is that the new element compares equal to the original.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L405-L407","name":"Std.RBNode.find?_eq_zoom","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.find?_eq_zoom","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L400-L403","name":"Std.RBNode.WF.modify","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.WF.modify","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L394-L398","name":"Std.RBNode.WF.alter","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.WF.alter","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L391-L392","name":"Std.RBNode.Balanced.modify","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Balanced.modify","doc":"The `modify` function preserves the balance invariants. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L383-L388","name":"Std.RBNode.Ordered.modify","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Ordered.modify","doc":"The `modify` function preserves the ordering invariants. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L379-L380","name":"Std.RBNode.modify_eq_alter","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.modify_eq_alter","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L361-L377","name":"Std.RBNode.Balanced.alter","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Balanced.alter","doc":"The `alter` function preserves the balance invariants. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L343-L358","name":"Std.RBNode.Ordered.alter","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Ordered.alter","doc":"The `alter` function preserves the ordering invariants. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L333-L336","name":"Std.RBNode.Path.Ordered.erase","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered.erase","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L319-L331","name":"Std.RBNode.Path.Ordered.del","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered.del","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L312-L317","name":"Std.RBNode.Path.Ordered.insert","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered.insert","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L308-L310","name":"Std.RBNode.Path.Ordered.insertNew","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered.insertNew","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L294-L306","name":"Std.RBNode.Path.Ordered.ins","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered.ins","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L289-L292","name":"Std.RBNode.Ordered.zoom","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Ordered.zoom","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L282-L287","name":"Std.RBNode.Ordered.zoom'","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Ordered.zoom'","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L268-L280","name":"Std.RBNode.Path.Ordered.fill","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered.fill","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L259-L266","name":"Std.RBNode.Path.Ordered","kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered","doc":"The ordering invariant for a `Path`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L252-L256","name":"Std.RBNode.Path.Zoomed.toRootOrdered","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Zoomed.toRootOrdered","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L246-L250","name":"Std.RBNode.cmpEq.RootOrdered_congr","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.cmpEq.RootOrdered_congr","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L241-L244","name":"Std.RBNode.Path.RootOrdered","kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.RootOrdered","doc":"`path.RootOrdered cmp v` is true if `v` would be able to fit into the hole\nwithout violating the ordering invariant.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L227-L235","name":"Std.RBNode.Path.zoom_zoomed₂","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.zoom_zoomed₂","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L218-L225","name":"Std.RBNode.Path.zoom_zoomed₁","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.zoom_zoomed₁","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L213-L216","name":"Std.RBNode.Path.Zoomed","kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Zoomed","doc":"The property of a path returned by `t.zoom cut`. Each of the parents visited along the path have\nthe appropriate ordering relation to the cut.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L204-L207","name":"Std.RBNode.Path.AllR","kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.AllR","doc":"Asserts that `p` holds on all elements to the right of the hole. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L198-L201","name":"Std.RBNode.Path.AllL","kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.AllL","doc":"Asserts that `p` holds on all elements to the left of the hole. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L178-L195","name":"Std.RBNode.Path.Balanced.del","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.del","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L169-L176","name":"Std.RBNode.Path.zoom_insert","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.zoom_insert","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L163-L167","name":"Std.RBNode.Path.Balanced.insert","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.insert","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L160-L161","name":"Std.RBNode.Path.Balanced.insertNew","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.insertNew","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L144-L158","name":"Std.RBNode.Path.Balanced.ins","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.ins","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L137-L142","name":"Std.RBNode.Path.ins_eq_fill","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.ins_eq_fill","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L123-L135","name":"Std.RBNode.Balanced.zoom","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Balanced.zoom","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L117-L121","name":"Std.RBNode.Path.Balanced.fill","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.fill","doc":"The defining property of a balanced path: If `path` is a `c₀,n₀` tree with a `c,n` hole,\nthen filling the hole with a `c,n` tree yields a `c₀,n₀` tree.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L109-L111","name":"Std.RBNode.Path.Balanced.blackR","kind":"ctor","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.blackR","doc":"Descend into the right subtree of a black node. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L106-L108","name":"Std.RBNode.Path.Balanced.blackL","kind":"ctor","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.blackL","doc":"Descend into the left subtree of a black node. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L103-L105","name":"Std.RBNode.Path.Balanced.redR","kind":"ctor","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.redR","doc":"Descend into the right subtree of a red node. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L100-L102","name":"Std.RBNode.Path.Balanced.redL","kind":"ctor","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.redL","doc":"Descend into the left subtree of a red node. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L98-L99","name":"Std.RBNode.Path.Balanced.root","kind":"ctor","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.root","doc":"The root of the tree is `c₀, n₀`-balanced by assumption. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L97-L111","name":"Std.RBNode.Path.Balanced","kind":"inductive","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced","doc":"The balance invariant for a path. `path.Balanced c₀ n₀ c n` means that `path` is a red-black tree\nwith balance invariant `c₀, n₀`, but it has a \"hole\" where a tree with balance invariant `c, n`\nhas been removed. The defining property is `Balanced.fill`: if `path.Balanced c₀ n₀ c n` and you\nfill the hole with a tree satisfying `t.Balanced c n`, then `(path.fill t).Balanced c₀ n₀` .\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L72-L88","name":"Std.RBNode.Path.zoom_del","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.zoom_del","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L68-L70","name":"Std.RBNode.Path.insertNew_eq_insert","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.insertNew_eq_insert","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L57-L66","name":"Std.RBNode.Path.zoom_ins","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.zoom_ins","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L54-L55","name":"Std.RBNode.Path.zoom_fill","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.zoom_fill","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L48-L52","name":"Std.RBNode.Path.zoom_fill'","kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.zoom_fill'","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L46-L46","name":"Std.RBNode.Path.fill'","kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.fill'","doc":"Same as `fill` but taking its arguments in a pair for easier composition with `zoom`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L39-L41","name":"Std.RBNode.delRoot","kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.delRoot","doc":"Auxiliary definition for `zoom_ins`: set the root of the tree to `v`, creating a node if necessary.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L32-L34","name":"Std.RBNode.setRoot","kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.setRoot","doc":"Auxiliary definition for `zoom_ins`: set the root of the tree to `v`, creating a node if necessary.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Alter.lean#L25-L27","name":"Std.RBNode.OnRoot","kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.OnRoot","doc":"Asserts that property `p` holds on the root of the tree, if any. "}]}