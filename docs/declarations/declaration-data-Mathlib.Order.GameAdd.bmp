{"name":"Mathlib.Order.GameAdd","instances":[],"imports":["Init","Mathlib.Data.Sym.Sym2","Mathlib.Logic.Relation"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L246-L250","name":"Sym2.GameAdd.induction","kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.induction","doc":"Induction on the well-founded `Sym2.GameAdd` relation. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L237-L242","name":"Sym2.GameAdd.fix_eq","kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.fix_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L227-L234","name":"Sym2.GameAdd.fix","kind":"def","docLink":"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.fix","doc":"Recursion on the well-founded `Sym2.GameAdd` relation. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L220-L221","name":"WellFounded.sym2_gameAdd","kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#WellFounded.sym2_gameAdd","doc":"The `Sym2.GameAdd` relation on well-founded inputs is well-founded. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L202-L216","name":"Acc.sym2_gameAdd","kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Acc.sym2_gameAdd","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L195-L197","name":"Sym2.GameAdd.snd_fst","kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.snd_fst","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L190-L192","name":"Sym2.GameAdd.fst_snd","kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.fst_snd","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L186-L187","name":"Sym2.GameAdd.snd","kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.snd","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L182-L183","name":"Sym2.GameAdd.fst","kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.fst","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L177-L179","name":"Prod.GameAdd.to_sym2","kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Prod.GameAdd.to_sym2","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L171-L174","name":"Sym2.gameAdd_mk'_iff","kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Sym2.gameAdd_mk'_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L165-L168","name":"Sym2.gameAdd_iff","kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Sym2.gameAdd_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L156-L162","name":"Sym2.GameAdd","kind":"def","docLink":"./Mathlib/Order/GameAdd.html#Sym2.GameAdd","doc":"`Sym2.GameAdd rα x y` means that `x` can be reached from `y` by decreasing either entry with\nrespect to the relation `rα`.\n\nSee `Prod.GameAdd` for the ordered pair analog. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L139-L143","name":"Prod.GameAdd.induction","kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Prod.GameAdd.induction","doc":"Induction on the well-founded `Prod.GameAdd` relation.\nNote that it's strictly more general to induct on the lexicographic order instead. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L131-L134","name":"Prod.GameAdd.fix_eq","kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Prod.GameAdd.fix_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L124-L128","name":"Prod.GameAdd.fix","kind":"def","docLink":"./Mathlib/Order/GameAdd.html#Prod.GameAdd.fix","doc":"Recursion on the well-founded `Prod.GameAdd` relation.\nNote that it's strictly more general to recurse on the lexicographic order instead. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L115-L117","name":"WellFounded.prod_gameAdd","kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#WellFounded.prod_gameAdd","doc":"The `Prod.GameAdd` relation on well-founded inputs is well-founded.\n\nIn particular, the sum of two well-founded games is well-founded. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L103-L109","name":"Acc.prod_gameAdd","kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Acc.prod_gameAdd","doc":"If `a` is accessible under `rα` and `b` is accessible under `rβ`, then `(a, b)` is\naccessible under `Prod.GameAdd rα rβ`. Notice that `Prod.lexAccessible` requires the\nstronger condition `∀ b, Acc rβ b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L92-L95","name":"Prod.rprod_le_transGen_gameAdd","kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Prod.rprod_le_transGen_gameAdd","doc":"`Prod.RProd` is a subrelation of the transitive closure of `Prod.GameAdd`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L87-L88","name":"Prod.gameAdd_le_lex","kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Prod.gameAdd_le_lex","doc":"`Prod.GameAdd` is a subrelation of `Prod.Lex`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L81-L83","name":"Prod.gameAdd_swap_swap_mk","kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Prod.gameAdd_swap_swap_mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L77-L78","name":"Prod.gameAdd_swap_swap","kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Prod.gameAdd_swap_swap","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L71-L73","name":"Prod.gameAdd_mk_iff","kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Prod.gameAdd_mk_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L61-L68","name":"Prod.gameAdd_iff","kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Prod.gameAdd_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L58-L58","name":"Prod.GameAdd.snd","kind":"ctor","docLink":"./Mathlib/Order/GameAdd.html#Prod.GameAdd.snd","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L57-L57","name":"Prod.GameAdd.fst","kind":"ctor","docLink":"./Mathlib/Order/GameAdd.html#Prod.GameAdd.fst","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/GameAdd.lean#L56-L58","name":"Prod.GameAdd","kind":"inductive","docLink":"./Mathlib/Order/GameAdd.html#Prod.GameAdd","doc":"`Prod.GameAdd rα rβ x y` means that `x` can be reached from `y` by decreasing either entry with\nrespect to the relations `rα` and `rβ`.\n\nIt is so called, as it models game addition within combinatorial game theory. If `rα a₁ a₂` means\nthat `a₂ ⟶ a₁` is a valid move in game `α`, and `rβ b₁ b₂` means that `b₂ ⟶ b₁` is a valid move\nin game `β`, then `GameAdd rα rβ` specifies the valid moves in the juxtaposition of `α` and `β`:\nthe player is free to choose one of the games and make a move in it, while leaving the other game\nunchanged.\n\nSee `Sym2.GameAdd` for the unordered pair analog. "}]}