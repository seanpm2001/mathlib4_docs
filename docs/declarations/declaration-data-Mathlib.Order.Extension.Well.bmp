{"name":"Mathlib.Order.Extension.Well","instances":[{"typeNames":["LT.lt","Preorder.toLT","PartialOrder.toPreorder","LinearOrder.toPartialOrder","WellFounded.wellOrderExtension"],"name":"WellFounded.wellOrderExtension.isWellFounded_lt","className":"IsWellFounded"},{"typeNames":["WellOrderExtension"],"name":"instInhabitedWellOrderExtension","className":"Inhabited"},{"typeNames":["WellOrderExtension"],"name":"instLinearOrderWellOrderExtension","className":"LinearOrder"},{"typeNames":["WellOrderExtension","Preorder.toLT","WellOrderExtension","PartialOrder.toPreorder","SemilatticeInf.toPartialOrder","Lattice.toSemilatticeInf","DistribLattice.toLattice","instDistribLattice","instLinearOrderWellOrderExtension"],"name":"WellOrderExtension.wellFoundedLT","className":"IsWellFounded"}],"imports":["Init","Mathlib.Data.Prod.Lex","Mathlib.SetTheory.Ordinal.Arithmetic"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/Extension/Well.lean#L96-L98","name":"toWellOrderExtension_strictMono","kind":"theorem","docLink":"./Mathlib/Order/Extension/Well.html#toWellOrderExtension_strictMono","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/Extension/Well.lean#L91-L93","name":"WellOrderExtension.wellFoundedLT","kind":"instance","docLink":"./Mathlib/Order/Extension/Well.html#WellOrderExtension.wellFoundedLT","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/Extension/Well.lean#L88-L89","name":"instLinearOrderWellOrderExtension","kind":"instance","docLink":"./Mathlib/Order/Extension/Well.html#instLinearOrderWellOrderExtension","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/Extension/Well.lean#L84-L85","name":"toWellOrderExtension","kind":"def","docLink":"./Mathlib/Order/Extension/Well.html#toWellOrderExtension","doc":"\"Identity\" equivalence between a well-founded order and its well-order extension. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/Extension/Well.lean#L81-L81","name":"instInhabitedWellOrderExtension","kind":"instance","docLink":"./Mathlib/Order/Extension/Well.html#instInhabitedWellOrderExtension","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/Extension/Well.lean#L78-L78","name":"WellOrderExtension","kind":"def","docLink":"./Mathlib/Order/Extension/Well.html#WellOrderExtension","doc":"A type alias for `α`, intended to extend a well-founded order on `α` to a well-order. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/Extension/Well.lean#L71-L72","name":"WellFounded.exists_well_order_ge","kind":"theorem","docLink":"./Mathlib/Order/Extension/Well.html#WellFounded.exists_well_order_ge","doc":"Any well-founded relation can be extended to a well-ordering on that type. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/Extension/Well.lean#L65-L67","name":"WellFounded.wellOrderExtension.isWellFounded_lt","kind":"instance","docLink":"./Mathlib/Order/Extension/Well.html#WellFounded.wellOrderExtension.isWellFounded_lt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Order/Extension/Well.lean#L60-L62","name":"WellFounded.wellOrderExtension","kind":"def","docLink":"./Mathlib/Order/Extension/Well.html#WellFounded.wellOrderExtension","doc":"An arbitrary well order on `α` that extends `r`.\n\nThe construction maps `r` into two well-orders: the first map is `WellFounded.rank`, which is not\nnecessarily injective but respects the order `r`; the other map is the identity (with an arbitrarily\nchosen well-order on `α`), which is injective but doesn't respect `r`.\n\nBy taking the lexicographic product of the two, we get both properties, so we can pull it back and\nget a well-order that extend our original order `r`. Another way to view this is that we choose an\narbitrary well-order to serve as a tiebreak between two elements of same rank.\n"}]}