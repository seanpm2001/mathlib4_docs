{"name":"Mathlib.Topology.Homotopy.Path","instances":[{"typeNames":["Path.Homotopic.Quotient","Unit","instTopologicalSpacePUnit","Unit.unit"],"name":"Path.Homotopic.instInhabitedQuotientUnitInstTopologicalSpacePUnitUnit","className":"Inhabited"}],"imports":["Init","Mathlib.Topology.Homotopy.Basic","Mathlib.Topology.PathConnected","Mathlib.Analysis.Convex.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L373-L377","name":"ContinuousMap.Homotopy.evalAt","kind":"def","docLink":"./Mathlib/Topology/Homotopy/Path.html#ContinuousMap.Homotopy.evalAt","doc":"Given a homotopy `H : f ∼ g`, get the path traced by the point `x` as it moves from\n`f x` to `g x`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L362-L366","name":"ContinuousMap.homotopic_const_iff","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#ContinuousMap.homotopic_const_iff","doc":"Two constant continuous maps with nonempty domain are homotopic if and only if their values are\njoined by a path in the codomain. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L351-L355","name":"Path.toHomotopyConst","kind":"def","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.toHomotopyConst","doc":"A path `Path x₀ x₁` generates a homotopy between constant functions `fun _ ↦ x₀` and\n`fun _ ↦ x₁`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L350-L350","name":"Path.toHomotopyConst_apply","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.toHomotopyConst_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L339-L343","name":"Path.Homotopic.hpath_hext","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopic.hpath_hext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L334-L335","name":"Path.Homotopic.map_lift","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopic.map_lift","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L329-L331","name":"Path.Homotopic.Quotient.mapFn","kind":"def","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopic.Quotient.mapFn","doc":"The image of a path homotopy class `P₀` under a map `f`.\nThis is `Path.map` descended to the quotient. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L323-L324","name":"Path.Homotopic.comp_lift","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopic.comp_lift","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L318-L320","name":"Path.Homotopic.Quotient.comp","kind":"def","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopic.Quotient.comp","doc":"The composition of path homotopy classes. This is `Path.trans` descended to the quotient. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L314-L315","name":"Path.Homotopic.instInhabitedQuotientUnitInstTopologicalSpacePUnitUnit","kind":"instance","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopic.instInhabitedQuotientUnitInstTopologicalSpacePUnitUnit","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L308-L309","name":"Path.Homotopic.Quotient","kind":"def","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopic.Quotient","doc":"The quotient on `Path x₀ x₁` by the equivalence relation `Path.Homotopic`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L302-L303","name":"Path.Homotopic.setoid","kind":"def","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopic.setoid","doc":"The setoid on `Path`s defined by the equivalence relation `Path.Homotopic`. That is, two paths are\nequivalent if there is a `Homotopy` between them.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L293-L295","name":"Path.Homotopic.hcomp","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopic.hcomp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L288-L290","name":"Path.Homotopic.map","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopic.map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L284-L285","name":"Path.Homotopic.equivalence","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopic.equivalence","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L279-L281","name":"Path.Homotopic.trans","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopic.trans","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L274-L275","name":"Path.Homotopic.symm","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopic.symm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L269-L270","name":"Path.Homotopic.refl","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopic.refl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L262-L263","name":"Path.Homotopic","kind":"def","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopic","doc":"Two paths `p₀` and `p₁` are `Path.Homotopic` if there exists a `Homotopy` between them.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L246-L255","name":"Path.Homotopy.map","kind":"def","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.map","doc":"Given `F : Homotopy p q`, and `f : C(X, Y)`, we can define a homotopy from `p.map f.continuous` to\n`q.map f.continuous`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L245-L245","name":"Path.Homotopy.map_toFun","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.map_toFun","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L245-L245","name":"Path.Homotopy.map_apply","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.map_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L228-L238","name":"Path.Homotopy.symm₂","kind":"def","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.symm₂","doc":"Suppose `F : Homotopy p q`. Then we have a `Homotopy p.symm q.symm` by reversing the second\nargument.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L227-L227","name":"Path.Homotopy.symm₂_toFun","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.symm₂_toFun","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L227-L227","name":"Path.Homotopy.symm₂_apply","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.symm₂_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L199-L221","name":"Path.Homotopy.reparam","kind":"def","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.reparam","doc":"Suppose `p` is a path, then we have a homotopy from `p` to `p.reparam f` by the convexity of `I`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L189-L191","name":"Path.Homotopy.hcomp_half","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.hcomp_half","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L179-L186","name":"Path.Homotopy.hcomp_apply","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.hcomp_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L162-L176","name":"Path.Homotopy.hcomp","kind":"def","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.hcomp","doc":"Suppose `p₀` and `q₀` are paths from `x₀` to `x₁`, `p₁` and `q₁` are paths from `x₁` to `x₂`.\nFurthermore, suppose `F : Homotopy p₀ q₀` and `G : Homotopy p₁ q₁`. Then we can define a homotopy\nfrom `p₀.trans p₁` to `q₀.trans q₁`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L147-L149","name":"Path.Homotopy.cast","kind":"def","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.cast","doc":"Casting a `Homotopy p₀ p₁` to a `Homotopy q₀ q₁` where `p₀ = q₀` and `p₁ = q₁`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L146-L146","name":"Path.Homotopy.cast_apply","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.cast_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L146-L146","name":"Path.Homotopy.cast_toFun","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.cast_toFun","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L140-L142","name":"Path.Homotopy.symm_trans","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.symm_trans","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L131-L137","name":"Path.Homotopy.trans_apply","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.trans_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L127-L128","name":"Path.Homotopy.trans","kind":"def","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.trans","doc":"Given `Homotopy p₀ p₁` and `Homotopy p₁ p₂`, we can define a `Homotopy p₀ p₂` by putting the first\nhomotopy on `[0, 1/2]` and the second on `[1/2, 1]`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L119-L120","name":"Path.Homotopy.symm_symm","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.symm_symm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L114-L115","name":"Path.Homotopy.symm","kind":"def","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.symm","doc":"Given a `Homotopy p₀ p₁`, we can define a `Homotopy p₁ p₀` by reversing the homotopy.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L113-L113","name":"Path.Homotopy.symm_toFun","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.symm_toFun","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L113-L113","name":"Path.Homotopy.symm_apply","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.symm_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L107-L108","name":"Path.Homotopy.refl","kind":"def","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.refl","doc":"Given a path `p`, we can define a `Homotopy p p` by `F (t, x) = p x`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L106-L106","name":"Path.Homotopy.refl_apply","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.refl_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L106-L106","name":"Path.Homotopy.refl_toFun","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.refl_toFun","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L93-L95","name":"Path.Homotopy.eval_one","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.eval_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L87-L89","name":"Path.Homotopy.eval_zero","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.eval_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L80-L83","name":"Path.Homotopy.eval","kind":"def","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.eval","doc":"Evaluating a path homotopy at an intermediate point, giving us a `Path`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L73-L75","name":"Path.Homotopy.target","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.target","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L67-L69","name":"Path.Homotopy.source","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.source","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L62-L63","name":"Path.Homotopy.coeFn_injective","kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy.coeFn_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Topology/Homotopy/Path.lean#L52-L53","name":"Path.Homotopy","kind":"def","docLink":"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy","doc":"The type of homotopies between two paths.\n"}]}