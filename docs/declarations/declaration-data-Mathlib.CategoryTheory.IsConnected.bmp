{"name":"Mathlib.CategoryTheory.IsConnected","instances":[{"typeNames":["CategoryTheory.ULiftHom","ULift","CategoryTheory.ULiftHom.category","ULift","CategoryTheory.uliftCategory"],"name":"CategoryTheory.instIsConnectedULiftHomULiftCategoryUliftCategory","className":"CategoryTheory.IsConnected"},{"typeNames":["Opposite","CategoryTheory.Category.opposite"],"name":"CategoryTheory.isPreconnected_op","className":"CategoryTheory.IsPreconnected"},{"typeNames":["Opposite","CategoryTheory.Category.opposite"],"name":"CategoryTheory.isConnected_op","className":"CategoryTheory.IsConnected"},{"typeNames":["CategoryTheory.Functor","CategoryTheory.Functor.category","CategoryTheory.Functor.const"],"name":"CategoryTheory.instFullFunctorCategoryConst","className":"CategoryTheory.Full"},{"typeNames":["Quiver.Hom","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.Groupoid.toCategory"],"name":"CategoryTheory.nonempty_hom_of_connected_groupoid","className":"Nonempty"}],"imports":["Init","Mathlib.Data.List.Chain","Mathlib.CategoryTheory.PUnit","Mathlib.CategoryTheory.Groupoid","Mathlib.CategoryTheory.Category.ULift"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L380-L384","name":"CategoryTheory.nonempty_hom_of_connected_groupoid","kind":"instance","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.nonempty_hom_of_connected_groupoid","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L374-L378","name":"CategoryTheory.instFullFunctorCategoryConst","kind":"instance","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.instFullFunctorCategoryConst","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L365-L371","name":"CategoryTheory.nat_trans_from_is_connected","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.nat_trans_from_is_connected","doc":"For objects `X Y : C`, any natural transformation `α : const X ⟶ const Y` from a connected\ncategory must be constant.\nThis is the key property of connected categories which we use to establish properties about limits.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L351-L356","name":"CategoryTheory.discreteIsConnectedEquivPUnit","kind":"def","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.discreteIsConnectedEquivPUnit","doc":"If `Discrete α` is connected, then `α` is (type-)equivalent to `PUnit`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L341-L347","name":"CategoryTheory.isConnected_of_zigzag","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.isConnected_of_zigzag","doc":"If any two objects in a nonempty category are linked by a sequence of (potentially reversed)\nmorphisms, then J is connected.\n\nThe converse of `exists_zigzag'`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L331-L333","name":"CategoryTheory.exists_zigzag'","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.exists_zigzag'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L317-L328","name":"CategoryTheory.zigzag_isConnected","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.zigzag_isConnected","doc":"If any two objects in a nonempty category are related by `Zigzag`, the category is connected.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L310-L312","name":"CategoryTheory.isConnected_zigzag","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.isConnected_zigzag","doc":"In a connected category, any two objects are related by `Zigzag`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L300-L306","name":"CategoryTheory.equiv_relation","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.equiv_relation","doc":"Any equivalence relation containing (⟶) holds for all pairs of a connected category. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L294-L296","name":"CategoryTheory.zag_of_zag_obj","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.zag_of_zag_obj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L288-L290","name":"CategoryTheory.zigzag_obj_of_zigzag","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.zigzag_obj_of_zigzag","doc":"If there is a zigzag from `j₁` to `j₂`, then there is a zigzag from `F j₁` to\n`F j₂` as long as `F` is a functor.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L280-L282","name":"CategoryTheory.Zigzag.setoid","kind":"def","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.Zigzag.setoid","doc":"The setoid given by the equivalence relation `Zigzag`. A quotient for this\nsetoid is a connected component of the category.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L272-L274","name":"CategoryTheory.zigzag_equivalence","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.zigzag_equivalence","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L268-L269","name":"CategoryTheory.zigzag_symmetric","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.zigzag_symmetric","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L264-L265","name":"CategoryTheory.Zigzag","kind":"def","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.Zigzag","doc":"`j₁` and `j₂` are related by `Zigzag` if there is a chain of\nmorphisms from `j₁` to `j₂`, with backward morphisms allowed.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L257-L257","name":"CategoryTheory.zag_symmetric","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.zag_symmetric","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L253-L254","name":"CategoryTheory.Zag","kind":"def","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.Zag","doc":"j₁ and j₂ are related by `Zag` if there is a morphism between them. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L247-L248","name":"CategoryTheory.isConnected_of_isConnected_op","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.isConnected_of_isConnected_op","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L243-L244","name":"CategoryTheory.isPreconnected_of_isPreconnected_op","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.isPreconnected_of_isPreconnected_op","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L239-L240","name":"CategoryTheory.isConnected_op","kind":"instance","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.isConnected_op","doc":"If `J` is connected, then `Jᵒᵖ` is connected as well. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L230-L235","name":"CategoryTheory.isPreconnected_op","kind":"instance","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.isPreconnected_op","doc":"If `J` is preconnected, then `Jᵒᵖ` is preconnected as well. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L223-L226","name":"CategoryTheory.isConnected_of_equivalent","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.isConnected_of_equivalent","doc":"If `J` and `K` are equivalent, then if `J` is connected then `K` is as well. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L210-L219","name":"CategoryTheory.isPreconnected_of_equivalent","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.isPreconnected_of_equivalent","doc":"If `J` and `K` are equivalent, then if `J` is preconnected then `K` is as well. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L195-L206","name":"CategoryTheory.isPreconnected_induction","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.isPreconnected_induction","doc":"Another induction principle for `IsPreconnected J`:\ngiven a type family `Z : J → Sort*` and\na rule for transporting in *both* directions along a morphism in `J`,\nwe can transport an `x : Z j₀` to a point in `Z j` for any `j`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L178-L188","name":"CategoryTheory.instIsConnectedULiftHomULiftCategoryUliftCategory","kind":"instance","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.instIsConnectedULiftHomULiftCategoryUliftCategory","doc":"Lifting the universe level of morphisms and objects preserves connectedness. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L165-L174","name":"CategoryTheory.IsConnected.of_induct","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.IsConnected.of_induct","doc":"If any maximal connected component containing some element j₀ of J is all of J, then J is connected.\n\nThe converse of `induct_on_objects`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L153-L157","name":"CategoryTheory.induct_on_objects","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.induct_on_objects","doc":"An inductive-like property for the objects of a connected category.\nIf the set `p` is nonempty, and `p` is closed under morphisms of `J`,\nthen `p` contains all of `J`.\n\nThe converse is given in `IsConnected.of_induct`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L139-L144","name":"CategoryTheory.IsConnected.of_constant_of_preserves_morphisms","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.IsConnected.of_constant_of_preserves_morphisms","doc":"`J` is connected if: given any function `F : J → α` which is constant for any\n`j₁, j₂` for which there is a morphism `j₁ ⟶ j₂`, then `F` is constant.\nThis can be thought of as a local-to-global property.\n\nThe converse of `constant_of_preserves_morphisms`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L120-L130","name":"CategoryTheory.constant_of_preserves_morphisms","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.constant_of_preserves_morphisms","doc":"If `J` is connected, then given any function `F` such that the presence of a\nmorphism `j₁ ⟶ j₂` implies `F j₁ = F j₂`, we have that `F` is constant.\nThis can be thought of as a local-to-global property.\n\nThe converse is shown in `IsConnected.of_constant_of_preserves_morphisms`\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L109-L111","name":"CategoryTheory.IsConnected.of_any_functor_const_on_obj","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.IsConnected.of_any_functor_const_on_obj","doc":"If any functor to a discrete category is constant on objects, J is connected.\nThe converse of `any_functor_const_on_obj`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L101-L103","name":"CategoryTheory.any_functor_const_on_obj","kind":"theorem","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.any_functor_const_on_obj","doc":"If J is connected, any functor to a discrete category is constant on objects.\nThe converse is given in `IsConnected.of_any_functor_const_on_obj`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L93-L95","name":"CategoryTheory.isoConstant","kind":"def","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.isoConstant","doc":"If `J` is connected, any functor `F : J ⥤ Discrete α` is isomorphic to\nthe constant functor with value `F.obj j` (for any choice of `j`).\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L81-L81","name":"CategoryTheory.IsConnected.is_nonempty","kind":"def","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.IsConnected.is_nonempty","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L80-L80","name":"CategoryTheory.IsConnected.mk","kind":"ctor","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.IsConnected.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L80-L81","name":"CategoryTheory.IsConnected","kind":"class","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.IsConnected","doc":"We define a connected category as a _nonempty_ category for which every\nfunctor to a discrete category is constant.\n\nNB. Some authors include the empty category as connected, we do not.\nWe instead are interested in categories with exactly one 'connected\ncomponent'.\n\nThis allows us to show that the functor X ⨯ - preserves connected limits.\n\nSee <https://stacks.math.columbia.edu/tag/002S>\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L63-L63","name":"CategoryTheory.IsPreconnected.iso_constant","kind":"def","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.IsPreconnected.iso_constant","doc":"A possibly empty category for which every functor to a discrete category is constant.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L62-L62","name":"CategoryTheory.IsPreconnected.mk","kind":"ctor","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.IsPreconnected.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/IsConnected.lean#L62-L64","name":"CategoryTheory.IsPreconnected","kind":"class","docLink":"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.IsPreconnected","doc":"A possibly empty category for which every functor to a discrete category is constant.\n"}]}