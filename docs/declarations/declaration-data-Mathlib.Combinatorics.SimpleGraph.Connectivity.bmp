{"name":"Mathlib.Combinatorics.SimpleGraph.Connectivity","instances":[{"typeNames":["Eq","SimpleGraph.Walk"],"name":"SimpleGraph.instDecidableEqWalk","className":"Decidable"},{"typeNames":["SimpleGraph.Walk"],"name":"SimpleGraph.Walk.instInhabited","className":"Inhabited"},{"typeNames":["SimpleGraph.Walk.IsPath"],"name":"SimpleGraph.Walk.instDecidableIsPath","className":"Decidable"},{"typeNames":["SimpleGraph.Connected","SimpleGraph.Connected","SimpleGraph.Reachable"],"name":"SimpleGraph.instCoeFunConnectedForAllReachable","className":"CoeFun"},{"typeNames":["SimpleGraph.ConnectedComponent"],"name":"SimpleGraph.ConnectedComponent.inhabited","className":"Inhabited"},{"typeNames":["SimpleGraph.ConnectedComponent"],"name":"SimpleGraph.ConnectedComponent.instSetLikeConnectedComponent","className":"SetLike"},{"typeNames":["Set.Elem","SimpleGraph.Walk","setOf","Eq","Nat","SimpleGraph.Walk.length"],"name":"SimpleGraph.fintypeSetWalkLength","className":"Fintype"},{"typeNames":["Set.Elem","SimpleGraph.Walk","setOf","And","SimpleGraph.Walk.IsPath","Eq","Nat","SimpleGraph.Walk.length"],"name":"SimpleGraph.fintypeSetPathLength","className":"Fintype"},{"typeNames":["SimpleGraph.Reachable"],"name":"SimpleGraph.instDecidableRelReachable","className":"Decidable"},{"typeNames":["SimpleGraph.ConnectedComponent"],"name":"SimpleGraph.instFintypeConnectedComponent","className":"Fintype"},{"typeNames":["SimpleGraph.Preconnected"],"name":"SimpleGraph.instDecidablePreconnected","className":"Decidable"},{"typeNames":["SimpleGraph.Connected"],"name":"SimpleGraph.instDecidableConnected","className":"Decidable"}],"imports":["Init","Mathlib.Combinatorics.SimpleGraph.Basic","Mathlib.Combinatorics.SimpleGraph.Subgraph","Mathlib.Data.List.Rotate"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2534-L2536","name":"SimpleGraph.isBridge_iff_mem_and_forall_cycle_not_mem","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.isBridge_iff_mem_and_forall_cycle_not_mem","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2524-L2531","name":"SimpleGraph.isBridge_iff_adj_and_forall_cycle_not_mem","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.isBridge_iff_adj_and_forall_cycle_not_mem","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2499-L2521","name":"SimpleGraph.adj_and_reachable_delete_edges_iff_exists_cycle","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.adj_and_reachable_delete_edges_iff_exists_cycle","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2471-L2495","name":"SimpleGraph.reachable_deleteEdges_iff_exists_cycle.aux","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.reachable_deleteEdges_iff_exists_cycle.aux","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2465-L2468","name":"SimpleGraph.isBridge_iff_adj_and_forall_walk_mem_edges","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.isBridge_iff_adj_and_forall_walk_mem_edges","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2450-L2462","name":"SimpleGraph.reachable_delete_edges_iff_exists_walk","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.reachable_delete_edges_iff_exists_walk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2446-L2447","name":"SimpleGraph.isBridge_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.isBridge_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2441-L2443","name":"SimpleGraph.IsBridge","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.IsBridge","doc":"An edge of a graph is a *bridge* if, after removing it, its incident vertices\nare no longer reachable from one another. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2426-L2428","name":"SimpleGraph.instDecidableConnected","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.instDecidableConnected","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2423-L2424","name":"SimpleGraph.instDecidablePreconnected","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.instDecidablePreconnected","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2420-L2421","name":"SimpleGraph.instFintypeConnectedComponent","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.instFintypeConnectedComponent","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2417-L2418","name":"SimpleGraph.instDecidableRelReachable","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.instDecidableRelReachable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2406-L2414","name":"SimpleGraph.reachable_iff_exists_finsetWalkLength_nonempty","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.reachable_iff_exists_finsetWalkLength_nonempty","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2394-L2397","name":"SimpleGraph.fintypeSetPathLength","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.fintypeSetPathLength","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2388-L2391","name":"SimpleGraph.card_set_walk_length_eq","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.card_set_walk_length_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2380-L2383","name":"SimpleGraph.set_walk_length_toFinset_eq","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.set_walk_length_toFinset_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2375-L2377","name":"SimpleGraph.fintypeSetWalkLength","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.fintypeSetWalkLength","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2368-L2370","name":"SimpleGraph.Walk.mem_finsetWalkLength_iff_length_eq","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.mem_finsetWalkLength_iff_length_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2350-L2363","name":"SimpleGraph.coe_finsetWalkLength_eq","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.coe_finsetWalkLength_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2338-L2347","name":"SimpleGraph.finsetWalkLength","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.finsetWalkLength","doc":"The `Finset` of length-`n` walks from `u` to `v`.\nThis is used to give `{p : G.walk u v | p.length = n}` a `Fintype` instance, and it\ncan also be useful as a recursive description of this set when `V` is finite.\n\nSee `SimpleGraph.coe_finsetWalkLength_eq` for the relationship between this `Finset` and\nthe set of length-`n` walks. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2311-L2323","name":"SimpleGraph.set_walk_length_succ_eq","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.set_walk_length_succ_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2304-L2308","name":"SimpleGraph.set_walk_length_zero_eq_of_ne","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.set_walk_length_zero_eq_of_ne","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2299-L2301","name":"SimpleGraph.set_walk_self_length_zero_eq","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.set_walk_self_length_zero_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2280-L2289","name":"SimpleGraph.Walk.finite_neighborSet_toSubgraph","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.finite_neighborSet_toSubgraph","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2275-L2276","name":"SimpleGraph.Walk.toSubgraph_map","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.toSubgraph_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2269-L2271","name":"SimpleGraph.Walk.toSubgraph_rotate","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.toSubgraph_rotate","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2258-L2265","name":"SimpleGraph.Walk.toSubgraph_reverse","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.toSubgraph_reverse","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2253-L2254","name":"SimpleGraph.Walk.toSubgraph_append","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.toSubgraph_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2248-L2249","name":"SimpleGraph.Walk.edgeSet_toSubgraph","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.edgeSet_toSubgraph","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2243-L2244","name":"SimpleGraph.Walk.mem_edges_toSubgraph","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.mem_edges_toSubgraph","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2239-L2240","name":"SimpleGraph.Walk.verts_toSubgraph","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.verts_toSubgraph","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2230-L2235","name":"SimpleGraph.Walk.mem_verts_toSubgraph","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.mem_verts_toSubgraph","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2226-L2227","name":"SimpleGraph.Walk.toSubgraph_cons_nil_eq_subgraphOfAdj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.toSubgraph_cons_nil_eq_subgraphOfAdj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2221-L2223","name":"SimpleGraph.Walk.toSubgraph","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.toSubgraph","doc":"The subgraph consisting of the vertices and edges of the walk. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2207-L2209","name":"SimpleGraph.Connected.set_univ_walk_nonempty","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Connected.set_univ_walk_nonempty","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2201-L2204","name":"SimpleGraph.Preconnected.set_univ_walk_nonempty","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Preconnected.set_univ_walk_nonempty","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2193-L2198","name":"SimpleGraph.subgraphOfAdj_connected","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.subgraphOfAdj_connected","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2184-L2189","name":"SimpleGraph.singletonSubgraph_connected","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.singletonSubgraph_connected","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2180-L2181","name":"SimpleGraph.Subgraph.Connected","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Subgraph.Connected","doc":"A subgraph is connected if it is connected as a simple graph. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2169-L2174","name":"SimpleGraph.ConnectedComponent.isoEquivSupp","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.isoEquivSupp","doc":"The equivalence between connected components, induced by an isomorphism of graphs,\nitself defines an equivalence on the supports of each connected component.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2162-L2163","name":"SimpleGraph.ConnectedComponent.connectedComponentMk_mem","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.connectedComponentMk_mem","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2157-L2159","name":"SimpleGraph.ConnectedComponent.mem_supp_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.mem_supp_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2152-L2154","name":"SimpleGraph.ConnectedComponent.instSetLikeConnectedComponent","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.instSetLikeConnectedComponent","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2148-L2149","name":"SimpleGraph.ConnectedComponent.supp_inj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.supp_inj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2138-L2144","name":"SimpleGraph.ConnectedComponent.supp_injective","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.supp_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2133-L2134","name":"SimpleGraph.ConnectedComponent.supp","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.supp","doc":"The set of vertices in a connected component of a graph. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2121-L2125","name":"SimpleGraph.Iso.connectedComponentEquiv_trans","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Iso.connectedComponentEquiv_trans","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2114-L2117","name":"SimpleGraph.Iso.connectedComponentEquiv_symm","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Iso.connectedComponentEquiv_symm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2107-L2110","name":"SimpleGraph.Iso.connectedComponentEquiv_refl","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Iso.connectedComponentEquiv_refl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2097-L2103","name":"SimpleGraph.Iso.connectedComponentEquiv","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Iso.connectedComponentEquiv","doc":"An isomorphism of graphs induces a bijection of connected components. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2096-L2096","name":"SimpleGraph.Iso.connectedComponentEquiv_symm_apply","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Iso.connectedComponentEquiv_symm_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2096-L2096","name":"SimpleGraph.Iso.connectedComponentEquiv_apply","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Iso.connectedComponentEquiv_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2084-L2088","name":"SimpleGraph.ConnectedComponent.iso_inv_image_comp_eq_iff_eq_map","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.iso_inv_image_comp_eq_iff_eq_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2076-L2080","name":"SimpleGraph.ConnectedComponent.iso_image_comp_eq_map_iff_eq_comp","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.iso_image_comp_eq_map_iff_eq_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2067-L2070","name":"SimpleGraph.ConnectedComponent.map_comp","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.map_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2061-L2063","name":"SimpleGraph.ConnectedComponent.map_id","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.map_id","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2055-L2057","name":"SimpleGraph.ConnectedComponent.map_mk","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.map_mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2049-L2051","name":"SimpleGraph.ConnectedComponent.map","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.map","doc":"The map on connected components induced by a graph homomorphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2043-L2045","name":"SimpleGraph.Preconnected.subsingleton_connectedComponent","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Preconnected.subsingleton_connectedComponent","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2038-L2040","name":"SimpleGraph.ConnectedComponent.forall","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.forall","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2033-L2035","name":"SimpleGraph.ConnectedComponent.exists","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.exists","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2027-L2030","name":"SimpleGraph.ConnectedComponent.lift_mk","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.lift_mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2021-L2023","name":"SimpleGraph.ConnectedComponent.lift","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.lift","doc":"The `ConnectedComponent` specialization of `Quot.lift`. Provides the stronger\nassumption that the vertices are connected by a path. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2014-L2016","name":"SimpleGraph.ConnectedComponent.connectedComponentMk_eq_of_adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.connectedComponentMk_eq_of_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2009-L2011","name":"SimpleGraph.ConnectedComponent.eq","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L2003-L2005","name":"SimpleGraph.ConnectedComponent.exact","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.exact","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1998-L2000","name":"SimpleGraph.ConnectedComponent.sound","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.sound","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1992-L1995","name":"SimpleGraph.ConnectedComponent.ind₂","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.ind₂","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1986-L1988","name":"SimpleGraph.ConnectedComponent.ind","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.ind","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1981-L1982","name":"SimpleGraph.ConnectedComponent.inhabited","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.inhabited","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1980-L1980","name":"SimpleGraph.ConnectedComponent.inhabited_default","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent.inhabited_default","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1973-L1973","name":"SimpleGraph.connectedComponentMk","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.connectedComponentMk","doc":"Gives the connected component containing a particular vertex. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1969-L1969","name":"SimpleGraph.ConnectedComponent","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.ConnectedComponent","doc":"The quotient of `V` by the `SimpleGraph.Reachable` relation gives the connected\ncomponents of a graph. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1962-L1964","name":"SimpleGraph.Iso.connected_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Iso.connected_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1956-L1959","name":"SimpleGraph.Connected.map","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Connected.map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1954-L1954","name":"SimpleGraph.instCoeFunConnectedForAllReachable","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.instCoeFunConnectedForAllReachable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1951-L1951","name":"SimpleGraph.Connected.nonempty","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Connected.nonempty","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1950-L1950","name":"SimpleGraph.Connected.preconnected","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Connected.preconnected","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1949-L1951","name":"SimpleGraph.Connected","kind":"structure","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Connected","doc":"A graph is connected if it's preconnected and contains at least one vertex.\nThis follows the convention observed by mathlib that something is connected iff it has\nexactly one connected component.\n\nThere is a `CoeFun` instance so that `h u v` can be used instead of `h.Preconnected u v`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1948-L1948","name":"SimpleGraph.connected_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.connected_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1937-L1940","name":"SimpleGraph.Iso.preconnected_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Iso.preconnected_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1932-L1934","name":"SimpleGraph.Preconnected.map","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Preconnected.map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1929-L1929","name":"SimpleGraph.Preconnected","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Preconnected","doc":"A graph is preconnected if every pair of vertices is reachable from one another. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1925-L1925","name":"SimpleGraph.reachableSetoid","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.reachableSetoid","doc":"The equivalence relation on vertices given by `SimpleGraph.Reachable`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1920-L1921","name":"SimpleGraph.reachable_is_equivalence","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.reachable_is_equivalence","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1913-L1915","name":"SimpleGraph.Iso.symm_apply_reachable","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Iso.symm_apply_reachable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1908-L1910","name":"SimpleGraph.Iso.reachable_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Iso.reachable_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1903-L1905","name":"SimpleGraph.Reachable.map","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Reachable.map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1890-L1900","name":"SimpleGraph.reachable_iff_reflTransGen","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.reachable_iff_reflTransGen","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1885-L1887","name":"SimpleGraph.Reachable.trans","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Reachable.trans","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1880-L1881","name":"SimpleGraph.reachable_comm","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.reachable_comm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1876-L1877","name":"SimpleGraph.Reachable.symm","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Reachable.symm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1872-L1872","name":"SimpleGraph.Reachable.rfl","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Reachable.rfl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1869-L1869","name":"SimpleGraph.Reachable.refl","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Reachable.refl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1864-L1865","name":"SimpleGraph.Adj.reachable","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Adj.reachable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1860-L1861","name":"SimpleGraph.Walk.reachable","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.reachable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1856-L1857","name":"SimpleGraph.Reachable.elim_path","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Reachable.elim_path","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1851-L1853","name":"SimpleGraph.Reachable.elim","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Reachable.elim","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1846-L1848","name":"SimpleGraph.reachable_iff_nonempty_univ","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.reachable_iff_nonempty_univ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1841-L1841","name":"SimpleGraph.Reachable","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Reachable","doc":"Two vertices are *reachable* if there is a walk between them.\nThis is equivalent to `Relation.ReflTransGen` of `G.Adj`.\nSee `SimpleGraph.reachable_iff_reflTransGen`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1825-L1830","name":"SimpleGraph.Walk.toDeleteEdges_copy","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.toDeleteEdges_copy","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1819-L1821","name":"SimpleGraph.Walk.IsCycle.toDeleteEdges","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsCycle.toDeleteEdges","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1814-L1816","name":"SimpleGraph.Walk.IsPath.toDeleteEdges","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsPath.toDeleteEdges","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1806-L1811","name":"SimpleGraph.Walk.map_toDeleteEdges_eq","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.map_toDeleteEdges_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1800-L1802","name":"SimpleGraph.Walk.toDeleteEdge","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.toDeleteEdge","doc":"Given a walk that avoids an edge, create a walk in the subgraph with that edge deleted.\nThis is an abbreviation for `SimpleGraph.Walk.toDeleteEdges`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1791-L1795","name":"SimpleGraph.Walk.toDeleteEdges_cons","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.toDeleteEdges_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1786-L1787","name":"SimpleGraph.Walk.toDeleteEdges_nil","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.toDeleteEdges_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1778-L1782","name":"SimpleGraph.Walk.toDeleteEdges","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.toDeleteEdges","doc":"Given a walk that avoids a set of edges, produce a walk in the graph\nwith those edges deleted. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1758-L1763","name":"SimpleGraph.Walk.reverse_transfer","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.reverse_transfer","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1748-L1754","name":"SimpleGraph.Walk.transfer_append","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.transfer_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1738-L1744","name":"SimpleGraph.Walk.transfer_transfer","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.transfer_transfer","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1722-L1729","name":"SimpleGraph.Walk.IsCycle.transfer","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsCycle.transfer","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1713-L1719","name":"SimpleGraph.Walk.IsPath.transfer","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsPath.transfer","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1707-L1708","name":"SimpleGraph.Walk.length_transfer","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.length_transfer","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1702-L1703","name":"SimpleGraph.Walk.support_transfer","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.support_transfer","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1697-L1698","name":"SimpleGraph.Walk.edges_transfer","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.edges_transfer","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1691-L1693","name":"SimpleGraph.Walk.transfer_eq_map_of_le","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.transfer_eq_map_of_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1687-L1688","name":"SimpleGraph.Walk.transfer_self","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.transfer_self","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1677-L1682","name":"SimpleGraph.Walk.transfer","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.transfer","doc":"The walk `p` transferred to lie in `H`, given that `H` contains its edges. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1662-L1664","name":"SimpleGraph.Path.mapEmbedding_injective","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path.mapEmbedding_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1658-L1659","name":"SimpleGraph.Path.mapEmbedding","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path.mapEmbedding","doc":"Given a graph embedding, map paths to paths. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1657-L1657","name":"SimpleGraph.Path.mapEmbedding_coe","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path.mapEmbedding_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1649-L1653","name":"SimpleGraph.Path.map_injective","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path.map_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1644-L1646","name":"SimpleGraph.Path.map","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path.map","doc":"Given an injective graph homomorphism, map paths to paths. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1643-L1643","name":"SimpleGraph.Path.map_coe","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path.map_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1632-L1632","name":"SimpleGraph.Walk.IsCycle.mapLe","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsCycle.mapLe","doc":"**Alias** of the reverse direction of `SimpleGraph.Walk.mapLe_isCycle`."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1632-L1632","name":"SimpleGraph.Walk.IsCycle.of_mapLe","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsCycle.of_mapLe","doc":"**Alias** of the forward direction of `SimpleGraph.Walk.mapLe_isCycle`."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1627-L1629","name":"SimpleGraph.Walk.mapLe_isCycle","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.mapLe_isCycle","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1622-L1622","name":"SimpleGraph.Walk.IsPath.mapLe","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsPath.mapLe","doc":"**Alias** of the reverse direction of `SimpleGraph.Walk.mapLe_isPath`."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1622-L1622","name":"SimpleGraph.Walk.IsPath.of_mapLe","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsPath.of_mapLe","doc":"**Alias** of the forward direction of `SimpleGraph.Walk.mapLe_isPath`."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1617-L1619","name":"SimpleGraph.Walk.mapLe_isPath","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.mapLe_isPath","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1612-L1612","name":"SimpleGraph.Walk.IsTrail.of_mapLe","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsTrail.of_mapLe","doc":"**Alias** of the forward direction of `SimpleGraph.Walk.mapLe_isTrail`."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1612-L1612","name":"SimpleGraph.Walk.IsTrail.mapLe","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsTrail.mapLe","doc":"**Alias** of the reverse direction of `SimpleGraph.Walk.mapLe_isTrail`."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1607-L1609","name":"SimpleGraph.Walk.mapLe_isTrail","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.mapLe_isTrail","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1602-L1603","name":"SimpleGraph.Walk.mapLe","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.mapLe","doc":"The specialization of `SimpleGraph.Walk.map` for mapping walks to supergraphs. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1581-L1597","name":"SimpleGraph.Walk.map_injective_of_injective","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.map_injective_of_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1576-L1576","name":"SimpleGraph.Walk.map_isCycle_of_injective","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.map_isCycle_of_injective","doc":"**Alias** of the reverse direction of `SimpleGraph.Walk.map_isCycle_iff_of_injective`."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1570-L1573","name":"SimpleGraph.Walk.map_isCycle_iff_of_injective","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.map_isCycle_iff_of_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1567-L1567","name":"SimpleGraph.Walk.map_isTrail_of_injective","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.map_isTrail_of_injective","doc":"**Alias** of the reverse direction of `SimpleGraph.Walk.map_isTrail_iff_of_injective`."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1557-L1564","name":"SimpleGraph.Walk.map_isTrail_iff_of_injective","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.map_isTrail_iff_of_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1553-L1554","name":"SimpleGraph.Walk.map_isPath_iff_of_injective","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.map_isPath_iff_of_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1541-L1550","name":"SimpleGraph.Walk.IsPath.of_map","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsPath.of_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1529-L1538","name":"SimpleGraph.Walk.map_isPath_of_injective","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.map_isPath_of_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1519-L1524","name":"SimpleGraph.Walk.edges_map","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.edges_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1515-L1515","name":"SimpleGraph.Walk.darts_map","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.darts_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1511-L1511","name":"SimpleGraph.Walk.support_map","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.support_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1507-L1507","name":"SimpleGraph.Walk.reverse_map","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.reverse_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1502-L1503","name":"SimpleGraph.Walk.map_append","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.map_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1499-L1499","name":"SimpleGraph.Walk.length_map","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.length_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1495-L1495","name":"SimpleGraph.Walk.map_eq_nil_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.map_eq_nil_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1488-L1491","name":"SimpleGraph.Walk.map_eq_of_eq","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.map_eq_of_eq","doc":"Unlike categories, for graphs vertex equality is an important notion, so needing to be able to\nto work with equality of graph homomorphisms is a necessary evil. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1480-L1483","name":"SimpleGraph.Walk.map_map","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.map_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1473-L1476","name":"SimpleGraph.Walk.map_id","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.map_id","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1466-L1469","name":"SimpleGraph.Walk.map_copy","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.map_copy","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1462-L1462","name":"SimpleGraph.Walk.map_cons","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.map_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1458-L1458","name":"SimpleGraph.Walk.map_nil","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.map_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1450-L1452","name":"SimpleGraph.Walk.map","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.map","doc":"Given a graph homomorphism, map walks to walks. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1436-L1437","name":"SimpleGraph.Walk.edges_toPath_subset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.edges_toPath_subset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1432-L1433","name":"SimpleGraph.Walk.darts_toPath_subset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.darts_toPath_subset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1428-L1429","name":"SimpleGraph.Walk.edges_bypass_subset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.edges_bypass_subset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1416-L1425","name":"SimpleGraph.Walk.darts_bypass_subset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.darts_bypass_subset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1411-L1413","name":"SimpleGraph.Walk.support_toPath_subset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.support_toPath_subset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1397-L1408","name":"SimpleGraph.Walk.support_bypass_subset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.support_bypass_subset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1393-L1394","name":"SimpleGraph.Walk.toPath","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.toPath","doc":"Given a walk, produces a path with the same endpoints using `SimpleGraph.Walk.bypass`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1378-L1389","name":"SimpleGraph.Walk.length_bypass_le","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.length_bypass_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1368-L1375","name":"SimpleGraph.Walk.bypass_isPath","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.bypass_isPath","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1362-L1365","name":"SimpleGraph.Walk.bypass_copy","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.bypass_copy","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1351-L1358","name":"SimpleGraph.Walk.bypass","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.bypass","doc":"Given a walk, produces a walk from it by bypassing subwalks between repeated vertices.\nThe result is a path, as shown in `SimpleGraph.Walk.bypass_isPath`.\nThis is packaged up in `SimpleGraph.Walk.toPath`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1334-L1336","name":"SimpleGraph.Path.cons_isCycle","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path.cons_isCycle","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1330-L1331","name":"SimpleGraph.Path.not_mem_edges_of_loop","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path.not_mem_edges_of_loop","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1324-L1327","name":"SimpleGraph.Path.loop_eq","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path.loop_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1320-L1321","name":"SimpleGraph.Path.nodup_support","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path.nodup_support","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1314-L1316","name":"SimpleGraph.Path.count_edges_eq_one","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path.count_edges_eq_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1309-L1311","name":"SimpleGraph.Path.count_support_eq_one","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path.count_support_eq_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1305-L1306","name":"SimpleGraph.Path.reverse","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path.reverse","doc":"The reverse of a path is another path.  See also `SimpleGraph.Walk.reverse`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1304-L1304","name":"SimpleGraph.Path.reverse_coe","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path.reverse_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1299-L1300","name":"SimpleGraph.Path.mk'_mem_edges_singleton","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path.mk'_mem_edges_singleton","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1295-L1296","name":"SimpleGraph.Path.singleton","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path.singleton","doc":"The length-1 path between a pair of adjacent vertices. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1294-L1294","name":"SimpleGraph.Path.singleton_coe","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path.singleton_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1289-L1290","name":"SimpleGraph.Path.nil","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path.nil","doc":"The length-0 path at a vertex. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1288-L1288","name":"SimpleGraph.Path.nil_coe","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path.nil_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1283-L1284","name":"SimpleGraph.Path.isTrail","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path.isTrail","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1279-L1279","name":"SimpleGraph.Path.isPath","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path.isPath","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1271-L1271","name":"SimpleGraph.Path","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Path","doc":"The type for paths between two vertices. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1255-L1262","name":"SimpleGraph.Walk.exists_boundary_dart","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.exists_boundary_dart","doc":"Given a set `S` and a walk `w` from `u` to `v` such that `u ∈ S` but `v ∉ S`,\nthere exists a dart in the walk whose start is in `S` but whose end is not. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1244-L1248","name":"SimpleGraph.Walk.IsCycle.rotate","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsCycle.rotate","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1233-L1241","name":"SimpleGraph.Walk.IsCircuit.rotate","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsCircuit.rotate","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1227-L1230","name":"SimpleGraph.Walk.IsTrail.rotate","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsTrail.rotate","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1222-L1224","name":"SimpleGraph.Walk.rotate_edges","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.rotate_edges","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1215-L1219","name":"SimpleGraph.Walk.rotate_darts","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.rotate_darts","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1208-L1212","name":"SimpleGraph.Walk.support_rotate","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.support_rotate","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1203-L1204","name":"SimpleGraph.Walk.rotate","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.rotate","doc":"Rotate a loop walk such that it is centered at the given vertex. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1197-L1199","name":"SimpleGraph.Walk.IsPath.dropUntil","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsPath.dropUntil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1191-L1193","name":"SimpleGraph.Walk.IsPath.takeUntil","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsPath.takeUntil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1186-L1188","name":"SimpleGraph.Walk.IsTrail.dropUntil","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsTrail.dropUntil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1181-L1183","name":"SimpleGraph.Walk.IsTrail.takeUntil","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsTrail.takeUntil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1174-L1178","name":"SimpleGraph.Walk.length_dropUntil_le","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.length_dropUntil_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1167-L1171","name":"SimpleGraph.Walk.length_takeUntil_le","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.length_takeUntil_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1162-L1164","name":"SimpleGraph.Walk.edges_dropUntil_subset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.edges_dropUntil_subset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1157-L1159","name":"SimpleGraph.Walk.edges_takeUntil_subset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.edges_takeUntil_subset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1151-L1154","name":"SimpleGraph.Walk.darts_dropUntil_subset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.darts_dropUntil_subset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1145-L1148","name":"SimpleGraph.Walk.darts_takeUntil_subset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.darts_takeUntil_subset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1139-L1142","name":"SimpleGraph.Walk.support_dropUntil_subset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.support_dropUntil_subset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1133-L1136","name":"SimpleGraph.Walk.support_takeUntil_subset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.support_takeUntil_subset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1126-L1130","name":"SimpleGraph.Walk.dropUntil_copy","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.dropUntil_copy","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1118-L1122","name":"SimpleGraph.Walk.takeUntil_copy","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.takeUntil_copy","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1096-L1114","name":"SimpleGraph.Walk.count_edges_takeUntil_le_one","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.count_edges_takeUntil_le_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1084-L1093","name":"SimpleGraph.Walk.count_support_takeUntil_eq_one","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.count_support_takeUntil_eq_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1074-L1080","name":"SimpleGraph.Walk.mem_support_iff_exists_append","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.mem_support_iff_exists_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1062-L1071","name":"SimpleGraph.Walk.take_spec","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.take_spec","doc":"The `takeUntil` and `dropUntil` functions split a walk into two pieces.\nThe lemma `SimpleGraph.Walk.count_support_takeUntil_eq_one` specifies where this split occurs. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1050-L1056","name":"SimpleGraph.Walk.dropUntil","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.dropUntil","doc":"Given a vertex in the support of a path, give the path from (and including) that vertex to\nthe end. In other words, drop vertices from the front of a path until (and not including)\nthat vertex. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1038-L1044","name":"SimpleGraph.Walk.takeUntil","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.takeUntil","doc":"Given a vertex in the support of a path, give the path up until (and including) that vertex. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1024-L1027","name":"SimpleGraph.Walk.IsPath.length_lt","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsPath.length_lt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1020-L1022","name":"SimpleGraph.Walk.instDecidableIsPath","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.instDecidableIsPath","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1009-L1014","name":"SimpleGraph.Walk.cons_isCycle_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.cons_isCycle_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1006-L1006","name":"SimpleGraph.Walk.IsCycle.not_of_nil","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsCycle.not_of_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L998-L1002","name":"SimpleGraph.Walk.IsPath.of_append_right","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsPath.of_append_right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L992-L995","name":"SimpleGraph.Walk.IsPath.of_append_left","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsPath.of_append_left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L988-L989","name":"SimpleGraph.Walk.isPath_reverse_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.isPath_reverse_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L983-L984","name":"SimpleGraph.Walk.IsPath.reverse","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsPath.reverse","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L979-L980","name":"SimpleGraph.Walk.isPath_iff_eq_nil","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.isPath_iff_eq_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L973-L975","name":"SimpleGraph.Walk.cons_isPath_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.cons_isPath_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L968-L969","name":"SimpleGraph.Walk.IsPath.of_cons","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsPath.of_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L965-L965","name":"SimpleGraph.Walk.IsPath.nil","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsPath.nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L960-L962","name":"SimpleGraph.Walk.IsTrail.count_edges_eq_one","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsTrail.count_edges_eq_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L955-L957","name":"SimpleGraph.Walk.IsTrail.count_edges_le_one","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsTrail.count_edges_le_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L949-L952","name":"SimpleGraph.Walk.IsTrail.of_append_right","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsTrail.of_append_right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L943-L946","name":"SimpleGraph.Walk.IsTrail.of_append_left","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsTrail.of_append_left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L936-L940","name":"SimpleGraph.Walk.reverse_isTrail_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.reverse_isTrail_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L931-L932","name":"SimpleGraph.Walk.IsTrail.reverse","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsTrail.reverse","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L927-L928","name":"SimpleGraph.Walk.cons_isTrail_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.cons_isTrail_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L922-L923","name":"SimpleGraph.Walk.IsTrail.of_cons","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsTrail.of_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L918-L919","name":"SimpleGraph.Walk.IsTrail.nil","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsTrail.nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L911-L914","name":"SimpleGraph.Walk.isCycle_copy","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.isCycle_copy","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L905-L907","name":"SimpleGraph.Walk.isCycle_def","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.isCycle_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L899-L902","name":"SimpleGraph.Walk.isCircuit_copy","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.isCircuit_copy","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L894-L895","name":"SimpleGraph.Walk.isCircuit_def","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.isCircuit_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L888-L891","name":"SimpleGraph.Walk.isPath_copy","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.isPath_copy","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L883-L884","name":"SimpleGraph.Walk.isPath_def","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.isPath_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L879-L880","name":"SimpleGraph.Walk.IsPath.mk'","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsPath.mk'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L873-L876","name":"SimpleGraph.Walk.isTrail_copy","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.isTrail_copy","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L868-L869","name":"SimpleGraph.Walk.isTrail_def","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.isTrail_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L865-L865","name":"SimpleGraph.Walk.IsCycle.isCircuit","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsCycle.isCircuit","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L861-L861","name":"SimpleGraph.Walk.IsCycle.support_nodup","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsCycle.support_nodup","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L860-L860","name":"SimpleGraph.Walk.IsCycle.mk","kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsCycle.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L860-L861","name":"SimpleGraph.Walk.IsCycle","kind":"structure","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsCycle","doc":"A *cycle* at `u : V` is a circuit at `u` whose only repeating vertex\nis `u` (which appears exactly twice). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L855-L855","name":"SimpleGraph.Walk.IsCircuit.isTrail","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsCircuit.isTrail","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L851-L851","name":"SimpleGraph.Walk.IsCircuit.ne_nil","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsCircuit.ne_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L850-L850","name":"SimpleGraph.Walk.IsCircuit.mk","kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsCircuit.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L850-L851","name":"SimpleGraph.Walk.IsCircuit","kind":"structure","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsCircuit","doc":"A *circuit* at `u : V` is a nonempty trail beginning and ending at `u`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L846-L846","name":"SimpleGraph.Walk.IsPath.isTrail","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsPath.isTrail","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L842-L842","name":"SimpleGraph.Walk.IsPath.support_nodup","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsPath.support_nodup","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L841-L841","name":"SimpleGraph.Walk.IsPath.mk","kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsPath.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L841-L842","name":"SimpleGraph.Walk.IsPath","kind":"structure","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsPath","doc":"A *path* is a walk with no repeating vertices.\nUse `simple_graph.walk.is_path.mk'` for a simpler constructor. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L836-L836","name":"SimpleGraph.Walk.IsTrail.edges_nodup","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsTrail.edges_nodup","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L835-L835","name":"SimpleGraph.Walk.IsTrail.mk","kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsTrail.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L835-L836","name":"SimpleGraph.Walk.IsTrail","kind":"structure","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.IsTrail","doc":"A *trail* is a walk with no repeating edges. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L822-L828","name":"SimpleGraph.Walk.edges_nodup_of_support_nodup","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.edges_nodup_of_support_nodup","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L813-L819","name":"SimpleGraph.Walk.darts_nodup_of_support_nodup","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.darts_nodup_of_support_nodup","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L807-L810","name":"SimpleGraph.Walk.snd_mem_support_of_mem_edges","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.snd_mem_support_of_mem_edges","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L798-L804","name":"SimpleGraph.Walk.fst_mem_support_of_mem_edges","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.fst_mem_support_of_mem_edges","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L793-L795","name":"SimpleGraph.Walk.dart_snd_mem_support_of_mem_darts","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.dart_snd_mem_support_of_mem_darts","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L784-L790","name":"SimpleGraph.Walk.dart_fst_mem_support_of_mem_darts","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.dart_fst_mem_support_of_mem_darts","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L781-L781","name":"SimpleGraph.Walk.length_edges","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.length_edges","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L776-L777","name":"SimpleGraph.Walk.length_darts","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.length_darts","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L771-L772","name":"SimpleGraph.Walk.length_support","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.length_support","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L766-L767","name":"SimpleGraph.Walk.edges_reverse","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.edges_reverse","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L761-L762","name":"SimpleGraph.Walk.edges_append","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.edges_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L754-L757","name":"SimpleGraph.Walk.edges_copy","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.edges_copy","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L749-L750","name":"SimpleGraph.Walk.edges_concat","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.edges_concat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L744-L745","name":"SimpleGraph.Walk.edges_cons","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.edges_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L740-L740","name":"SimpleGraph.Walk.edges_nil","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.edges_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L735-L736","name":"SimpleGraph.Walk.map_fst_darts","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.map_fst_darts","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L730-L732","name":"SimpleGraph.Walk.map_fst_darts_append","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.map_fst_darts_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L726-L727","name":"SimpleGraph.Walk.map_snd_darts","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.map_snd_darts","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L722-L723","name":"SimpleGraph.Walk.cons_map_snd_darts","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.cons_map_snd_darts","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L718-L719","name":"SimpleGraph.Walk.mem_darts_reverse","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.mem_darts_reverse","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L713-L715","name":"SimpleGraph.Walk.darts_reverse","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.darts_reverse","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L707-L709","name":"SimpleGraph.Walk.darts_append","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.darts_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L700-L703","name":"SimpleGraph.Walk.darts_copy","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.darts_copy","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L694-L696","name":"SimpleGraph.Walk.darts_concat","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.darts_concat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L689-L690","name":"SimpleGraph.Walk.darts_cons","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.darts_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L685-L685","name":"SimpleGraph.Walk.darts_nil","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.darts_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L680-L681","name":"SimpleGraph.Walk.adj_of_mem_edges","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.adj_of_mem_edges","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L672-L677","name":"SimpleGraph.Walk.edges_subset_edgeSet","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.edges_subset_edgeSet","doc":"Every edge in a walk's edge list is an edge of the graph.\nIt is written in this form (rather than using `⊆`) to avoid unsightly coercions. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L664-L667","name":"SimpleGraph.Walk.chain'_dartAdj_darts","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.chain'_dartAdj_darts","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L656-L661","name":"SimpleGraph.Walk.chain_dartAdj_darts","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.chain_dartAdj_darts","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L651-L653","name":"SimpleGraph.Walk.chain'_adj_support","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.chain'_adj_support","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L645-L648","name":"SimpleGraph.Walk.chain_adj_support","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.chain_adj_support","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L637-L642","name":"SimpleGraph.Walk.coe_support_append'","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.coe_support_append'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L632-L634","name":"SimpleGraph.Walk.coe_support_append","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.coe_support_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L628-L629","name":"SimpleGraph.Walk.coe_support","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.coe_support","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L622-L625","name":"SimpleGraph.Walk.subset_support_append_right","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.subset_support_append_right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L616-L618","name":"SimpleGraph.Walk.subset_support_append_left","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.subset_support_append_left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L607-L612","name":"SimpleGraph.Walk.mem_support_append_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.mem_support_append_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L601-L603","name":"SimpleGraph.Walk.end_mem_tail_support_of_ne","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.end_mem_tail_support_of_ne","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L595-L597","name":"SimpleGraph.Walk.mem_tail_support_append_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.mem_tail_support_append_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L591-L591","name":"SimpleGraph.Walk.mem_support_nil_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.mem_support_nil_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L587-L588","name":"SimpleGraph.Walk.mem_support_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.mem_support_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L583-L584","name":"SimpleGraph.Walk.support_nonempty","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.support_nonempty","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L579-L579","name":"SimpleGraph.Walk.end_mem_support","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.end_mem_support","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L575-L575","name":"SimpleGraph.Walk.start_mem_support","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.start_mem_support","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L570-L571","name":"SimpleGraph.Walk.support_eq_cons","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.support_eq_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L565-L567","name":"SimpleGraph.Walk.tail_support_append","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.tail_support_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L562-L562","name":"SimpleGraph.Walk.support_ne_nil","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.support_ne_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L558-L559","name":"SimpleGraph.Walk.support_reverse","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.support_reverse","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L552-L554","name":"SimpleGraph.Walk.support_append","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.support_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L546-L549","name":"SimpleGraph.Walk.support_copy","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.support_copy","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L540-L542","name":"SimpleGraph.Walk.support_concat","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.support_concat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L535-L536","name":"SimpleGraph.Walk.support_cons","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.support_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L531-L531","name":"SimpleGraph.Walk.support_nil","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.support_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L527-L527","name":"SimpleGraph.Walk.edges","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.edges","doc":"The `edges` of a walk is the list of edges it visits in order.\nThis is defined to be the list of edges underlying `SimpleGraph.Walk.darts`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L520-L522","name":"SimpleGraph.Walk.darts","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.darts","doc":"The `darts` of a walk is the list of darts it visits in order. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L514-L516","name":"SimpleGraph.Walk.support","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.support","doc":"The `support` of a walk is the list of vertices it visits in order. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L487-L510","name":"SimpleGraph.Walk.concat_inj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.concat_inj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L483-L484","name":"SimpleGraph.Walk.concat_ne_nil","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.concat_ne_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L468-L478","name":"SimpleGraph.Walk.concatRec_concat","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.concatRec_concat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L463-L464","name":"SimpleGraph.Walk.concatRec_nil","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.concatRec_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L458-L459","name":"SimpleGraph.Walk.concatRec","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.concatRec","doc":"Recursor on walks by inducting on `SimpleGraph.Walk.concat`.\n\nThis is inducting from the opposite end of the walk compared\nto `SimpleGraph.Walk.rec`, which inducts on `SimpleGraph.Walk.cons`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L448-L450","name":"SimpleGraph.Walk.concatRecAux","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.concatRecAux","doc":"Auxiliary definition for `SimpleGraph.Walk.concatRec` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L439-L439","name":"SimpleGraph.Walk.length_eq_zero_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.length_eq_zero_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L430-L435","name":"SimpleGraph.Walk.exists_length_eq_zero_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.exists_length_eq_zero_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L425-L426","name":"SimpleGraph.Walk.eq_of_length_eq_zero","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.eq_of_length_eq_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L422-L422","name":"SimpleGraph.Walk.length_reverse","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.length_reverse","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L414-L418","name":"SimpleGraph.Walk.length_reverseAux","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.length_reverseAux","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L409-L410","name":"SimpleGraph.Walk.length_concat","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.length_concat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L401-L405","name":"SimpleGraph.Walk.length_append","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.length_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L394-L397","name":"SimpleGraph.Walk.length_copy","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.length_copy","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L389-L390","name":"SimpleGraph.Walk.length_cons","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.length_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L385-L385","name":"SimpleGraph.Walk.length_nil","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.length_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L378-L381","name":"SimpleGraph.Walk.reverse_reverse","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.reverse_reverse","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L373-L374","name":"SimpleGraph.Walk.reverse_concat","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.reverse_concat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L368-L369","name":"SimpleGraph.Walk.reverse_append","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.reverse_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L361-L364","name":"SimpleGraph.Walk.reverse_copy","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.reverse_copy","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L356-L357","name":"SimpleGraph.Walk.reverse_cons","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.reverse_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L351-L352","name":"SimpleGraph.Walk.reverseAux_eq_reverse_append","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.reverseAux_eq_reverse_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L343-L348","name":"SimpleGraph.Walk.reverseAux_append","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.reverseAux_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L334-L339","name":"SimpleGraph.Walk.append_reverseAux","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.append_reverseAux","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L329-L330","name":"SimpleGraph.Walk.cons_reverseAux","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.cons_reverseAux","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L324-L325","name":"SimpleGraph.Walk.reverse_singleton","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.reverse_singleton","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L321-L321","name":"SimpleGraph.Walk.reverse_nil","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.reverse_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L313-L317","name":"SimpleGraph.Walk.exists_concat_eq_cons","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.exists_concat_eq_cons","doc":"A non-trivial `concat` walk is representable as a `cons` walk. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L302-L309","name":"SimpleGraph.Walk.exists_cons_eq_concat","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.exists_cons_eq_concat","doc":"A non-trivial `cons` walk is representable as a `concat` walk. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L296-L298","name":"SimpleGraph.Walk.concat_append","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.concat_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L292-L293","name":"SimpleGraph.Walk.append_concat","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.append_concat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L288-L289","name":"SimpleGraph.Walk.concat_cons","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.concat_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L284-L284","name":"SimpleGraph.Walk.concat_nil","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.concat_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L277-L281","name":"SimpleGraph.Walk.append_copy_copy","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.append_copy_copy","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L267-L273","name":"SimpleGraph.Walk.append_assoc","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.append_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L263-L264","name":"SimpleGraph.Walk.nil_append","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.nil_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L256-L259","name":"SimpleGraph.Walk.append_nil","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.append_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L251-L252","name":"SimpleGraph.Walk.cons_nil_append","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.cons_nil_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L246-L247","name":"SimpleGraph.Walk.cons_append","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.cons_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L235-L242","name":"SimpleGraph.Walk.adj_getVert_succ","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.adj_getVert_succ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L231-L232","name":"SimpleGraph.Walk.getVert_length","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.getVert_length","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L220-L227","name":"SimpleGraph.Walk.getVert_of_length_le","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.getVert_of_length_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L217-L217","name":"SimpleGraph.Walk.getVert_zero","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.getVert_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L210-L213","name":"SimpleGraph.Walk.getVert","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.getVert","doc":"Get the `n`th vertex from a walk, where `n` is generally expected to be\nbetween `0` and `p.length`, inclusive.\nIf `n` is greater than or equal to `p.length`, the result is the path's endpoint. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L204-L204","name":"SimpleGraph.Walk.reverse","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.reverse","doc":"The walk in reverse. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L197-L199","name":"SimpleGraph.Walk.reverseAux","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.reverseAux","doc":"The concatenation of the reverse of the first walk with the second walk. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L192-L193","name":"SimpleGraph.Walk.concat_eq_append","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.concat_eq_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L189-L189","name":"SimpleGraph.Walk.concat","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.concat","doc":"The reversed version of `SimpleGraph.Walk.cons`, concatenating an edge to\nthe end of a walk. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L182-L184","name":"SimpleGraph.Walk.append","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.append","doc":"The concatenation of two compatible walks. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L175-L177","name":"SimpleGraph.Walk.length","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.length","doc":"The length of a walk is the number of edges/darts along it. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L168-L171","name":"SimpleGraph.Walk.exists_eq_cons_of_ne","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.exists_eq_cons_of_ne","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L162-L165","name":"SimpleGraph.Walk.cons_copy","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.cons_copy","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L155-L158","name":"SimpleGraph.Walk.copy_cons","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.copy_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L150-L152","name":"SimpleGraph.Walk.copy_nil","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.copy_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L142-L146","name":"SimpleGraph.Walk.copy_copy","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.copy_copy","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L138-L138","name":"SimpleGraph.Walk.copy_rfl_rfl","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.copy_rfl_rfl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L133-L134","name":"SimpleGraph.Walk.copy","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.copy","doc":"Change the endpoints of a walk using equalities. This is helpful for relaxing\ndefinitional equality constraints and to be able to state otherwise difficult-to-state\nlemmas. While this is a simple wrapper around `Eq.rec`, it gives a canonical way to write it.\n\nThe simp-normal form is for the `copy` to be pushed outward. That way calculations can\noccur within the \"copy context.\" "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L124-L124","name":"SimpleGraph.Walk.cons'","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.cons'","doc":"Pattern to get `Walk.cons` with the vertices as explicit arguments. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L119-L119","name":"SimpleGraph.Walk.nil'","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.nil'","doc":"Pattern to get `Walk.nil` with the vertex as an explicit argument. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L109-L110","name":"SimpleGraph.Adj.toWalk","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Adj.toWalk","doc":"The one-edge walk associated to a pair of adjacent vertices. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L104-L104","name":"SimpleGraph.Walk.instInhabited","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.instInhabited","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L103-L103","name":"SimpleGraph.Walk.instInhabited_default","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.instInhabited_default","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L98-L98","name":"SimpleGraph.instDecidableEqWalk","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.instDecidableEqWalk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L97-L97","name":"SimpleGraph.Walk.cons","kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L96-L96","name":"SimpleGraph.Walk.nil","kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L95-L98","name":"SimpleGraph.Walk","kind":"inductive","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk","doc":"A walk is a sequence of adjacent vertices.  For vertices `u v : V`,\nthe type `walk u v` consists of all walks starting at `u` and ending at `v`.\n\nWe say that a walk *visits* the vertices it contains.  The set of vertices a\nwalk visits is `SimpleGraph.Walk.support`.\n\nSee `SimpleGraph.Walk.nil'` and `SimpleGraph.Walk.cons'` for patterns that\ncan be useful in definitions since they make the vertices explicit. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Connectivity.lean#L1-L1","name":"SimpleGraph.Connected.mk","kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Connected.mk","doc":""}]}