{"name":"Std.Lean.Meta.Basic","instances":[],"imports":["Init","Lean.Meta"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L380-L384","name":"Lean.Meta.saturate1.go","kind":"opaque","docLink":"./Std/Lean/Meta/Basic.html#Lean.Meta.saturate1.go","doc":"Auxiliary definition for `saturate1`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L372-L384","name":"Lean.Meta.saturate1","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.Meta.saturate1","doc":"`saturate1 goal tac` runs `tac` on `goal`, then on the resulting goals, etc.,\nuntil `tac` does not apply to any goal any more (i.e. it returns `none`). The\norder of applications is depth-first, so if `tac` generates goals `[g₁, g₂, ⋯]`,\nwe apply `tac` to `g₁` and recursively to all its subgoals before visiting `g₂`.\nIf `tac` does not apply to `goal`, `saturate1` returns `none`. Otherwise it\nreturns the generated subgoals to which `tac` did not apply. `saturate1`\nrespects the `MonadRecDepth` recursion limit.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L358-L361","name":"Lean.Meta.repeat1'","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.Meta.repeat1'","doc":"`repeat1' f` runs `f` on all of the goals to produce a new list of goals,\nthen runs `f` again on all of those goals, and repeats until `f` fails on all remaining goals,\nor until `maxIters` total calls to `f` have occurred.\nFails if `f` does not succeed at least once.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L348-L350","name":"Lean.Meta.repeat'","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.Meta.repeat'","doc":"`repeat' f` runs `f` on all of the goals to produce a new list of goals,\nthen runs `f` again on all of those goals, and repeats until `f` fails on all remaining goals,\nor until `maxIters` total calls to `f` have occurred.\nAlways succeeds (returning the original goals if `f` fails on all of them).\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L327-L339","name":"Lean.Meta.repeat'Core.go","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.Meta.repeat'Core.go","doc":"Auxiliary for `repeat'Core`. `repeat'Core.go f maxIters progress gs stk acc` evaluates to\nessentially `acc.toList ++ repeat' f (gs::stk).join maxIters`: that is, `acc` are goals we will\nnot revisit, and `(gs::stk).join` is the accumulated todo list of subgoals. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L318-L340","name":"Lean.Meta.repeat'Core","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.Meta.repeat'Core","doc":"Implementation of `repeat'` and `repeat1'`.\n\n`repeat'Core f` runs `f` on all of the goals to produce a new list of goals,\nthen runs `f` again on all of those goals, and repeats until `f` fails on all remaining goals,\nor until `maxIters` total calls to `f` have occurred.\n\nReturns a boolean indicating whether `f` succeeded at least once, and\nall the remaining goals (i.e. those on which `f` failed).\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L301-L306","name":"Lean.Meta.mkFreshIdWithPrefix","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.Meta.mkFreshIdWithPrefix","doc":"A variant of `mkFreshId` which generates names with a particular prefix. The\ngenerated names are unique and have the form `<prefix>.<N>` where `N` is a\nnatural number. They are not suitable as user-facing names.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L293-L294","name":"Lean.Meta.unhygienic","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.Meta.unhygienic","doc":"Run a computation with hygiene turned off.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L286-L288","name":"Lean.Meta.getUnassignedExprMVars","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.Meta.getUnassignedExprMVars","doc":"Obtain all unassigned metavariables. If `includeDelayed` is `true`,\ndelayed-assigned metavariables are considered unassigned.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L263-L275","name":"Lean.MVarId.getMVarDependencies.go","kind":"opaque","docLink":"./Std/Lean/Meta/Basic.html#Lean.MVarId.getMVarDependencies.go","doc":"Auxiliary definition for `getMVarDependencies`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L252-L260","name":"Lean.MVarId.getMVarDependencies.addMVars","kind":"opaque","docLink":"./Std/Lean/Meta/Basic.html#Lean.MVarId.getMVarDependencies.addMVars","doc":"Auxiliary definition for `getMVarDependencies`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L247-L275","name":"Lean.MVarId.getMVarDependencies","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.MVarId.getMVarDependencies","doc":"Collect the metavariables which `mvarId` depends on. These are the metavariables\nwhich appear in the type and local context of `mvarId`, as well as the\nmetavariables which *those* metavariables depend on, etc.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L238-L240","name":"Lean.MVarId.setFVarBinderInfo","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.MVarId.setFVarBinderInfo","doc":"Set the `BinderInfo` of an fvar. If the given metavariable is not declared or\nthe given fvar doesn't exist in its context, nothing happens.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L230-L232","name":"Lean.MVarId.setFVarKind","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.MVarId.setFVarKind","doc":"Set the kind of an fvar. If the given metavariable is not declared or the\ngiven fvar doesn't exist in its context, nothing happens.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L222-L224","name":"Lean.MVarId.modifyLCtx","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.MVarId.modifyLCtx","doc":"Modify the local context of a metavariable. If the metavariable is not declared,\nnothing happens.\n\nYou must ensure that the modification is legal. In particular, expressions may\nonly be replaced with defeq expressions.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L211-L213","name":"Lean.MVarId.modifyDecl","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.MVarId.modifyDecl","doc":"Modify the declaration of a metavariable. If the metavariable is not declared,\nnothing happens.\n\nYou must ensure that the modification is legal. In particular, expressions may\nonly be replaced with defeq expressions.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L201-L202","name":"Lean.MVarId.eraseAssignment","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.MVarId.eraseAssignment","doc":"Erase any assignment or delayed assignment of the given metavariable.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L194-L196","name":"Lean.MVarId.delayedAssign","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.MVarId.delayedAssign","doc":"Add a delayed assignment for the given metavariable. You must make sure that\nthe metavariable is not already assigned or delayed-assigned.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L187-L188","name":"Lean.MVarId.isDeclared","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.MVarId.isDeclared","doc":"Check whether a metavariable is declared.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L180-L182","name":"Lean.MVarId.isAssignedOrDelayedAssigned","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.MVarId.isAssignedOrDelayedAssigned","doc":"Check whether a metavariable is assigned or delayed-assigned. A\ndelayed-assigned metavariable is already 'solved' but the solution cannot be\nsubstituted yet because we have to wait for some other metavariables to be\nassigned first. So in most situations you want to treat a delayed-assigned\nmetavariable as assigned.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L159-L166","name":"Lean.MetavarContext.unassignedExprMVars","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.MetavarContext.unassignedExprMVars","doc":"Obtain all unassigned metavariables from the given `MetavarContext`. If\n`includeDelayed` is `true`, delayed-assigned metavariables are considered\nunassigned.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L150-L152","name":"Lean.MetavarContext.setFVarBinderInfo","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.MetavarContext.setFVarBinderInfo","doc":"Set the `BinderInfo` of an fvar. If the given metavariable is not declared or\nthe given fvar doesn't exist in its context, the `MetavarContext` is returned\nunchanged.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L141-L143","name":"Lean.MetavarContext.setFVarKind","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.MetavarContext.setFVarKind","doc":"Set the kind of an fvar. If the given metavariable is not declared or the\ngiven fvar doesn't exist in its context, the `MetavarContext` is returned\nunchanged.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L132-L134","name":"Lean.MetavarContext.modifyExprMVarLCtx","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.MetavarContext.modifyExprMVarLCtx","doc":"Modify the local context of a metavariable. If the metavariable is not declared,\nthe `MetavarContext` is returned unchanged.\n\nYou must ensure that the modification is legal. In particular, expressions may\nonly be replaced with defeq expressions.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L118-L123","name":"Lean.MetavarContext.modifyExprMVarDecl","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.MetavarContext.modifyExprMVarDecl","doc":"Modify the declaration of a metavariable. If the metavariable is not declared,\nthe `MetavarContext` is returned unchanged.\n\nYou must ensure that the modification is legal. In particular, expressions may\nonly be replaced with defeq expressions.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L105-L109","name":"Lean.MetavarContext.eraseExprMVarAssignment","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.MetavarContext.eraseExprMVarAssignment","doc":"Erase any assignment or delayed assignment of the given metavariable.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L98-L100","name":"Lean.MetavarContext.delayedAssignExprMVar","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.MetavarContext.delayedAssignExprMVar","doc":"Add a delayed assignment for the given metavariable. You must make sure that\nthe metavariable is not already assigned or delayed-assigned.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L91-L92","name":"Lean.MetavarContext.isExprMVarDeclared","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.MetavarContext.isExprMVarDeclared","doc":"Check whether a metavariable is declared in the given `MetavarContext`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L84-L86","name":"Lean.MetavarContext.isExprMVarAssignedOrDelayedAssigned","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.MetavarContext.isExprMVarAssignedOrDelayedAssigned","doc":"Check whether a metavariable is assigned or delayed-assigned. A\ndelayed-assigned metavariable is already 'solved' but the solution cannot be\nsubstituted yet because we have to wait for some other metavariables to be\nassigned first. So in most situations you want to treat a delayed-assigned\nmetavariable as assigned.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L73-L75","name":"Lean.MetavarContext.declareExprMVar","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.MetavarContext.declareExprMVar","doc":"Declare a metavariable. You must make sure that the metavariable is not already\ndeclared.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L62-L67","name":"Lean.MetavarContext.getExprMVarDecl","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.MetavarContext.getExprMVarDecl","doc":"Get the `MetavarDecl` of `mvarId`. If `mvarId` is not a declared metavariable\nin the given `MetavarContext`, throw an error.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L51-L53","name":"Lean.Meta.sortFVarsByContextOrder","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.Meta.sortFVarsByContextOrder","doc":"Sort the given `FVarId`s by the order in which they appear in the current local\ncontext. If any of the `FVarId`s do not appear in the current local context, the\nresult is unspecified.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L35-L41","name":"Lean.LocalContext.sortFVarsByContextOrder","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.LocalContext.sortFVarsByContextOrder","doc":"Sort the given `FVarId`s by the order in which they appear in `lctx`. If any of\nthe `FVarId`s do not appear in `lctx`, the result is unspecified.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L27-L29","name":"Lean.LocalContext.setKind","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.LocalContext.setKind","doc":"Set the kind of the given fvar.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/Basic.lean#L15-L19","name":"Lean.LocalDecl.setKind","kind":"def","docLink":"./Std/Lean/Meta/Basic.html#Lean.LocalDecl.setKind","doc":"Set the kind of a `LocalDecl`.\n"}]}