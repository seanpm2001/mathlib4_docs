{"name":"Std.Tactic.Lint.Simp","instances":[],"imports":["Init","Lean.Meta.Tactic.Simp.Main","Std.Tactic.Lint.Basic","Std.Tactic.OpenPrivate","Std.Util.LibraryNote"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Simp.lean#L217-L235","name":"Std.Tactic.Lint.simpComm","kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.simpComm","doc":"A linter for commutativity lemmas that are marked simp. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Simp.lean#L197-L208","name":"Std.Tactic.Lint.simpVarHead","kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.simpVarHead","doc":"A linter for simp lemmas whose lhs has a variable as head symbol,\nand which hence never fire.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Simp.lean#L106-L143","name":"Std.Tactic.Lint.simpNF","kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.simpNF","doc":"A linter for simp lemmas whose lhs is not in simp-normal form, and which hence never fire. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Simp.lean#L96-L103","name":"Std.Tactic.Lint.formatLemmas","kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.formatLemmas","doc":"Render the list of simp lemmas. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Simp.lean#L92-L93","name":"Std.Tactic.Lint.decorateError","kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.decorateError","doc":"Add message `msg` to any errors thrown inside `k`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Simp.lean#L85-L87","name":"Lean.Meta.DiscrTree.elements.trieElements","kind":"opaque","docLink":"./Std/Tactic/Lint/Simp.html#Lean.Meta.DiscrTree.elements.trieElements","doc":"Returns the list of elements in the trie. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Simp.lean#L81-L87","name":"Lean.Meta.DiscrTree.elements","kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Lean.Meta.DiscrTree.elements","doc":"Returns the list of elements in the discrimination tree. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Simp.lean#L76-L77","name":"Std.Tactic.Lint.isSimpTheorem","kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.isSimpTheorem","doc":"Returns true if this is a `@[simp]` declaration. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Simp.lean#L67-L73","name":"Std.Tactic.Lint.checkAllSimpTheoremInfos","kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.checkAllSimpTheoremInfos","doc":"Constructs a message from all the simp theorems encoded in the given type. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Simp.lean#L60-L64","name":"Std.Tactic.Lint.isSimpEq","kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.isSimpEq","doc":"Checks whether two expressions are equal for the simplifier. That is,\nthey are reducibly-definitional equal, and they have the same head symbol. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Simp.lean#L49-L56","name":"Std.Tactic.Lint.withSimpTheoremInfos","kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.withSimpTheoremInfos","doc":"Runs the continuation on all the simp theorems encoded in the given type. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Simp.lean#L36-L45","name":"Std.Tactic.Lint.isConditionalHyps","kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.isConditionalHyps","doc":"Given the list of hypotheses, is this a conditional rewrite rule? "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Simp.lean#L33-L33","name":"Std.Tactic.Lint.SimpTheoremInfo.rhs","kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo.rhs","doc":"The result of replacement "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Simp.lean#L31-L31","name":"Std.Tactic.Lint.SimpTheoremInfo.lhs","kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo.lhs","doc":"The thing to replace "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Simp.lean#L29-L29","name":"Std.Tactic.Lint.SimpTheoremInfo.isConditional","kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo.isConditional","doc":"True if this is a conditional rewrite rule "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Simp.lean#L27-L27","name":"Std.Tactic.Lint.SimpTheoremInfo.hyps","kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo.hyps","doc":"The hypotheses of the theorem "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Simp.lean#L25-L33","name":"Std.Tactic.Lint.SimpTheoremInfo","kind":"structure","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo","doc":"The data associated to a simp theorem. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Simp.lean#L1-L1","name":"Std.Tactic.Lint.SimpTheoremInfo.mk","kind":"ctor","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo.mk","doc":""}]}