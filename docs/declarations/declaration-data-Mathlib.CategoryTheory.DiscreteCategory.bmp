{"name":"Mathlib.CategoryTheory.DiscreteCategory","instances":[{"typeNames":["Eq","CategoryTheory.Discrete"],"name":"CategoryTheory.instDecidableEqDiscrete","className":"Decidable"},{"typeNames":["CategoryTheory.Discrete"],"name":"CategoryTheory.discreteCategory","className":"CategoryTheory.Category"},{"typeNames":["CategoryTheory.Discrete"],"name":"CategoryTheory.Discrete.instInhabitedDiscrete","className":"Inhabited"},{"typeNames":["CategoryTheory.Discrete"],"name":"CategoryTheory.Discrete.instSubsingletonDiscrete","className":"Subsingleton"},{"typeNames":["Quiver.Hom","CategoryTheory.Discrete","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.discreteCategory"],"name":"CategoryTheory.Discrete.instSubsingletonDiscreteHom","className":"Subsingleton"},{"typeNames":["CategoryTheory.Discrete"],"name":"CategoryTheory.Discrete.instUniqueDiscrete","className":"Unique"},{"typeNames":["CategoryTheory.Discrete","CategoryTheory.discreteCategory"],"name":"CategoryTheory.Discrete.instIsIsoDiscreteDiscreteCategory","className":"CategoryTheory.IsIso"}],"imports":["Init","Mathlib.CategoryTheory.EqToHom","Mathlib.Data.ULift"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L293-L297","name":"CategoryTheory.Discrete.functor_map_id","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.functor_map_id","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L282-L286","name":"CategoryTheory.Discrete.opposite","kind":"def","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.opposite","doc":"A discrete category is equivalent to its opposite category. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L281-L281","name":"CategoryTheory.Discrete.opposite_inverse_obj","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.opposite_inverse_obj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L281-L281","name":"CategoryTheory.Discrete.opposite_functor_obj_as","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.opposite_functor_obj_as","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L265-L269","name":"CategoryTheory.Discrete.equivOfEquivalence","kind":"def","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.equivOfEquivalence","doc":"We can convert an equivalence of `discrete` categories to a type-level `Equiv`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L264-L264","name":"CategoryTheory.Discrete.equivOfEquivalence_symm_apply","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.equivOfEquivalence_symm_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L264-L264","name":"CategoryTheory.Discrete.equivOfEquivalence_apply","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.equivOfEquivalence_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L254-L260","name":"CategoryTheory.Discrete.equivalence","kind":"def","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.equivalence","doc":"We can promote a type-level `Equiv` to\nan equivalence between the corresponding `discrete` categories.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L253-L253","name":"CategoryTheory.Discrete.equivalence_counitIso","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.equivalence_counitIso","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L253-L253","name":"CategoryTheory.Discrete.equivalence_unitIso","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.equivalence_unitIso","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L253-L253","name":"CategoryTheory.Discrete.equivalence_functor","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.equivalence_functor","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L253-L253","name":"CategoryTheory.Discrete.equivalence_inverse","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.equivalence_inverse","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L245-L247","name":"CategoryTheory.Discrete.compNatIsoDiscrete","kind":"def","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.compNatIsoDiscrete","doc":"Composing `discrete.functor F` with another functor `G` amounts to composing `F` with `G.obj` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L239-L240","name":"CategoryTheory.Discrete.natIsoFunctor","kind":"def","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.natIsoFunctor","doc":"Every functor `F` from a discrete category is naturally isomorphic (actually, equal) to\n`discrete.functor (F.obj)`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L232-L233","name":"CategoryTheory.Discrete.natIso_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.natIso_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L222-L228","name":"CategoryTheory.Discrete.natIso","kind":"def","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.natIso","doc":"For functors out of a discrete category,\na natural isomorphism is just a collection of isomorphisms,\nas the naturality squares are trivial.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L221-L221","name":"CategoryTheory.Discrete.natIso_hom_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.natIso_hom_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L221-L221","name":"CategoryTheory.Discrete.natIso_inv_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.natIso_inv_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L207-L214","name":"CategoryTheory.Discrete.natTrans","kind":"def","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.natTrans","doc":"For functors out of a discrete category,\na natural transformation is just a collection of maps,\nas the naturality squares are trivial.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L206-L206","name":"CategoryTheory.Discrete.natTrans_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.natTrans_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L197-L199","name":"CategoryTheory.Discrete.functorComp","kind":"def","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.functorComp","doc":"The discrete functor induced by a composition of maps can be written as a\ncomposition of two discrete functors.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L196-L196","name":"CategoryTheory.Discrete.functorComp_inv_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.functorComp_inv_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L196-L196","name":"CategoryTheory.Discrete.functorComp_hom_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.functorComp_hom_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L189-L190","name":"CategoryTheory.Discrete.functor_map","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.functor_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L184-L186","name":"CategoryTheory.Discrete.functor_obj","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.functor_obj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L175-L180","name":"CategoryTheory.Discrete.functor","kind":"def","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.functor","doc":"Any function `I → C` gives a functor `Discrete I ⥤ C`."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L168-L169","name":"CategoryTheory.Discrete.instIsIsoDiscreteDiscreteCategory","kind":"instance","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.instIsIsoDiscreteDiscreteCategory","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L162-L163","name":"CategoryTheory.Discrete.id_def","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.id_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L157-L158","name":"CategoryTheory.Discrete.eqToIso'","kind":"def","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToIso'","doc":"A variant of `eqToIso` that lifts terms to the discrete category. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L152-L153","name":"CategoryTheory.Discrete.eqToHom'","kind":"def","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom'","doc":"A variant of `eqToHom` that lifts terms to the discrete category. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L147-L148","name":"CategoryTheory.Discrete.eqToIso","kind":"def","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToIso","doc":"Promote an equation between the wrapped terms in `X Y : Discrete α` to an isomorphism `X ≅ Y`\nin the discrete category. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L141-L142","name":"CategoryTheory.Discrete.eqToHom","kind":"def","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom","doc":"Promote an equation between the wrapped terms in `X Y : Discrete α` to a morphism `X ⟶ Y`\nin the discrete category. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L135-L136","name":"CategoryTheory.Discrete.eq_of_hom","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eq_of_hom","doc":"Extract the equation from a morphism in a discrete category. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L131-L132","name":"CategoryTheory.Discrete.instUniqueDiscrete","kind":"instance","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.instUniqueDiscrete","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L121-L122","name":"CategoryTheory.Discrete.discreteCases","kind":"def","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.discreteCases","doc":"Use:\n```\nattribute [local aesop safe tactic (rule_sets [CategoryTheory])]\n  CategoryTheory.Discrete.discreteCases\n```\nto locally gives `aesop_cat` the ability to call `cases` on\n`Discrete` and `(_ : Discrete _) ⟶ (_ : Discrete _)` hypotheses.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L108-L109","name":"CategoryTheory.Discrete.tacticDiscrete_cases","kind":"def","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.tacticDiscrete_cases","doc":"A simple tactic to run `cases` on any `Discrete α` hypotheses. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L103-L104","name":"CategoryTheory.Discrete.instSubsingletonDiscreteHom","kind":"instance","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.instSubsingletonDiscreteHom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L100-L101","name":"CategoryTheory.Discrete.instSubsingletonDiscrete","kind":"instance","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.instSubsingletonDiscrete","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L97-L98","name":"CategoryTheory.Discrete.instInhabitedDiscrete","kind":"instance","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.instInhabitedDiscrete","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L82-L90","name":"CategoryTheory.discreteCategory","kind":"instance","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.discreteCategory","doc":"The \"Discrete\" category on a type, whose morphisms are equalities.\n\nBecause we do not allow morphisms in `Prop` (only in `Type`),\nsomewhat annoyingly we have to define `X ⟶ Y` as `ULift (PLift (X = Y))`.\n\nSee <https://stacks.math.columbia.edu/tag/001A>\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L72-L73","name":"CategoryTheory.instDecidableEqDiscrete","kind":"instance","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.instDecidableEqDiscrete","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L65-L69","name":"CategoryTheory.discreteEquiv","kind":"def","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.discreteEquiv","doc":"`Discrete α` is equivalent to the original type `α`."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L64-L64","name":"CategoryTheory.discreteEquiv_symm_apply_as","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.discreteEquiv_symm_apply_as","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L64-L64","name":"CategoryTheory.discreteEquiv_apply","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.discreteEquiv_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L58-L60","name":"CategoryTheory.Discrete.mk_as","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.mk_as","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L54-L54","name":"CategoryTheory.Discrete.as","kind":"def","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.as","doc":"A wrapper for promoting any type to a category,\nwith the only morphisms being equalities. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L51-L51","name":"CategoryTheory.Discrete.mk","kind":"ctor","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L51-L54","name":"CategoryTheory.Discrete","kind":"structure","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete","doc":"A wrapper for promoting any type to a category,\nwith the only morphisms being equalities.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L50-L50","name":"CategoryTheory.Discrete.ext","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.ext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/DiscreteCategory.lean#L50-L50","name":"CategoryTheory.Discrete.ext_iff","kind":"theorem","docLink":"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.ext_iff","doc":""}]}