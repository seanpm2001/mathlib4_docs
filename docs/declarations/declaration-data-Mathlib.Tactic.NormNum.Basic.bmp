{"name":"Mathlib.Tactic.NormNum.Basic","instances":[{"typeNames":["Option","Lean.Meta.MetaM"],"name":"Mathlib.Meta.NormNum.instMonadLiftOptionMetaM","className":"MonadLift"}],"imports":["Init","Mathlib.Tactic.NormNum.Core","Mathlib.Algebra.GroupPower.Lemmas","Mathlib.Algebra.Order.Invertible","Mathlib.Util.Qq"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L996-L1007","name":"Mathlib.Meta.NormNum.evalNatDiv","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalNatDiv","doc":"The `norm_num` extension which identifies expressions of the form `Nat.div a b`,\nsuch that `norm_num` successfully recognises both `a` and `b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L990-L992","name":"Mathlib.Meta.NormNum.isNat_natDiv","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isNat_natDiv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L977-L988","name":"Mathlib.Meta.NormNum.evalNatMod","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalNatMod","doc":"The `norm_num` extension which identifies expressions of the form `Nat.mod a b`,\nsuch that `norm_num` successfully recognises both `a` and `b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L971-L973","name":"Mathlib.Meta.NormNum.isNat_natMod","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isNat_natMod","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L958-L969","name":"Mathlib.Meta.NormNum.evalNatSub","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalNatSub","doc":"The `norm_num` extension which identifies expressions of the form `Nat.sub a b`,\nsuch that `norm_num` successfully recognises both `a` and `b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L952-L954","name":"Mathlib.Meta.NormNum.isNat_natSub","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isNat_natSub","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L941-L950","name":"Mathlib.Meta.NormNum.evalNatSucc","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalNatSucc","doc":"The `norm_num` extension which identifies expressions of the form `Nat.succ a`,\nsuch that `norm_num` successfully recognises `a`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L935-L937","name":"Mathlib.Meta.NormNum.isNat_natSucc","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isNat_natSucc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L877-L931","name":"Mathlib.Meta.NormNum.evalLT","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalLT","doc":"The `norm_num` extension which identifies expressions of the form `a < b`,\nsuch that `norm_num` successfully recognises both `a` and `b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L821-L873","name":"Mathlib.Meta.NormNum.evalLE","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalLE","doc":"The `norm_num` extension which identifies expressions of the form `a ≤ b`,\nsuch that `norm_num` successfully recognises both `a` and `b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L766-L817","name":"Mathlib.Meta.NormNum.evalEq","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalEq","doc":"The `norm_num` extension which identifies expressions of the form `a = b`,\nsuch that `norm_num` successfully recognises both `a` and `b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L762-L762","name":"Mathlib.Meta.NormNum.eq_of_false","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.eq_of_false","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L761-L761","name":"Mathlib.Meta.NormNum.ne_of_true_of_false","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.ne_of_true_of_false","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L760-L760","name":"Mathlib.Meta.NormNum.ne_of_false_of_true","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.ne_of_false_of_true","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L759-L759","name":"Mathlib.Meta.NormNum.eq_of_true","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.eq_of_true","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L755-L757","name":"Mathlib.Meta.NormNum.isRat_lt_false","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isRat_lt_false","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L751-L753","name":"Mathlib.Meta.NormNum.isRat_le_false","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isRat_le_false","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L745-L749","name":"Mathlib.Meta.NormNum.isRat_eq_false","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isRat_eq_false","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L734-L743","name":"Mathlib.Meta.NormNum.isRat_lt_true","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isRat_lt_true","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L723-L732","name":"Mathlib.Meta.NormNum.isRat_le_true","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isRat_le_true","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L719-L721","name":"Mathlib.Meta.NormNum.isRat_eq_true","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isRat_eq_true","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L714-L717","name":"Mathlib.Meta.NormNum.Rat.invOf_denom_swap","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.Rat.invOf_denom_swap","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L710-L712","name":"Mathlib.Meta.NormNum.isInt_lt_false","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isInt_lt_false","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L706-L708","name":"Mathlib.Meta.NormNum.isInt_le_false","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isInt_le_false","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L702-L704","name":"Mathlib.Meta.NormNum.isInt_eq_false","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isInt_eq_false","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L698-L700","name":"Mathlib.Meta.NormNum.isInt_lt_true","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isInt_lt_true","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L694-L696","name":"Mathlib.Meta.NormNum.isInt_le_true","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isInt_le_true","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L691-L692","name":"Mathlib.Meta.NormNum.isInt_eq_true","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isInt_eq_true","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L687-L689","name":"Mathlib.Meta.NormNum.isNat_lt_false","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isNat_lt_false","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L683-L685","name":"Mathlib.Meta.NormNum.isNat_le_false","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isNat_le_false","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L679-L681","name":"Mathlib.Meta.NormNum.isNat_eq_false","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isNat_eq_false","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L674-L677","name":"Mathlib.Meta.NormNum.isNat_lt_true","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isNat_lt_true","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L671-L672","name":"Mathlib.Meta.NormNum.ble_eq_false","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.ble_eq_false","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L667-L669","name":"Mathlib.Meta.NormNum.isNat_le_true","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isNat_le_true","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L663-L665","name":"Mathlib.Meta.NormNum.isNat_eq_true","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isNat_eq_true","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L650-L659","name":"Mathlib.Meta.NormNum.evalNot","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalNot","doc":"The `norm_num` extension which identifies expressions of the form `¬a`,\nsuch that `norm_num` successfully recognises `a`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L645-L646","name":"Mathlib.Meta.NormNum.evalFalse","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalFalse","doc":"The `norm_num` extension which identifies `False`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L641-L642","name":"Mathlib.Meta.NormNum.evalTrue","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalTrue","doc":"The `norm_num` extension which identifies `True`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L607-L636","name":"Mathlib.Meta.NormNum.evalOfScientific","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalOfScientific","doc":"The `norm_num` extension which identifies expressions in scientific notation, normalizing them\nto rat casts if the scientific notation is inherited from the one for rationals. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L599-L603","name":"Mathlib.Meta.NormNum.isNat_ofScientific_of_false","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isNat_ofScientific_of_false","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L592-L596","name":"Mathlib.Meta.NormNum.isRat_ofScientific_of_true","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isRat_ofScientific_of_true","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L578-L589","name":"Mathlib.Meta.NormNum.evalMkRat","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalMkRat","doc":"The `norm_num` extension which identifies expressions of the form `mkRat a b`,\nsuch that `norm_num` successfully recognises both `a` and `b`, and returns `a / b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L572-L574","name":"Mathlib.Meta.NormNum.isRat_mkRat","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isRat_mkRat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L561-L568","name":"Mathlib.Meta.NormNum.evalDiv","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalDiv","doc":"The `norm_num` extension which identifies expressions of the form `a / b`,\nsuch that `norm_num` successfully recognises both `a` and `b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L555-L557","name":"Mathlib.Meta.NormNum.isRat_div","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isRat_div","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L522-L552","name":"Mathlib.Meta.NormNum.evalInv.core","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalInv.core","doc":"Main part of `evalInv`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L514-L553","name":"Mathlib.Meta.NormNum.evalInv","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalInv","doc":"The `norm_num` extension which identifies expressions of the form `a⁻¹`,\nsuch that `norm_num` successfully recognises `a`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L503-L510","name":"Mathlib.Meta.NormNum.isRat_inv_neg","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isRat_inv_neg","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L499-L501","name":"Mathlib.Meta.NormNum.isRat_inv_neg_one","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isRat_inv_neg_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L495-L497","name":"Mathlib.Meta.NormNum.isRat_inv_zero","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isRat_inv_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L491-L493","name":"Mathlib.Meta.NormNum.isRat_inv_one","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isRat_inv_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L485-L489","name":"Mathlib.Meta.NormNum.isRat_inv_pos","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isRat_inv_pos","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L456-L482","name":"Mathlib.Meta.NormNum.evalPow.core","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalPow.core","doc":"Main part of `evalPow`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L447-L483","name":"Mathlib.Meta.NormNum.evalPow","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalPow","doc":"The `norm_num` extension which identifies expressions of the form `a ^ b`,\nsuch that `norm_num` successfully recognises both `a` and `b`, with `b : ℕ`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L435-L442","name":"Mathlib.Meta.NormNum.isRat_pow","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isRat_pow","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L430-L432","name":"Mathlib.Meta.NormNum.isInt_pow","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isInt_pow","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L425-L427","name":"Mathlib.Meta.NormNum.isNat_pow","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isNat_pow","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L389-L421","name":"Mathlib.Meta.NormNum.evalMul.core","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalMul.core","doc":"Main part of `evalMul`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L382-L422","name":"Mathlib.Meta.NormNum.evalMul","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalMul","doc":"The `norm_num` extension which identifies expressions of the form `a * b`,\nsuch that `norm_num` successfully recognises both `a` and `b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L360-L378","name":"Mathlib.Meta.NormNum.isRat_mul","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isRat_mul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L356-L358","name":"Mathlib.Meta.NormNum.isInt_mul","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isInt_mul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L351-L353","name":"Mathlib.Meta.NormNum.isNat_mul","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isNat_mul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L319-L347","name":"Mathlib.Meta.NormNum.evalSub.core","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalSub.core","doc":"Main part of `evalAdd`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L311-L348","name":"Mathlib.Meta.NormNum.evalSub","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalSub","doc":"The `norm_num` extension which identifies expressions of the form `a - b` in a ring,\nsuch that `norm_num` successfully recognises both `a` and `b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L300-L307","name":"Mathlib.Meta.NormNum.isRat_sub","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isRat_sub","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L295-L297","name":"Mathlib.Meta.NormNum.isInt_sub","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isInt_sub","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L271-L291","name":"Mathlib.Meta.NormNum.evalNeg.core","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalNeg.core","doc":"Main part of `evalNeg`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L263-L292","name":"Mathlib.Meta.NormNum.evalNeg","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalNeg","doc":"The `norm_num` extension which identifies expressions of the form `-a`,\nsuch that `norm_num` successfully recognises `a`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L257-L259","name":"Mathlib.Meta.NormNum.isRat_neg","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isRat_neg","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L252-L254","name":"Mathlib.Meta.NormNum.isInt_neg","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isInt_neg","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L216-L248","name":"Mathlib.Meta.NormNum.evalAdd.core","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalAdd.core","doc":"Main part of `evalAdd`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L205-L249","name":"Mathlib.Meta.NormNum.evalAdd","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalAdd","doc":"The `norm_num` extension which identifies expressions of the form `a + b`,\nsuch that `norm_num` successfully recognises both `a` and `b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L198-L201","name":"Mathlib.Meta.NormNum.instMonadLiftOptionMetaM","kind":"instance","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.instMonadLiftOptionMetaM","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L179-L196","name":"Mathlib.Meta.NormNum.isRat_add","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isRat_add","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L174-L175","name":"Mathlib.Meta.NormNum.invertibleOfMul'","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.invertibleOfMul'","doc":"If `b` divides `a` and `a` is invertible, then `b` is invertible. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L166-L171","name":"Mathlib.Meta.NormNum.invertibleOfMul","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.invertibleOfMul","doc":"If `b` divides `a` and `a` is invertible, then `b` is invertible. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L161-L163","name":"Mathlib.Meta.NormNum.isInt_add","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isInt_add","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L156-L158","name":"Mathlib.Meta.NormNum.isNat_add","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isNat_add","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L118-L137","name":"Mathlib.Meta.NormNum.evalRatCast","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalRatCast","doc":"The `norm_num` extension which identifies an expression `RatCast.ratCast q` where `norm_num`\nrecognizes `q`, returning the cast of `q`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L112-L114","name":"Mathlib.Meta.NormNum.isRat_ratCast","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isRat_ratCast","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L108-L110","name":"Mathlib.Meta.NormNum.isInt_ratCast","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isInt_ratCast","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L104-L106","name":"Mathlib.Meta.NormNum.isNat_ratCast","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isNat_ratCast","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L90-L102","name":"Mathlib.Meta.NormNum.evalIntCast","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalIntCast","doc":"The `norm_num` extension which identifies an expression `Int.cast n`, returning `n`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L86-L87","name":"Mathlib.Meta.NormNum.isInt_cast","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isInt_cast","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L83-L84","name":"Mathlib.Meta.NormNum.isNat_int_cast","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isNat_int_cast","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L75-L81","name":"Mathlib.Meta.NormNum.evalNatCast","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalNatCast","doc":"The `norm_num` extension which identifies an expression `Nat.cast n`, returning `n`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L71-L72","name":"Mathlib.Meta.NormNum.isNat_cast","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isNat_cast","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L62-L67","name":"Mathlib.Meta.NormNum.evalIntOfNat","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalIntOfNat","doc":"The `norm_num` extension which identifies the constructor application `Int.ofNat n` such that\n`norm_num` successfully recognizes `n`, returning `n`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L57-L58","name":"Mathlib.Meta.NormNum.isNat_intOfNat","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isNat_intOfNat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L47-L55","name":"Mathlib.Meta.NormNum.evalOfNat","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalOfNat","doc":"The `norm_num` extension which identifies an expression `OfNat.ofNat n`, returning `n`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L43-L44","name":"Mathlib.Meta.NormNum.isNat_ofNat","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isNat_ofNat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L38-L41","name":"Mathlib.Meta.NormNum.evalOne","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalOne","doc":"The `norm_num` extension which identifies the expression `One.one`, returning `1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L35-L35","name":"Mathlib.Meta.NormNum.isNat_one","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isNat_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L30-L33","name":"Mathlib.Meta.NormNum.evalZero","kind":"def","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.evalZero","doc":"The `norm_num` extension which identifies the expression `Zero.zero`, returning `0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/Basic.lean#L26-L27","name":"Mathlib.Meta.NormNum.isNat_zero","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/Basic.html#Mathlib.Meta.NormNum.isNat_zero","doc":""}]}