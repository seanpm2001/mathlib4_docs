{"name":"Mathlib.Data.ListM.BestFirst","instances":[],"imports":["Init","Mathlib.Data.ListM.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/BestFirst.lean#L77-L93","name":"bestFirstSearch","kind":"def","docLink":"./Mathlib/Data/ListM/BestFirst.html#bestFirstSearch","doc":"A lazy list recording the best first search of a graph generated by a function\n`f : α → ListM m α`.\n\nWe maintain a priority queue of visited-but-not-exhausted nodes,\nand at each step take the next child of the highest priority node in the queue.\n\nThe option `maxDepth` limits the search depth.\n\nThe option `maxQueued` bounds the size of the priority queue,\ndiscarding the lowest priority nodes as needed.\nThis implements a \"beam\" search, which may be incomplete but uses bounded memory.\n\nThe option `removeDuplicates` keeps an `RBSet` of previously visited nodes.\nOtherwise, if the graph is not a tree then nodes will be visited multiple times.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/BestFirst.lean#L42-L59","name":"bestFirstSearchAux","kind":"def","docLink":"./Mathlib/Data/ListM/BestFirst.html#bestFirstSearchAux","doc":"Auxiliary function for `bestFirstSearch`, that updates the internal state,\nconsisting of a priority queue of triples `α × Nat × ListM m α`.\nWe remove the next element from the list contained in the best triple\n(discarding the triple if there is no next element),\nenqueue it and return it.\n"}]}