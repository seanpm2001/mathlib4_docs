{"name":"Mathlib.Tactic.SolveByElim","instances":[{"typeNames":["Mathlib.Tactic.SolveByElim.Config","Mathlib.Tactic.BacktrackConfig"],"name":"Mathlib.Tactic.SolveByElim.instCoeConfigBacktrackConfig","className":"Coe"}],"imports":["Init","Mathlib.Tactic.Backtracking","Lean.Meta.Tactic.Apply","Mathlib.Lean.LocalContext","Mathlib.Tactic.Relation.Symm","Mathlib.Tactic.LabelAttr","Mathlib.Control.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L475-L498","name":"Mathlib.Tactic.SolveByElim.applyRulesSyntax","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.applyRulesSyntax","doc":"`apply_rules [l₁, l₂, ...]` tries to solve the main goal by iteratively\napplying the list of lemmas `[l₁, l₂, ...]` or by applying a local hypothesis.\nIf `apply` generates new goals, `apply_rules` iteratively tries to solve those goals.\nYou can use `apply_rules [-h]` to omit a local hypothesis.\n\n`apply_rules` will also use `rfl`, `trivial`, `congrFun` and `congrArg`.\nThese can be disabled, as can local hypotheses, by using `apply_rules only [...]`.\n\nYou can use `apply_rules using [a₁, ...]` to use all lemmas which have been labelled\nwith the attributes `aᵢ` (these attributes must be created using `register_label_attr`).\n\nYou can pass a further configuration via the syntax `apply_rules (config := {...})`.\nThe options supported are the same as for `solve_by_elim` (and include all the options for `apply`).\n\n`apply_rules` will try calling `symm` on hypotheses and `exfalso` on the goal as needed.\nThis can be disabled with `apply_rules (config := {symm := false, exfalso := false})`.\n\nYou can bound the iteration depth using the syntax `apply_rules (config := {maxDepth := n})`.\n\nUnlike `solve_by_elim`, `apply_rules` does not perform backtracking, and greedily applies\na lemma from the list until it gets stuck.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L442-L463","name":"Mathlib.Tactic.SolveByElim.applyAssumptionSyntax","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.applyAssumptionSyntax","doc":"`apply_assumption` looks for an assumption of the form `... → ∀ _, ... → head`\nwhere `head` matches the current goal.\n\nYou can specify additional rules to apply using `apply_assumption [...]`.\nBy default `apply_assumption` will also try `rfl`, `trivial`, `congrFun`, and `congrArg`.\nIf you don't want these, or don't want to use all hypotheses, use `apply_assumption only [...]`.\nYou can use `apply_assumption [-h]` to omit a local hypothesis.\nYou can use `apply_assumption using [a₁, ...]` to use all lemmas which have been labelled\nwith the attributes `aᵢ` (these attributes must be created using `register_label_attr`).\n\n`apply_assumption` will use consequences of local hypotheses obtained via `symm`.\n\nIf `apply_assumption` fails, it will call `exfalso` and try again.\nThus if there is an assumption of the form `P → ¬ Q`, the new tactic state\nwill have two goals, `P` and `Q`.\n\nYou can pass a further configuration via the syntax `apply_rules (config := {...}) lemmas`.\nThe options supported are the same as for `solve_by_elim` (and include all the options for `apply`).\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L422-L427","name":"Mathlib.Tactic.SolveByElim.solveByElim.processSyntax","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.solveByElim.processSyntax","doc":"Wrapper for `solveByElim` that processes a list of `Term`s\nthat specify the lemmas to use. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L380-L418","name":"Mathlib.Tactic.SolveByElim.solveByElimSyntax","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.solveByElimSyntax","doc":"`solve_by_elim` calls `apply` on the main goal to find an assumption whose head matches\nand then repeatedly calls `apply` on the generated subgoals until no subgoals remain,\nperforming at most `maxDepth` (defaults to 6) recursive steps.\n\n`solve_by_elim` discharges the current goal or fails.\n\n`solve_by_elim` performs backtracking if subgoals can not be solved.\n\nBy default, the assumptions passed to `apply` are the local context, `rfl`, `trivial`,\n`congrFun` and `congrArg`.\n\nThe assumptions can be modified with similar syntax as for `simp`:\n* `solve_by_elim [h₁, h₂, ..., hᵣ]` also applies the given expressions.\n* `solve_by_elim only [h₁, h₂, ..., hᵣ]` does not include the local context,\n  `rfl`, `trivial`, `congrFun`, or `congrArg` unless they are explicitly included.\n* `solve_by_elim [-h₁, ... -hₙ]` removes the given local hypotheses.\n* `solve_by_elim using [a₁, ...]` uses all lemmas which have been labelled\n  with the attributes `aᵢ` (these attributes must be created using `register_label_attr`).\n\n`solve_by_elim*` tries to solve all goals together, using backtracking if a solution for one goal\nmakes other goals impossible.\n(Adding or removing local hypotheses may not be well-behaved when starting with multiple goals.)\n\nOptional arguments passed via a configuration argument as `solve_by_elim (config := { ... })`\n- `maxDepth`: number of attempts at discharging generated subgoals\n- `symm`: adds all hypotheses derived by `symm` (defaults to `true`).\n- `exfalso`: allow calling `exfalso` and trying again if `solve_by_elim` fails\n  (defaults to `true`).\n- `transparency`: change the transparency mode when calling `apply`. Defaults to `.default`,\n  but it is often useful to change to `.reducible`,\n  so semireducible definitions will not be unfolded when trying to apply a lemma.\n\nSee also the doc-comment for `Mathlib.Tactic.BacktrackConfig` for the options\n`proc`, `suspend`, and `discharge` which allow further customization of `solve_by_elim`.\nBoth `apply_assumption` and `apply_rules` are implemented via these hooks.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L373-L378","name":"Mathlib.Tactic.SolveByElim.parseUsing","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.parseUsing","doc":"Parse the `using ...` argument for `solve_by_elim`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L355-L370","name":"Mathlib.Tactic.SolveByElim.parseArgs","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.parseArgs","doc":"Parse the lemma argument of a call to `solve_by_elim`.\nThe first component should be true if `*` appears at least once.\nThe second component should contain each term `t`in the arguments.\nThe third component should contain `t` for each `-t` in the arguments.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L344-L345","name":"Mathlib.Tactic.SolveByElim.using_","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.using_","doc":"Syntax for using all lemmas labelled with an attribute in `solve_by_elim`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L342-L343","name":"Mathlib.Tactic.SolveByElim.args","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.args","doc":"Syntax for adding and removing terms in `solve_by_elim`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L340-L341","name":"Mathlib.Tactic.SolveByElim.arg","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.arg","doc":"Syntax for adding or removing a term, or `*`, in `solve_by_elim`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L338-L339","name":"Mathlib.Tactic.SolveByElim.star","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.star","doc":"Syntax for including all local hypotheses in `solve_by_elim`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L336-L337","name":"Mathlib.Tactic.SolveByElim.erase","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.erase","doc":"Syntax for omitting a local hypothesis in `solve_by_elim`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L334-L334","name":"Mathlib.Tactic.SolveByElim.mkAssumptionSet.elab'","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.mkAssumptionSet.elab'","doc":"Run `elabTerm`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L310-L334","name":"Mathlib.Tactic.SolveByElim.mkAssumptionSet","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.mkAssumptionSet","doc":"`mkAssumptionSet` builds a collection of lemmas for use in\nthe backtracking search in `solve_by_elim`.\n\n* By default, it includes all local hypotheses, along with `rfl`, `trivial`, `congrFun`\n  and `congrArg`.\n* The flag `noDefaults` removes these.\n* The flag `star` includes all local hypotheses, but not `rfl`, `trivial`, `congrFun`,\n  or `congrArg`. (It doesn't make sense to use `star` without `noDefaults`.)\n* The argument `add` is the list of terms inside the square brackets that did not have `-`\n  and can be used to add expressions or local hypotheses\n* The argument `remove` is the list of terms inside the square brackets that had a `-`,\n  and can be used to remove local hypotheses.\n  (It doesn't make sense to remove expressions which are not local hypotheses,\n  to remove local hypotheses unless `!noDefaults || star`,\n  and it does not make sense to use `star` unless you remove at least one local hypothesis.)\n\n`mkAssumptionSet` returns not a `List expr`, but a `List (TermElabM Expr) × TermElabM (List Expr)`.\nThere are two separate problems that need to be solved.\n\n### Stuck metavariables\n\nLemmas with implicit arguments would be filled in with metavariables if we created the\n`Expr` objects immediately, so instead we return thunks that generate the expressions\non demand. This is the first component, with type `List (TermElabM expr)`.\n\nAs an example, we have `def rfl : ∀ {α : Sort u} {a : α}, a = a`, which on elaboration will become\n`@rfl ?m_1 ?m_2`.\n\nBecause `solve_by_elim` works by repeated application of lemmas against subgoals,\nthe first time such a lemma is successfully applied,\nthose metavariables will be unified, and thereafter have fixed values.\nThis would make it impossible to apply the lemma\na second time with different values of the metavariables.\n\nSee https://github.com/leanprover-community/mathlib/issues/2269\n\n### Relevant local hypotheses\n\n`solve_by_elim*` works with multiple goals,\nand we need to use separate sets of local hypotheses for each goal.\nThe second component of the returned value provides these local hypotheses.\n(Essentially using `local_context`, along with some filtering to remove hypotheses\nthat have been explicitly removed via `only` or `[-h]`.)\n\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L254-L257","name":"Lean.MVarId.applyRules","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Lean.MVarId.applyRules","doc":"A `MetaM` analogue of the `apply_rules` user tactic.\n\nWe pass the lemmas as `TermElabM Expr` rather than just `Expr`,\nso they can be generated fresh for each application, to avoid stuck metavariables.\n\nBy default it uses all local hypotheses, but you can disable this with `only := true`.\nIf you need to remove particular local hypotheses, call `solveByElim` directly.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L240-L243","name":"Mathlib.Tactic.SolveByElim.solveByElim.run","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.solveByElim.run","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L216-L243","name":"Mathlib.Tactic.SolveByElim.solveByElim","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.solveByElim","doc":"Solve a collection of goals by repeatedly applying lemmas, backtracking as necessary.\n\nArguments:\n* `cfg : Config` additional configuration options\n  (options for `apply`, maximum depth, and custom flow control)\n* `lemmas : List (TermElabM Expr)` lemmas to apply.\n  These are thunks in `TermElabM` to avoid stuck metavariables.\n* `ctx : TermElabM (List Expr)` monadic function returning the local hypotheses to use.\n* `goals : List MVarId` the initial list of goals for `solveByElim`\n\nReturns a list of suspended goals, if it succeeded on all other subgoals.\nBy default `cfg.suspend` is `false,` `cfg.discharge` fails, and `cfg.failAtMaxDepth` is `true`,\nand so the returned list is always empty.\nCustom wrappers (e.g. `apply_assumption` and `apply_rules`) may modify this behaviour.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L195-L198","name":"Mathlib.Tactic.SolveByElim.applyFirstLemma","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.applyFirstLemma","doc":"Applies the first possible lemma to the goal. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L189-L192","name":"Mathlib.Tactic.SolveByElim.applyLemmas","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.applyLemmas","doc":"Returns the list of tactics corresponding to applying the available lemmas to the goal. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L184-L186","name":"Mathlib.Tactic.SolveByElim.elabContextLemmas","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.elabContextLemmas","doc":"Elaborate a list of lemmas and local context.\nSee `mkAssumptionSet` for an explanation of why this is needed.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L174-L176","name":"Mathlib.Tactic.SolveByElim.Config.requireUsingAll","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.Config.requireUsingAll","doc":"Create or modify a `Config` which only accept solutions\nfor which every expression in `use` appears as a subexpression.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L163-L168","name":"Mathlib.Tactic.SolveByElim.Config.testSolutions","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.Config.testSolutions","doc":"Create or modify a `Config` which rejects complete solutions for which `test`,\napplied to the instantiations of the original goals, fails or returns `false`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L153-L157","name":"Mathlib.Tactic.SolveByElim.Config.testPartialSolutions","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.Config.testPartialSolutions","doc":"Create or modify a `Config` which rejects branches for which `test`,\napplied to the instantiations of the original goals, fails or returns `false`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L146-L147","name":"Mathlib.Tactic.SolveByElim.Config.synthInstanceAfter","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.Config.synthInstanceAfter","doc":"Create or modify a `Config` which\ncalls `synthInstance` on any goal for which no lemma applies. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L141-L142","name":"Mathlib.Tactic.SolveByElim.Config.introsAfter","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.Config.introsAfter","doc":"Create or modify a `Config` which calls `intro` on any goal for which no lemma applies. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L134-L138","name":"Mathlib.Tactic.SolveByElim.Config.withDischarge","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.Config.withDischarge","doc":"Add a discharging tactic, falling back to the original discharging tactic if it fails.\nReturn `none` to return the goal as a new subgoal, or `some goals` to replace it. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L129-L130","name":"Mathlib.Tactic.SolveByElim.Config.synthInstance","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.Config.synthInstance","doc":"Attempt typeclass inference on each goal, before applying lemmas. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L122-L123","name":"Mathlib.Tactic.SolveByElim.Config.intros","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.Config.intros","doc":"Create or modify a `Config` which calls `intro` on each goal before applying lemmas. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L110-L116","name":"Mathlib.Tactic.SolveByElim.Config.mainGoalProc","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.Config.mainGoalProc","doc":"Create or modify a `Config` which runs a tactic on the main goal.\nIf that tactic fails, fall back to the `proc` behaviour of `cfg`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L98-L104","name":"Mathlib.Tactic.SolveByElim.Config.accept","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.Config.accept","doc":"Create or modify a `Config` which allows a class of goals to be returned as subgoals. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L86-L89","name":"Mathlib.Tactic.SolveByElim.elabApplyRulesConfig","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.elabApplyRulesConfig","doc":"Allow elaboration of `ApplyRulesConfig` arguments to tactics.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L81-L84","name":"Mathlib.Tactic.SolveByElim.elabConfig","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.elabConfig","doc":"Allow elaboration of `Config` arguments to tactics.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L78-L79","name":"Mathlib.Tactic.SolveByElim.ApplyRulesConfig","kind":"structure","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.ApplyRulesConfig","doc":"The default `maxDepth` for `apply_rules` is higher. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L75-L75","name":"Mathlib.Tactic.SolveByElim.instCoeConfigBacktrackConfig","kind":"instance","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.instCoeConfigBacktrackConfig","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L73-L73","name":"Mathlib.Tactic.SolveByElim.Config.backtracking","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.Config.backtracking","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L72-L72","name":"Mathlib.Tactic.SolveByElim.Config.exfalso","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.Config.exfalso","doc":"Try proving the goal via `exfalso` if `solve_by_elim` otherwise fails.\nThis is only used when operating on a single goal. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L69-L69","name":"Mathlib.Tactic.SolveByElim.Config.symm","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.Config.symm","doc":"Also use symmetric versions (via `@[symm]`) of local hypotheses. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L67-L67","name":"Mathlib.Tactic.SolveByElim.Config.transparency","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.Config.transparency","doc":"Transparency mode for calls to `apply`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L65-L73","name":"Mathlib.Tactic.SolveByElim.Config","kind":"structure","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.Config","doc":"Configuration structure to control the behaviour of `solve_by_elim`:\n* transparency mode for calls to `apply`\n* whether to use `symm` on hypotheses and `exfalso` on the goal as needed,\n* see also `BacktrackConfig` for hooks allowing flow control.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L54-L57","name":"Mathlib.Tactic.SolveByElim.applyFirst","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.applyFirst","doc":"`applyFirst lemmas goal` applies the first of the `lemmas`\nwhich can be successfully applied to `goal`, and fails if none apply.\n\nWe use this in `apply_rules` and `apply_assumption` where backtracking is not needed.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L34-L46","name":"Mathlib.Tactic.SolveByElim.applyTactics","kind":"def","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.applyTactics","doc":"`applyTactics lemmas goal` will return a list of tactics,\ncorresponding to applying each one of the lemmas to the goal `goal`.\n\nProviding this to the `backtracking` tactic,\nwe can perform backtracking search based on applying a list of lemmas.\n\n``applyTactics (trace := `name)`` will construct trace nodes for ``name` indicating which\ncalls to `apply` succeeded or failed.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L1-L1","name":"Mathlib.Tactic.SolveByElim.ApplyRulesConfig.mk","kind":"ctor","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.ApplyRulesConfig.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SolveByElim.lean#L1-L1","name":"Mathlib.Tactic.SolveByElim.Config.mk","kind":"ctor","docLink":"./Mathlib/Tactic/SolveByElim.html#Mathlib.Tactic.SolveByElim.Config.mk","doc":""}]}