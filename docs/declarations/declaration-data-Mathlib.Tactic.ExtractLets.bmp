{"name":"Mathlib.Tactic.ExtractLets","instances":[],"imports":["Init","Mathlib.Tactic.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/ExtractLets.lean#L92-L110","name":"Mathlib.evalExtractLet.doExtract","kind":"def","docLink":"./Mathlib/Tactic/ExtractLets.html#Mathlib.evalExtractLet.doExtract","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/ExtractLets.lean#L86-L91","name":"Mathlib.evalExtractLet.setupNames","kind":"def","docLink":"./Mathlib/Tactic/ExtractLets.html#Mathlib.evalExtractLet.setupNames","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/ExtractLets.lean#L80-L110","name":"Mathlib.evalExtractLet","kind":"def","docLink":"./Mathlib/Tactic/ExtractLets.html#Mathlib.evalExtractLet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/ExtractLets.lean#L65-L78","name":"Mathlib.extractLets","kind":"def","docLink":"./Mathlib/Tactic/ExtractLets.html#Mathlib.extractLets","doc":"The `extract_lets at h` tactic takes a local hypothesis of the form `h : let x := v; b`\nand introduces a new local definition `x := v` while changing `h` to be `h : b`.  It can be thought\nof as being a `cases` tactic for `let` expressions. It can also be thought of as being like\n`intros at h` for `let` expressions.\n\nFor example, if `h : let x := 1; x = x`, then `extract_lets x at h` introduces `x : Nat := 1` and\nchanges `h` to `h : x = x`.\n\nJust like `intros`, the `extract_lets` tactic either takes a list of names, in which case\nthat specifies the number of `let` bindings that must be extracted, or it takes no names, in which\ncase all the `let` bindings are extracted.\n\nThe tactic `extract_let at ‚ä¢` is a weaker form of `intros` that only introduces obvious `let`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/ExtractLets.lean#L55-L61","name":"Lean.MVarId.extractLets","kind":"def","docLink":"./Mathlib/Tactic/ExtractLets.html#Lean.MVarId.extractLets","doc":"A more limited version of `Lean.MVarId.introN` that ensures the goal is a\nnested `let` expression. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/ExtractLets.lean#L49-L51","name":"Lean.Expr.letDepth","kind":"def","docLink":"./Mathlib/Tactic/ExtractLets.html#Lean.Expr.letDepth","doc":"Counts the immediate depth of a nested `let` expression. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/ExtractLets.lean#L39-L46","name":"Lean.MVarId.extractLetsAt.process","kind":"def","docLink":"./Mathlib/Tactic/ExtractLets.html#Lean.MVarId.extractLetsAt.process","doc":"Check that `t` is a `let` and then do what's necessary to lift it over the binding\ndescribed by `mk`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/ExtractLets.lean#L20-L46","name":"Lean.MVarId.extractLetsAt","kind":"def","docLink":"./Mathlib/Tactic/ExtractLets.html#Lean.MVarId.extractLetsAt","doc":"Given a local hypothesis whose type is a `let` expression, then lift the `let` bindings to be\na new local definition. "}]}