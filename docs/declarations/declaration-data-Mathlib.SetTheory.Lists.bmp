{"name":"Mathlib.SetTheory.Lists","instances":[{"typeNames":["Eq","Lists'"],"name":"instDecidableEqLists'","className":"Decidable"},{"typeNames":["Lists'"],"name":"Lists'.instForAllBoolInhabitedLists'","className":"Inhabited"},{"typeNames":["Lists'","Bool.true"],"name":"Lists'.instHasSubsetLists'True","className":"HasSubset"},{"typeNames":["Lists","Lists'"],"name":"Lists'.instMembershipListsLists'","className":"Membership"},{"typeNames":["Lists"],"name":"Lists.instInhabitedLists","className":"Inhabited"},{"typeNames":["Eq","Lists"],"name":"Lists.instDecidableEqLists","className":"Decidable"},{"typeNames":["Lists"],"name":"Lists.instSizeOfLists","className":"SizeOf"},{"typeNames":["Lists","Lists"],"name":"Lists.instMembershipLists","className":"Membership"},{"typeNames":["Lists"],"name":"Lists.instSetoidLists","className":"Setoid"},{"typeNames":["HasSubset.Subset","Lists'","Bool.true","Lists'.instHasSubsetLists'True"],"name":"Lists.Subset.decidable","className":"Decidable"},{"typeNames":["Membership.mem","Lists","Lists'","Bool.true","Lists'.instMembershipListsLists'"],"name":"Lists.mem.decidable","className":"Decidable"},{"typeNames":["Finsets"],"name":"Finsets.instEmptyCollectionFinsets","className":"EmptyCollection"},{"typeNames":["Finsets"],"name":"Finsets.instInhabitedFinsets","className":"Inhabited"},{"typeNames":["Eq","Finsets"],"name":"Finsets.instDecidableEqFinsets","className":"Decidable"}],"imports":["Init","Mathlib.Data.List.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L476-L479","name":"Finsets.instDecidableEqFinsets","kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Finsets.instDecidableEqFinsets","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L473-L474","name":"Finsets.instInhabitedFinsets","kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Finsets.instInhabitedFinsets","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L470-L471","name":"Finsets.instEmptyCollectionFinsets","kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Finsets.instEmptyCollectionFinsets","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L464-L465","name":"Finsets","kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Finsets","doc":"`Finsets` are defined via equivalence classes of `Lists` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L457-L458","name":"Lists'.Subset.trans","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.Subset.trans","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L453-L454","name":"Lists'.mem_of_subset","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.mem_of_subset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L448-L450","name":"Lists'.mem_equiv_left","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.mem_equiv_left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L419-L432","name":"Lists.mem.decidable","kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Lists.mem.decidable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L407-L418","name":"Lists.Subset.decidable","kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Lists.Subset.decidable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L377-L380","name":"Lists.lt_sizeof_cons'","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists.lt_sizeof_cons'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L372-L374","name":"Lists.sizeof_pos","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists.sizeof_pos","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L363-L369","name":"Lists.Equiv.decidableMeas","kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists.Equiv.decidableMeas","doc":"Auxiliary function to prove termination of decidability checking "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L356-L357","name":"Lists.instSetoidLists","kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Lists.instSetoidLists","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L317-L353","name":"Lists.Equiv.trans","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists.Equiv.trans","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L313-L314","name":"Lists.Equiv.symm","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists.Equiv.symm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L309-L310","name":"Lists.equiv_atom","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists.equiv_atom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L300-L304","name":"Lists.Equiv.antisymm_iff","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists.Equiv.antisymm_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L295-L297","name":"Lists.isList_of_mem","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists.isList_of_mem","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L292-L293","name":"Lists.instMembershipLists","kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Lists.instMembershipLists","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L287-L289","name":"Lists.mem","kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists.mem","doc":"Membership of ZFA list. A ZFA list belongs to a proper ZFA list if it belongs to the latter as a\nproper ZFA prelist. An atom has no members. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L266-L282","name":"Lists.inductionMut","kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists.inductionMut","doc":"A recursion principle for pairs of ZFA lists and proper ZFA prelists. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L263-L263","name":"Lists.instSizeOfLists","kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Lists.instSizeOfLists","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L261-L261","name":"Lists.instDecidableEqLists","kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Lists.instDecidableEqLists","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L258-L259","name":"Lists.instInhabitedLists","kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Lists.instInhabitedLists","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L254-L255","name":"Lists.of_toList","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists.of_toList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L251-L251","name":"Lists.to_ofList","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists.to_ofList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L247-L248","name":"Lists.isList_toList","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists.isList_toList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L243-L244","name":"Lists.ofList","kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists.ofList","doc":"Converts a `List` of ZFA lists to a ZFA list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L238-L239","name":"Lists.IsList","kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists.IsList","doc":"Predicate stating that a ZFA list is proper. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L233-L234","name":"Lists.toList","kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists.toList","doc":"Converts a ZFA list to a `List` of ZFA lists. Atoms are sent to `[]`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L227-L228","name":"Lists.of'","kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists.of'","doc":"Converts a proper ZFA prelist to a ZFA list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L221-L222","name":"Lists.atom","kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists.atom","doc":"Sends `a : α` to the corresponding atom in `Lists α`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L206-L212","name":"Lists'.subset_def","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.subset_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L196-L203","name":"Lists'.mem_of_subset'","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.mem_of_subset'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L189-L193","name":"Lists'.subset_nil","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.subset_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L185-L186","name":"Lists'.Subset.refl","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.Subset.refl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L177-L181","name":"Lists'.ofList_subset","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.ofList_subset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L168-L174","name":"Lists'.cons_subset","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.cons_subset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L164-L165","name":"Lists'.mem_cons","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.mem_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L159-L160","name":"Lists'.mem_def","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.mem_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L156-L157","name":"Lists'.instMembershipListsLists'","kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.instMembershipListsLists'","doc":"ZFA prelist membership. A ZFA list is in a ZFA prelist if some element of this ZFA prelist is\nequivalent as a ZFA list to this ZFA list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L151-L152","name":"Lists'.instHasSubsetLists'True","kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.instHasSubsetLists'True","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L134-L136","name":"Lists'.Subset.cons","kind":"ctor","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.Subset.cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L133-L133","name":"Lists'.Subset.nil","kind":"ctor","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.Subset.nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L132-L136","name":"Lists'.Subset","kind":"inductive","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.Subset","doc":"Subset relation for ZFA lists. Defined inductively. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L130-L131","name":"Lists.Equiv.antisymm","kind":"ctor","docLink":"./Mathlib/SetTheory/Lists.html#Lists.Equiv.antisymm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L129-L129","name":"Lists.Equiv.refl","kind":"ctor","docLink":"./Mathlib/SetTheory/Lists.html#Lists.Equiv.refl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L128-L131","name":"Lists.Equiv","kind":"inductive","docLink":"./Mathlib/SetTheory/Lists.html#Lists.Equiv","doc":"Equivalence of ZFA lists. Defined inductively. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L105-L122","name":"Lists'.of_toList","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.of_toList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L101-L101","name":"Lists'.to_ofList","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.to_ofList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L95-L97","name":"Lists'.ofList","kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.ofList","doc":"Converts a `List` of ZFA lists to a proper ZFA prelist. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L90-L90","name":"Lists'.toList_cons","kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.toList_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L82-L85","name":"Lists'.toList","kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.toList","doc":"Converts a ZFA prelist to a `List` of ZFA lists. Atoms are sent to `[]`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L76-L77","name":"Lists'.cons","kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.cons","doc":"Appending a ZFA list to a proper ZFA prelist. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L71-L73","name":"Lists'.instForAllBoolInhabitedLists'","kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.instForAllBoolInhabitedLists'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L65-L66","name":"Lists","kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists","doc":"Hereditarily finite list, aka ZFA list. A ZFA list is either an \"atom\" (`b = false`),\ncorresponding to an element of `α`, or a \"proper\" ZFA list, inductively defined from the empty ZFA\nlist and from appending a ZFA list to a proper ZFA list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L58-L58","name":"instDecidableEqLists'","kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#instDecidableEqLists'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L57-L57","name":"Lists'.cons'","kind":"ctor","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.cons'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L56-L56","name":"Lists'.nil","kind":"ctor","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L55-L55","name":"Lists'.atom","kind":"ctor","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.atom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Lists.lean#L54-L58","name":"Lists'","kind":"inductive","docLink":"./Mathlib/SetTheory/Lists.html#Lists'","doc":"Prelists, helper type to define `Lists`. `Lists' α false` are the \"atoms\", a copy of `α`.\n`Lists' α true` are the \"proper\" ZFA prelists, inductively defined from the empty ZFA prelist and\nfrom appending a ZFA prelist to a proper ZFA prelist. It is made so that you can't append anything\nto an atom while having only one appending function for appending both atoms and proper ZFC prelists\nto a proper ZFA prelist. "}]}