{"name":"Mathlib.Computability.PartrecCode","instances":[{"typeNames":["Nat.Partrec.Code"],"name":"Nat.Partrec.Code.instInhabited","className":"Inhabited"},{"typeNames":["Nat.Partrec.Code"],"name":"Nat.Partrec.Code.instDenumerable","className":"Denumerable"},{"typeNames":["PFun","Nat","Nat.Partrec.Code"],"name":"Nat.Partrec.Code.instMembershipPFunNatCode","className":"Membership"}],"imports":["Init","Mathlib.Computability.Partrec"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L1189-L1192","name":"Nat.Partrec.Code.fixed_point₂","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.fixed_point₂","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L1171-L1186","name":"Nat.Partrec.Code.fixed_point","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.fixed_point","doc":"Roger's fixed-point theorem: Any total, computable `f` has a fixed point: That is, under the\ninterpretation given by `Nat.Partrec.Code.eval`, there is a code `c` such that `c` and `f c` have\nthe same evaluation.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L1161-L1164","name":"Nat.Partrec.Code.eval_part","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.eval_part","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L1155-L1158","name":"Nat.Partrec.Code.eval_eq_rfindOpt","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.eval_eq_rfindOpt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L1087-L1146","name":"Nat.Partrec.Code.evaln_prim","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.evaln_prim","doc":"The `Nat.Partrec.Code.evaln` function is primitive recursive. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L860-L925","name":"Nat.Partrec.Code.evaln_complete","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.evaln_complete","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L820-L857","name":"Nat.Partrec.Code.evaln_sound","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.evaln_sound","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L786-L817","name":"Nat.Partrec.Code.evaln_mono","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.evaln_mono","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L778-L783","name":"Nat.Partrec.Code.evaln_bound","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.evaln_bound","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L739-L775","name":"Nat.Partrec.Code.evaln","kind":"def","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.evaln","doc":"A modified evaluation for the code which returns an `Option ℕ` instead of a `Part ℕ`. To avoid\nundecidability, `evaln` takes a parameter `k` and fails if it encounters a number ≥ k in the course\nof its execution. Other than this, the semantics are the same as in `Nat.Partrec.Code.eval`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L702-L731","name":"Nat.Partrec.Code.exists_code","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.exists_code","doc":"A function is partial recursive if and only if there is a code implementing it. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L696-L698","name":"Nat.Partrec.Code.smn","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.smn","doc":"The $S_n^m$ theorem: There is a computable function, namely `Nat.Partrec.Code.curry`, that takes a\nprogram and a ℕ `n`, and returns a new program using `n` as the first argument.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L685-L689","name":"Nat.Partrec.Code.curry_inj","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.curry_inj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L680-L682","name":"Nat.Partrec.Code.curry_prim","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.curry_prim","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L673-L677","name":"Nat.Partrec.Code.const_prim","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.const_prim","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L670-L670","name":"Nat.Partrec.Code.eval_curry","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.eval_curry","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L666-L666","name":"Nat.Partrec.Code.eval_id","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.eval_id","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L660-L662","name":"Nat.Partrec.Code.eval_const","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.eval_const","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L656-L657","name":"Nat.Partrec.Code.instMembershipPFunNatCode","kind":"instance","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.instMembershipPFunNatCode","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L649-L653","name":"Nat.Partrec.Code.eval_prec_succ","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.eval_prec_succ","doc":"Helper lemma for the evaluation of `prec` in the recursive case. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L642-L645","name":"Nat.Partrec.Code.eval_prec_zero","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.eval_prec_zero","doc":"Helper lemma for the evaluation of `prec` in the base case. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L623-L637","name":"Nat.Partrec.Code.eval","kind":"def","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.eval","doc":"The interpretation of a `Nat.Partrec.Code` as a partial function.\n* `Nat.Partrec.Code.zero`: The constant zero function.\n* `Nat.Partrec.Code.succ`: The successor function.\n* `Nat.Partrec.Code.left`: Left unpairing of a pair of ℕ (encoded by `Nat.pair`)\n* `Nat.Partrec.Code.right`: Right unpairing of a pair of ℕ (encoded by `Nat.pair`)\n* `Nat.Partrec.Code.pair`: Pairs the outputs of argument codes using `Nat.pair`.\n* `Nat.Partrec.Code.comp`: Composition of two argument codes.\n* `Nat.Partrec.Code.prec`: Primitive recursion. Given an argument of the form `Nat.pair a n`:\n  * If `n = 0`, returns `eval cf a`.\n  * If `n = succ k`, returns `eval cg (pair a (pair k (eval (prec cf cg) (pair a k))))`\n* `Nat.Partrec.Code.rfind'`: Minimization. For `f` an argument of the form `Nat.pair a m`,\n  `rfind' f m` returns the least `a` such that `f a m = 0`, if one exists and `f b m` terminates\n  for `b < a`\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L502-L604","name":"Nat.Partrec.Code.rec_computable","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.rec_computable","doc":"Recursion on `Nat.Partrec.Code` is computable. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L389-L492","name":"Nat.Partrec.Code.rec_prim","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.rec_prim","doc":"Recursion on `Nat.Partrec.Code` is primitive recursive. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L279-L385","name":"Nat.Partrec.Code.rec_prim'","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.rec_prim'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L270-L276","name":"Nat.Partrec.Code.rfind_prim","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.rfind_prim","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L259-L267","name":"Nat.Partrec.Code.prec_prim","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.prec_prim","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L248-L256","name":"Nat.Partrec.Code.comp_prim","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.comp_prim","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L237-L245","name":"Nat.Partrec.Code.pair_prim","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.pair_prim","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L226-L232","name":"Nat.Partrec.Code.encode_lt_rfind'","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.encode_lt_rfind'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L220-L223","name":"Nat.Partrec.Code.encode_lt_prec","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.encode_lt_prec","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L214-L217","name":"Nat.Partrec.Code.encode_lt_comp","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.encode_lt_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L205-L211","name":"Nat.Partrec.Code.encode_lt_pair","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.encode_lt_pair","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L201-L202","name":"Nat.Partrec.Code.ofNatCode_eq","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.ofNatCode_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L197-L198","name":"Nat.Partrec.Code.encodeCode_eq","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.encodeCode_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L190-L194","name":"Nat.Partrec.Code.instDenumerable","kind":"instance","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.instDenumerable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L146-L164","name":"Nat.Partrec.Code.ofNatCode","kind":"def","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.ofNatCode","doc":"A decoder for `Nat.Partrec.Code.encodeCode`, taking any ℕ to the `Nat.Partrec.Code` it represents.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L132-L140","name":"Nat.Partrec.Code.encodeCode","kind":"def","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.encodeCode","doc":"An encoding of a `Nat.Partrec.Code` as a ℕ. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L126-L127","name":"Nat.Partrec.Code.curry","kind":"def","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.curry","doc":"Given a code `c` taking a pair as input, returns a code using `n` as the first argument to `c`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L120-L121","name":"Nat.Partrec.Code.id","kind":"def","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.id","doc":"A code for the identity function. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L111-L116","name":"Nat.Partrec.Code.const_inj","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.const_inj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L106-L108","name":"Nat.Partrec.Code.const","kind":"def","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.const","doc":"Returns a code for the constant function outputting a particular natural. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L101-L102","name":"Nat.Partrec.Code.instInhabited","kind":"instance","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.instInhabited","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L87-L87","name":"Nat.Partrec.Code.rfind'","kind":"ctor","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.rfind'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L86-L86","name":"Nat.Partrec.Code.prec","kind":"ctor","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.prec","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L85-L85","name":"Nat.Partrec.Code.comp","kind":"ctor","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L84-L84","name":"Nat.Partrec.Code.pair","kind":"ctor","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.pair","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L83-L83","name":"Nat.Partrec.Code.right","kind":"ctor","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L82-L82","name":"Nat.Partrec.Code.left","kind":"ctor","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L81-L81","name":"Nat.Partrec.Code.succ","kind":"ctor","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.succ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L80-L80","name":"Nat.Partrec.Code.zero","kind":"ctor","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code.zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L79-L87","name":"Nat.Partrec.Code","kind":"inductive","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.Code","doc":"Code for partial recursive functions from ℕ to ℕ.\nSee `Nat.Partrec.Code.eval` for the interpretation of these constructors.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/PartrecCode.lean#L53-L73","name":"Nat.Partrec.rfind'","kind":"theorem","docLink":"./Mathlib/Computability/PartrecCode.html#Nat.Partrec.rfind'","doc":""}]}