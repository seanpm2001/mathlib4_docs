{"name":"Mathlib.NumberTheory.LegendreSymbol.AddCharacter","instances":[{"typeNames":["AddChar"],"name":"AddChar.instCommMonoidAddChar","className":"CommMonoid"},{"typeNames":["AddChar"],"name":"AddChar.instInhabitedAddChar","className":"Inhabited"},{"typeNames":["AddChar","AddChar"],"name":"AddChar.hasCoeToFun","className":"CoeFun"},{"typeNames":["AddChar","Multiplicative","Multiplicative.mulOneClass","AddMonoid.toAddZeroClass","Monoid.toMulOneClass","CommMonoid.toMonoid"],"name":"AddChar.monoidHomClass","className":"MonoidHomClass"},{"typeNames":["AddChar","SubNegMonoid.toAddMonoid","AddGroup.toSubNegMonoid","AddCommGroup.toAddGroup"],"name":"AddChar.hasInv","className":"Inv"},{"typeNames":["AddChar","SubNegMonoid.toAddMonoid","AddGroup.toSubNegMonoid","AddCommGroup.toAddGroup"],"name":"AddChar.commGroup","className":"CommGroup"}],"imports":["Init","Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","Mathlib.FieldTheory.Finite.Trace"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L451-L459","name":"AddChar.sum_mulShift","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.sum_mulShift","doc":"The sum over the values of `mulShift ψ b` for `ψ` primitive is zero when `b ≠ 0`\nand `#R` otherwise. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L441-L446","name":"AddChar.sum_eq_card_of_is_trivial","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.sum_eq_card_of_is_trivial","doc":"The sum over the values of the trivial additive character is the cardinality of the source. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L429-L437","name":"AddChar.sum_eq_zero_of_isNontrivial","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.sum_eq_zero_of_isNontrivial","doc":"The sum over the values of a nontrivial additive character vanishes if the target ring\nis a domain. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L398-L415","name":"AddChar.primitiveCharFiniteField","kind":"def","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.primitiveCharFiniteField","doc":"There is a primitive additive character on the finite field `F` if the characteristic\nof the target is different from that of `F`.\nWe obtain it as the composition of the trace from `F` to `ZMod p` with a primitive\nadditive character on `ZMod p`, where `p` is the characteristic of `F`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L382-L386","name":"AddChar.primitiveZModChar","kind":"def","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.primitiveZModChar","doc":"There is a primitive additive character on `ZMod n` if the characteristic of the target\ndoes not divide `n` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L372-L377","name":"AddChar.zmodChar_primitive_of_primitive_root","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.zmodChar_primitive_of_primitive_root","doc":"The additive character on `ZMod n` associated to a primitive `n`th root of unity\nis primitive "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L361-L367","name":"AddChar.zmod_char_primitive_of_eq_one_only_at_zero","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.zmod_char_primitive_of_eq_one_only_at_zero","doc":"The converse: if the additive character takes the value `1` only at `0`,\nthen it is primitive. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L353-L356","name":"AddChar.IsPrimitive.zmod_char_eq_one_iff","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.IsPrimitive.zmod_char_eq_one_iff","doc":"A primitive additive character on `ZMod n` takes the value `1` only at `0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L341-L349","name":"AddChar.zmod_char_isNontrivial_iff","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.zmod_char_isNontrivial_iff","doc":"An additive character on `ZMod n` is nontrivial iff it takes a value `≠ 1` on `1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L333-L335","name":"AddChar.zmodChar_apply'","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.zmodChar_apply'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L328-L330","name":"AddChar.zmodChar_apply","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.zmodChar_apply","doc":"The additive character on `ZMod n` defined using `ζ` sends `a` to `ζ^a`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L319-L324","name":"AddChar.zmodChar","kind":"def","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.zmodChar","doc":"We can define an additive character on `ZMod n` when we have an `n`th root of unity `ζ : C`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L302-L303","name":"AddChar.PrimitiveAddChar.prim","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.PrimitiveAddChar.prim","doc":"The third projection from `PrimitiveAddChar`, showing that `χ.2` is primitive. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L297-L298","name":"AddChar.PrimitiveAddChar.char","kind":"def","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.PrimitiveAddChar.char","doc":"The second projection from `PrimitiveAddChar`, giving the character. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L292-L293","name":"AddChar.PrimitiveAddChar.n","kind":"def","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.PrimitiveAddChar.n","doc":"The first projection from `PrimitiveAddChar`, giving the cyclotomic field. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L287-L288","name":"AddChar.PrimitiveAddChar","kind":"def","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.PrimitiveAddChar","doc":"Definition for a primitive additive character on a finite ring `R` into a cyclotomic extension\nof a field `R'`. It records which cyclotomic extension it is, the character, and the\nfact that the character is primitive. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L270-L275","name":"AddChar.IsNontrivial.isPrimitive","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.IsNontrivial.isPrimitive","doc":"When `R` is a field `F`, then a nontrivial additive character is primitive "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L255-L262","name":"AddChar.to_mulShift_inj_of_isPrimitive","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.to_mulShift_inj_of_isPrimitive","doc":"The map associating to `a : R` the multiplicative shift of `ψ` by `a`\nis injective when `ψ` is primitive. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L249-L250","name":"AddChar.IsPrimitive","kind":"def","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.IsPrimitive","doc":"An additive character is *primitive* iff all its multiplicative shifts by nonzero\nelements are nontrivial. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L242-L244","name":"AddChar.mulShift_zero","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.mulShift_zero","doc":"`mulShift ψ 0` is the trivial character. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L234-L237","name":"AddChar.mulShift_mul","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.mulShift_mul","doc":"The product of `mulShift ψ a` and `mulShift ψ b` is `mulShift ψ (a + b)`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L228-L230","name":"AddChar.pow_mulShift","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.pow_mulShift","doc":"If `n` is a natural number, then `ψ ^ n = mulShift ψ n`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L223-L224","name":"AddChar.mulShift_spec'","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.mulShift_spec'","doc":"If `n` is a natural number, then `mulShift ψ n x = (ψ x) ^ n`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L217-L219","name":"AddChar.inv_mulShift","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.inv_mulShift","doc":"`ψ⁻¹ = mulShift ψ (-1))`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L212-L213","name":"AddChar.mulShift_apply","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.mulShift_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L207-L208","name":"AddChar.mulShift","kind":"def","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.mulShift","doc":"Define the multiplicative shift of an additive character.\nThis satisfies `mulShift ψ a x = ψ (a * x)`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L199-L202","name":"AddChar.isNontrivial_iff_ne_trivial","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.isNontrivial_iff_ne_trivial","doc":"An additive character is nontrivial iff it is not the trivial character. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L194-L195","name":"AddChar.IsNontrivial","kind":"def","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.IsNontrivial","doc":"An additive character is *nontrivial* if it takes a value `≠ 1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L177-L183","name":"AddChar.commGroup","kind":"instance","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.commGroup","doc":"The additive characters on a commutative additive group form a commutative group. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L172-L173","name":"AddChar.map_zsmul_zpow","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.map_zsmul_zpow","doc":"An additive character maps multiples by integers to powers. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L166-L167","name":"AddChar.inv_apply","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.inv_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L162-L163","name":"AddChar.hasInv","kind":"instance","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.hasInv","doc":"An additive character on a commutative additive group has an inverse.\n\nNote that this is a different inverse to the one provided by `MonoidHom.inv`,\nas it acts on the domain instead of the codomain. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L146-L147","name":"AddChar.map_nsmul_pow","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.map_nsmul_pow","doc":"An additive character maps multiples by natural numbers to powers. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L140-L141","name":"AddChar.map_add_mul","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.map_add_mul","doc":"An additive character maps sums to products. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L135-L135","name":"AddChar.map_zero_one","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.map_zero_one","doc":"An additive character maps `0` to `1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L130-L131","name":"AddChar.ext","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.ext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L124-L125","name":"AddChar.monoidHomClass","kind":"instance","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.monoidHomClass","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L122-L122","name":"AddChar.one_apply","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.one_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L117-L118","name":"AddChar.mul_apply","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.mul_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L112-L113","name":"AddChar.coe_to_fun_apply","kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.coe_to_fun_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L108-L109","name":"AddChar.hasCoeToFun","kind":"instance","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.hasCoeToFun","doc":"Define coercion to a function so that it includes the move from `R` to `Multiplicative R`.\nAfter we have proved the API lemmas below, we don't need to worry about writing `ofAdd a`\nwhen we want to apply an additive character. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L103-L103","name":"AddChar.toFun","kind":"def","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.toFun","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L95-L96","name":"AddChar.toMonoidHom","kind":"def","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.toMonoidHom","doc":"Interpret an additive character as a monoid homomorphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L85-L86","name":"AddChar.instInhabitedAddChar","kind":"instance","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.instInhabitedAddChar","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L82-L83","name":"AddChar.instCommMonoidAddChar","kind":"instance","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar.instCommMonoidAddChar","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/NumberTheory/LegendreSymbol/AddCharacter.lean#L69-L70","name":"AddChar","kind":"def","docLink":"./Mathlib/NumberTheory/LegendreSymbol/AddCharacter.html#AddChar","doc":"Define `AddChar R R'` as `(Multiplicative R) →* R'`.\nThe definition works for an additive monoid `R` and a monoid `R'`,\nbut we will restrict to the case that both are commutative rings below.\nWe assume right away that `R'` is commutative, so that `AddChar R R'` carries\na structure of commutative monoid.\nThe trivial additive character (sending everything to `1`) is `(1 : AddChar R R').` "}]}