{"name":"Mathlib.Testing.SlimCheck.Sampleable","instances":[{"typeNames":["Nat"],"name":"SlimCheck.Nat.shrinkable","className":"SlimCheck.Shrinkable"},{"typeNames":["Fin","Nat.succ"],"name":"SlimCheck.Fin.shrinkable","className":"SlimCheck.Shrinkable"},{"typeNames":["Int"],"name":"SlimCheck.Int.shrinkable","className":"SlimCheck.Shrinkable"},{"typeNames":["Bool"],"name":"SlimCheck.Bool.shrinkable","className":"SlimCheck.Shrinkable"},{"typeNames":["Char"],"name":"SlimCheck.Char.shrinkable","className":"SlimCheck.Shrinkable"},{"typeNames":["Prod"],"name":"SlimCheck.Prod.shrinkable","className":"SlimCheck.Shrinkable"},{"typeNames":["List"],"name":"SlimCheck.List.shrinkable","className":"SlimCheck.Shrinkable"},{"typeNames":["Nat"],"name":"SlimCheck.Nat.sampleableExt","className":"SlimCheck.SampleableExt"},{"typeNames":["Fin","Nat.succ"],"name":"SlimCheck.Fin.sampleableExt","className":"SlimCheck.SampleableExt"},{"typeNames":["Int"],"name":"SlimCheck.Int.sampleableExt","className":"SlimCheck.SampleableExt"},{"typeNames":["Bool"],"name":"SlimCheck.Bool.sampleableExt","className":"SlimCheck.SampleableExt"},{"typeNames":["Char"],"name":"SlimCheck.Char.sampleableDefault","className":"SlimCheck.SampleableExt"},{"typeNames":["Prod"],"name":"SlimCheck.Prod.sampleableExt","className":"SlimCheck.SampleableExt"},{"typeNames":["_builtin_prop"],"name":"SlimCheck.Prop.sampleableExt","className":"SlimCheck.SampleableExt"},{"typeNames":["List"],"name":"SlimCheck.List.sampleableExt","className":"SlimCheck.SampleableExt"},{"typeNames":["SlimCheck.NoShrink"],"name":"SlimCheck.NoShrink.inhabited","className":"Inhabited"},{"typeNames":["SlimCheck.NoShrink"],"name":"SlimCheck.NoShrink.repr","className":"Repr"},{"typeNames":["SlimCheck.NoShrink"],"name":"SlimCheck.NoShrink.shrinkable","className":"SlimCheck.Shrinkable"},{"typeNames":["SlimCheck.NoShrink"],"name":"SlimCheck.NoShrink.sampleableExt","className":"SlimCheck.SampleableExt"}],"imports":["Init","Mathlib.Testing.SlimCheck.Gen","Qq"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L289-L329","name":"SlimCheck.«command#sample_»","kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.«command#sample_»","doc":"`#sample type`, where `type` has an instance of `SampleableExt`, prints ten random\nvalues of type `type` using an increasing size parameter.\n\n```lean\n#sample Nat\n-- prints\n-- 0\n-- 0\n-- 2\n-- 24\n-- 64\n-- 76\n-- 5\n-- 132\n-- 8\n-- 449\n-- or some other sequence of numbers\n\n#sample List Int\n-- prints\n-- []\n-- [1, 1]\n-- [-7, 9, -6]\n-- [36]\n-- [-500, 105, 260]\n-- [-290]\n-- [17, 156]\n-- [-2364, -7599, 661, -2411, -3576, 5517, -3823, -968]\n-- [-643]\n-- [11892, 16329, -15095, -15461]\n-- or whatever\n```\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L275-L285","name":"SlimCheck.mkGenerator","kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.mkGenerator","doc":"Create a `Gen α` expression from the argument of `#sample` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L268-L270","name":"SlimCheck.printSamples","kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.printSamples","doc":"Print (at most) 10 samples of a given type to stdout for debugging.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L257-L258","name":"SlimCheck.NoShrink.sampleableExt","kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink.sampleableExt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L254-L255","name":"SlimCheck.NoShrink.shrinkable","kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink.shrinkable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L252-L252","name":"SlimCheck.NoShrink.repr","kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink.repr","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L251-L251","name":"SlimCheck.NoShrink.inhabited","kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink.inhabited","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L249-L249","name":"SlimCheck.NoShrink.get","kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink.get","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L248-L248","name":"SlimCheck.NoShrink.mk","kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L244-L244","name":"SlimCheck.NoShrink","kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink","doc":"An annotation for values that should never get shrinked. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L236-L239","name":"SlimCheck.List.sampleableExt","kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.List.sampleableExt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L229-L234","name":"SlimCheck.Prop.sampleableExt","kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Prop.sampleableExt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L221-L227","name":"SlimCheck.Prod.sampleableExt","kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Prod.sampleableExt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L218-L219","name":"SlimCheck.Char.sampleableDefault","kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Char.sampleableDefault","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L208-L216","name":"SlimCheck.Char.sampleable","kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Char.sampleable","doc":"This can be specialized into customized `SampleableExt Char` instances.\nThe resulting instance has `1 / length` chances of making an unrestricted choice of characters\nand it otherwise chooses a character from `chars` with uniform probabilities.  "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L202-L203","name":"SlimCheck.Bool.sampleableExt","kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Bool.sampleableExt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L197-L200","name":"SlimCheck.Int.sampleableExt","kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Int.sampleableExt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L191-L195","name":"SlimCheck.Fin.sampleableExt","kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Fin.sampleableExt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L188-L189","name":"SlimCheck.Nat.sampleableExt","kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Nat.sampleableExt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L177-L180","name":"SlimCheck.List.shrinkable","kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.List.shrinkable","doc":"Shrink a list of a shrinkable type, either by discarding an element or shrinking an element. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L167-L172","name":"SlimCheck.Prod.shrinkable","kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Prod.shrinkable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L165-L165","name":"SlimCheck.Char.shrinkable","kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Char.shrinkable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L164-L164","name":"SlimCheck.Bool.shrinkable","kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Bool.shrinkable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L161-L162","name":"SlimCheck.Int.shrinkable","kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Int.shrinkable","doc":"`Int.shrinkable` operates like `Nat.shrinkable` but also includes the negative variants. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L157-L158","name":"SlimCheck.Fin.shrinkable","kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Fin.shrinkable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L154-L155","name":"SlimCheck.Nat.shrinkable","kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Nat.shrinkable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L144-L152","name":"SlimCheck.Nat.shrink","kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Nat.shrink","doc":"`Nat.shrink' n` creates a list of smaller natural numbers by\nsuccessively dividing `n` by 2 . For example, `Nat.shrink 5 = [2, 1, 0]`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L135-L136","name":"SlimCheck.SampleableExt.interpSample","kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.interpSample","doc":"First samples a proxy value and interprets it. Especially useful if\nthe proxy and target type are the same. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L126-L131","name":"SlimCheck.SampleableExt.mkSelfContained","kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.mkSelfContained","doc":"Use to generate instance whose purpose is to simply generate values\nof a type directly using the `Gen` monad "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L117-L117","name":"SlimCheck.SampleableExt.interp","kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.interp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L116-L116","name":"SlimCheck.SampleableExt.sample","kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.sample","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L115-L115","name":"SlimCheck.SampleableExt.shrink","kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.shrink","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L114-L114","name":"SlimCheck.SampleableExt.proxyRepr","kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.proxyRepr","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L113-L113","name":"SlimCheck.SampleableExt.proxy","kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.proxy","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L112-L112","name":"SlimCheck.SampleableExt.mk","kind":"ctor","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L112-L117","name":"SlimCheck.SampleableExt","kind":"class","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt","doc":"`SampleableExt` can be used in two ways. The first (and most common)\nis to simply generate values of a type directly using the `Gen` monad,\nif this is what you want to do then `SampleableExt.mkSelfContained` is\nthe way to go.\n\nFurthermore it makes it possible to express generators for types that\ndo not lend themselves to introspection, such as `ℕ → ℕ`.\nIf we test a quantification over functions the\ncounter-examples cannot be shrunken or printed meaningfully.\nFor that purpose, `SampleableExt` provides a proxy representation\n`proxy` that can be printed and shrunken as well\nas interpreted (using `interp`) as an object of the right type. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L98-L98","name":"SlimCheck.Shrinkable.shrink","kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable.shrink","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L97-L97","name":"SlimCheck.Shrinkable.mk","kind":"ctor","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Testing/SlimCheck/Sampleable.lean#L97-L98","name":"SlimCheck.Shrinkable","kind":"class","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable","doc":"Given an example `x : α`, `Shrinkable α` gives us a way to shrink it\nand suggest simpler examples. "}]}