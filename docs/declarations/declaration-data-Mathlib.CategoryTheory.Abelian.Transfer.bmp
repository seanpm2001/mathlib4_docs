{"name":"Mathlib.CategoryTheory.Abelian.Transfer","instances":[],"imports":["Init","Mathlib.CategoryTheory.Abelian.Basic","Mathlib.CategoryTheory.Limits.Preserves.Shapes.Kernels","Mathlib.CategoryTheory.Adjunction.Limits"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Abelian/Transfer.lean#L198-L201","name":"CategoryTheory.abelianOfEquivalence","kind":"def","docLink":"./Mathlib/CategoryTheory/Abelian/Transfer.html#CategoryTheory.abelianOfEquivalence","doc":"If `C` is an additive category equivalent to an abelian category `D`\nvia a functor that preserves zero morphisms,\nthen `C` is also abelian.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Abelian/Transfer.lean#L181-L191","name":"CategoryTheory.abelianOfAdjunction","kind":"def","docLink":"./Mathlib/CategoryTheory/Abelian/Transfer.html#CategoryTheory.abelianOfAdjunction","doc":"If `C` is an additive category, `D` is an abelian category,\nwe have `F : C ‚•§ D` `G : D ‚•§ C` (both preserving zero morphisms),\n`G` is left exact (that is, preserves finite limits),\nand further we have `adj : G ‚ä£ F` and `i : F ‚ãô G ‚âÖ ùü≠ C`,\nthen `C` is also abelian.\n\nSee <https://stacks.math.columbia.edu/tag/03A3>\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Abelian/Transfer.lean#L149-L166","name":"CategoryTheory.AbelianOfAdjunction.coimageIsoImage_hom","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/Transfer.html#CategoryTheory.AbelianOfAdjunction.coimageIsoImage_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Abelian/Transfer.lean#L129-L144","name":"CategoryTheory.AbelianOfAdjunction.coimageIsoImage","kind":"def","docLink":"./Mathlib/CategoryTheory/Abelian/Transfer.html#CategoryTheory.AbelianOfAdjunction.coimageIsoImage","doc":"Auxiliary definition: the abelian coimage and abelian image agree.\nWe still need to check that this agrees with the canonical morphism.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Abelian/Transfer.lean#L100-L121","name":"CategoryTheory.AbelianOfAdjunction.coimageIsoImageAux","kind":"def","docLink":"./Mathlib/CategoryTheory/Abelian/Transfer.html#CategoryTheory.AbelianOfAdjunction.coimageIsoImageAux","doc":"Auxiliary construction for `coimageIsoImage` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Abelian/Transfer.lean#L83-L94","name":"CategoryTheory.AbelianOfAdjunction.cokernelIso","kind":"def","docLink":"./Mathlib/CategoryTheory/Abelian/Transfer.html#CategoryTheory.AbelianOfAdjunction.cokernelIso","doc":"Auxiliary construction for `coimageIsoImage` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Abelian/Transfer.lean#L70-L77","name":"CategoryTheory.AbelianOfAdjunction.hasCokernels","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/Transfer.html#CategoryTheory.AbelianOfAdjunction.hasCokernels","doc":"No point making this an instance, as it requires `i` and `adj`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Abelian/Transfer.lean#L60-L66","name":"CategoryTheory.AbelianOfAdjunction.hasKernels","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/Transfer.html#CategoryTheory.AbelianOfAdjunction.hasKernels","doc":"No point making this an instance, as it requires `i`. "}]}