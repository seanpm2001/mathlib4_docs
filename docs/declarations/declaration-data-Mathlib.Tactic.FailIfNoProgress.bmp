{"name":"Mathlib.Tactic.FailIfNoProgress","instances":[],"imports":["Init","Lean"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/FailIfNoProgress.lean#L50-L60","name":"Mathlib.Tactic.runAndFailIfNoProgress","kind":"def","docLink":"./Mathlib/Tactic/FailIfNoProgress.html#Mathlib.Tactic.runAndFailIfNoProgress","doc":"Run `tacs : TacticM Unit` on `goal`, and fail if no progress is made. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/FailIfNoProgress.lean#L40-L47","name":"Mathlib.Tactic.lctxIsDefEq","kind":"def","docLink":"./Mathlib/Tactic/FailIfNoProgress.html#Mathlib.Tactic.lctxIsDefEq","doc":"`lctxIsDefEq l₁ l₂` compares two lists of `Option LocalDecl`s (as returned from e.g.\n`(← (← getMainGoal).getDecl).lctx.decls.toList`). It returns `true` if they contain expressions of\nthe same type in the same order (up to defeq), and `false` otherwise. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/FailIfNoProgress.lean#L33-L35","name":"Mathlib.Tactic.failIfNoProgress","kind":"def","docLink":"./Mathlib/Tactic/FailIfNoProgress.html#Mathlib.Tactic.failIfNoProgress","doc":"`fail_if_no_progress tacs` evaluates `tacs`, and fails if no progress is made on the main goal\nor the local context at reducible transparency. "}]}