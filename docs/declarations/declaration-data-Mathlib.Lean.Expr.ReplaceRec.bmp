{"name":"Mathlib.Lean.Expr.ReplaceRec","instances":[],"imports":["Init","Lean","Lean.Meta","Std.Util.TermUnsafe","Mathlib.Lean.Expr.Traverse","Mathlib.Util.MemoFix"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/ReplaceRec.lean#L28-L32","name":"Lean.Expr.replaceRec","kind":"def","docLink":"./Mathlib/Lean/Expr/ReplaceRec.html#Lean.Expr.replaceRec","doc":"A version of `Expr.replace` where the replacement function is available to the function `f?`.\n\n`replaceRec f? e` will call `f? r e` where `r = replaceRec f?`.\nIf `f? r e = none` then `r` will be called on each immediate subexpression of `e` and reassembled.\nIf it is `some x`, traversal terminates and `x` is returned.\nIf you wish to recursively replace things in the implementation of `f?`, you can apply `r`.\n\nThe function is also memoised, which means that if the\nsame expression (by reference) is encountered the cached replacement is used. "}]}