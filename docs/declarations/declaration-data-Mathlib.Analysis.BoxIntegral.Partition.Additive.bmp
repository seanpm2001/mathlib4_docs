{"name":"Mathlib.Analysis.BoxIntegral.Partition.Additive","instances":[{"typeNames":["BoxIntegral.BoxAdditiveMap","BoxIntegral.Box","BoxIntegral.Box"],"name":"BoxIntegral.BoxAdditiveMap.instFunLikeBoxAdditiveMapBox","className":"FunLike"},{"typeNames":["BoxIntegral.BoxAdditiveMap"],"name":"BoxIntegral.BoxAdditiveMap.instZeroBoxAdditiveMap","className":"Zero"},{"typeNames":["BoxIntegral.BoxAdditiveMap"],"name":"BoxIntegral.BoxAdditiveMap.instInhabitedBoxAdditiveMap","className":"Inhabited"},{"typeNames":["BoxIntegral.BoxAdditiveMap"],"name":"BoxIntegral.BoxAdditiveMap.instAddBoxAdditiveMap","className":"Add"},{"typeNames":["BoxIntegral.BoxAdditiveMap"],"name":"BoxIntegral.BoxAdditiveMap.instSMulBoxAdditiveMap","className":"SMul"},{"typeNames":["BoxIntegral.BoxAdditiveMap"],"name":"BoxIntegral.BoxAdditiveMap.instAddCommMonoidBoxAdditiveMap","className":"AddCommMonoid"}],"imports":["Init","Mathlib.Analysis.BoxIntegral.Partition.Split","Mathlib.Analysis.NormedSpace.OperatorNorm"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L196-L220","name":"BoxIntegral.BoxAdditiveMap.upperSubLower","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.upperSubLower","doc":"Given a box `I₀` in `ℝⁿ⁺¹`, `f x : Box (Fin n) → G` is a family of functions indexed by a real\n`x` and for `x ∈ [I₀.lower i, I₀.upper i]`, `f x` is box-additive on subboxes of the `i`-th face of\n`I₀`, then `fun J ↦ f (J.upper i) (J.face i) - f (J.lower i) (J.face i)` is box-additive on subboxes\nof `I₀`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L195-L195","name":"BoxIntegral.BoxAdditiveMap.upperSubLower_apply","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.upperSubLower_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L186-L186","name":"BoxIntegral.BoxAdditiveMap.toSMul_apply","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.toSMul_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L181-L182","name":"BoxIntegral.BoxAdditiveMap.toSMul","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.toSMul","doc":"If `f` is a box-additive map, then so is the map sending `I` to the scalar multiplication\nby `f I` as a continuous linear map from `E` to itself. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L156-L172","name":"BoxIntegral.BoxAdditiveMap.sum_boxes_congr","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.sum_boxes_congr","doc":"If `f` is a box additive function on subboxes of `I` and `π₁`, `π₂` are two prepartitions of\n`I` that cover the same part of `I`, then `∑ J in π₁.boxes, f J = ∑ J in π₂.boxes, f J`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L149-L151","name":"BoxIntegral.BoxAdditiveMap.map","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.map","doc":"If `g : M → N` is an additive map and `f` is a box additive map, then `g ∘ f` is a box additive\nmap. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L148-L148","name":"BoxIntegral.BoxAdditiveMap.map_apply","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.map_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L124-L143","name":"BoxIntegral.BoxAdditiveMap.ofMapSplitAdd","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.ofMapSplitAdd","doc":"If `f : Box ι → M` is box additive on partitions of the form `split I i x`, then it is box\nadditive. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L118-L119","name":"BoxIntegral.BoxAdditiveMap.restrict","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.restrict","doc":"If `f` is box-additive on subboxes of `I₀`, then it is box-additive on subboxes of any\n`I ≤ I₀`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L117-L117","name":"BoxIntegral.BoxAdditiveMap.restrict_apply","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.restrict_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L110-L112","name":"BoxIntegral.BoxAdditiveMap.map_split_add","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.map_split_add","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L106-L107","name":"BoxIntegral.BoxAdditiveMap.instAddCommMonoidBoxAdditiveMap","kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.instAddCommMonoidBoxAdditiveMap","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L101-L104","name":"BoxIntegral.BoxAdditiveMap.instSMulBoxAdditiveMap","kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.instSMulBoxAdditiveMap","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L96-L99","name":"BoxIntegral.BoxAdditiveMap.instAddBoxAdditiveMap","kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.instAddBoxAdditiveMap","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L93-L94","name":"BoxIntegral.BoxAdditiveMap.instInhabitedBoxAdditiveMap","kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.instInhabitedBoxAdditiveMap","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L90-L91","name":"BoxIntegral.BoxAdditiveMap.instZeroBoxAdditiveMap","kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.instZeroBoxAdditiveMap","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L89-L89","name":"BoxIntegral.BoxAdditiveMap.instZeroBoxAdditiveMap_zero_apply","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.instZeroBoxAdditiveMap_zero_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L84-L86","name":"BoxIntegral.BoxAdditiveMap.sum_partition_boxes","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.sum_partition_boxes","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L81-L81","name":"BoxIntegral.BoxAdditiveMap.coe_inj","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.coe_inj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L76-L77","name":"BoxIntegral.BoxAdditiveMap.coe_injective","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.coe_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L73-L73","name":"BoxIntegral.BoxAdditiveMap.coe_mk","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.coe_mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L64-L66","name":"BoxIntegral.BoxAdditiveMap.instFunLikeBoxAdditiveMapBox","kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.instFunLikeBoxAdditiveMapBox","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L55-L55","name":"BoxIntegral.«term_→ᵇᵃ[_]_»","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.«term_→ᵇᵃ[_]_»","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L54-L54","name":"BoxIntegral.«term_→ᵇᵃ_»","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.«term_→ᵇᵃ_»","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L50-L50","name":"BoxIntegral.BoxAdditiveMap.sum_partition_boxes'","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.sum_partition_boxes'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L49-L49","name":"BoxIntegral.BoxAdditiveMap.toFun","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.toFun","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L48-L48","name":"BoxIntegral.BoxAdditiveMap.mk","kind":"ctor","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Additive.lean#L48-L51","name":"BoxIntegral.BoxAdditiveMap","kind":"structure","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Additive.html#BoxIntegral.BoxAdditiveMap","doc":"A function on `Box ι` is called box additive if for every box `J` and a partition `π` of `J`\nwe have `f J = ∑ Ji in π.boxes, f Ji`. A function is called box additive on subboxes of `I : Box ι`\nif the same property holds for `J ≤ I`. We formalize these two notions in the same definition\nusing `I : WithBot (Box ι)`: the value `I = ⊤` corresponds to functions box additive on the whole\nspace. "}]}