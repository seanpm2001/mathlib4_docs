{"name":"Mathlib.Tactic.Positivity.Core","instances":[{"typeNames":["Qq.QQ"],"name":"Mathlib.Meta.Positivity.instReprQQ","className":"Repr"},{"typeNames":["Mathlib.Meta.Positivity.Strictness"],"name":"Mathlib.Meta.Positivity.instReprStrictness","className":"Repr"}],"imports":["Init","Std.Lean.Parser","Mathlib.Tactic.NormNum.Core","Mathlib.Tactic.Clear!","Mathlib.Order.Basic","Mathlib.Algebra.Order.Invertible","Mathlib.Algebra.Order.Ring.Defs","Mathlib.Data.Nat.Cast.Basic","Qq"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L356-L371","name":"Mathlib.Tactic.Positivity.positivity","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Tactic.Positivity.positivity","doc":"Tactic solving goals of the form `0 ≤ x`, `0 < x` and `x ≠ 0`.  The tactic works recursively\naccording to the syntax of the expression `x`, if the atoms composing the expression all have\nnumeric lower bounds which can be proved positive/nonnegative/nonzero by `norm_num`.  This tactic\neither closes the goal or fails.\n\nExamples:\n```\nexample {a : ℤ} (ha : 3 < a) : 0 ≤ a ^ 3 + a := by positivity\n\nexample {a : ℤ} (ha : 1 < a) : 0 < |(3:ℤ) + a| := by positivity\n\nexample {b : ℤ} : 0 ≤ max (-3) (b ^ 2) := by positivity\n```\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L314-L348","name":"Mathlib.Meta.Positivity.positivity","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.positivity","doc":"The main entry point to the `positivity` tactic. Given a goal `goal` of the form `0 [≤/</≠] e`,\nattempts to recurse on the structure of `e` to prove the goal.\nIt will either close `goal` or fail. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L283-L300","name":"Mathlib.Meta.Positivity.core","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.core","doc":"Run each registered `positivity` extension on an expression, returning a `NormNum.Result`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L266-L280","name":"Mathlib.Meta.Positivity.orElse","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.orElse","doc":"The main combinator which combines multiple `positivity` results.\nIt assumes `t₁` has already been run for a result, and runs `t₂` and takes the best result.\nIt will skip `t₂` if `t₁` is already a proof of `.positive`, and can also combine\n`.nonnegative` and `.nonzero` to produce a `.positive` result. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L234-L259","name":"Mathlib.Meta.Positivity.compareHyp","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.compareHyp","doc":"A variation on `assumption` which checks if the hypothesis `ldecl` is `a [</≤/=] e`\nwhere `a` is a numeral. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L221-L227","name":"Mathlib.Meta.Positivity.compareHypEq","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.compareHypEq","doc":"A variation on `assumption` when the hypothesis is `a = b` where `a` is a numeral. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L214-L218","name":"Mathlib.Meta.Positivity.compareHypLT","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.compareHypLT","doc":"A variation on `assumption` when the hypothesis is `lo < e` where `lo` is a numeral. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L207-L211","name":"Mathlib.Meta.Positivity.compareHypLE","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.compareHypLE","doc":"A variation on `assumption` when the hypothesis is `lo ≤ e` where `lo` is a numeral. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L202-L204","name":"Mathlib.Meta.Positivity.positivityCanon","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.positivityCanon","doc":"Attempts to prove that `e ≥ 0` using `zero_le` in a `CanonicallyOrderedAddMonoid`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L167-L199","name":"Mathlib.Meta.Positivity.normNumPositivity","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.normNumPositivity","doc":"Attempts to prove a `Strictness` result when `e` evaluates to a literal number. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L160-L164","name":"Mathlib.Meta.Positivity.throwNone","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.throwNone","doc":"Converts a `MetaM Strictness` which can return `.none`\ninto one which never returns `.none` but fails instead. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L152-L155","name":"Mathlib.Meta.Positivity.catchNone","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.catchNone","doc":"Converts a `MetaM Strictness` which can fail\ninto one that never fails and returns `.none` instead. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L140-L147","name":"Mathlib.Meta.Positivity.nz_of_isRat","kind":"theorem","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.nz_of_isRat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L136-L138","name":"Mathlib.Meta.Positivity.nonneg_of_isRat","kind":"theorem","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.nonneg_of_isRat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L128-L134","name":"Mathlib.Meta.Positivity.pos_of_isRat","kind":"theorem","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.pos_of_isRat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L121-L126","name":"Mathlib.Meta.Positivity.nz_of_isNegNat","kind":"theorem","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.nz_of_isNegNat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L116-L119","name":"Mathlib.Meta.Positivity.nonneg_of_isNat","kind":"theorem","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.nonneg_of_isNat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L110-L114","name":"Mathlib.Meta.Positivity.pos_of_isNat","kind":"theorem","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.pos_of_isNat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L107-L108","name":"Mathlib.Meta.Positivity.lt_of_le_of_ne'","kind":"theorem","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.lt_of_le_of_ne'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L67-L81","name":"Mathlib.Meta.Positivity.positivityExt","kind":"opaque","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.positivityExt","doc":"Environment extensions for `positivity` declarations "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L65-L65","name":"Mathlib.Meta.Positivity.Entry","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Entry","doc":"Each `positivity` extension is labelled with a collection of patterns\nwhich determine the expressions to which it should be applied. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L59-L61","name":"Mathlib.Meta.Positivity.mkPositivityExt","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.mkPositivityExt","doc":"Read a `positivity` extension from a declaration of the right type. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L55-L55","name":"Mathlib.Meta.Positivity.PositivityExt.eval","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt.eval","doc":"Attempts to prove an expression `e : α` is `>0`, `≥0`, or `≠0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L53-L56","name":"Mathlib.Meta.Positivity.PositivityExt","kind":"structure","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt","doc":"An extension for `positivity`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L46-L50","name":"Mathlib.Meta.Positivity.Strictness.toString","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness.toString","doc":"Gives a generic description of the `positivity` result. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L43-L43","name":"Mathlib.Meta.Positivity.instReprStrictness","kind":"instance","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.instReprStrictness","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L42-L42","name":"Mathlib.Meta.Positivity.Strictness.none","kind":"ctor","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness.none","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L41-L41","name":"Mathlib.Meta.Positivity.Strictness.nonzero","kind":"ctor","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness.nonzero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L40-L40","name":"Mathlib.Meta.Positivity.Strictness.nonnegative","kind":"ctor","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness.nonnegative","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L39-L39","name":"Mathlib.Meta.Positivity.Strictness.positive","kind":"ctor","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness.positive","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L38-L43","name":"Mathlib.Meta.Positivity.Strictness","kind":"inductive","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness","doc":"The result of `positivity` running on an expression `e` of type `α`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L33-L33","name":"Mathlib.Meta.Positivity.instReprQQ","kind":"instance","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.instReprQQ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L29-L29","name":"ne_of_ne_of_eq'","kind":"theorem","docLink":"./Mathlib/Tactic/Positivity/Core.html#ne_of_ne_of_eq'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L26-L27","name":"positivity","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#positivity","doc":"Attribute for identifying `positivity` extensions. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Core.lean#L1-L1","name":"Mathlib.Meta.Positivity.PositivityExt.mk","kind":"ctor","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt.mk","doc":""}]}