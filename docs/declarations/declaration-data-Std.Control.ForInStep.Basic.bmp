{"name":"Std.Control.ForInStep.Basic","instances":[],"imports":["Init"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Control/ForInStep/Basic.lean#L31-L34","name":"ForInStep.bindList","kind":"def","docLink":"./Std/Control/ForInStep/Basic.html#ForInStep.bindList","doc":"Applies function `f` to each element of a list to accumulate a `ForInStep` value. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Control/ForInStep/Basic.lean#L26-L28","name":"ForInStep.run","kind":"def","docLink":"./Std/Control/ForInStep/Basic.html#ForInStep.run","doc":"Get the value out of a `ForInStep`.\nThis is usually done at the end of a `forIn` loop to scope the early exit to the loop body.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Control/ForInStep/Basic.lean#L19-L20","name":"ForInStep.bindM","kind":"def","docLink":"./Std/Control/ForInStep/Basic.html#ForInStep.bindM","doc":"This is similar to a monadic `bind` operator, except that the two type parameters have to be\nthe same, which prevents putting a monad instance on `ForInStepT m α := m (ForInStep α)`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Control/ForInStep/Basic.lean#L13-L17","name":"ForInStep.bind","kind":"def","docLink":"./Std/Control/ForInStep/Basic.html#ForInStep.bind","doc":"This is similar to a monadic `bind` operator, except that the two type parameters have to be\nthe same, which prevents putting a monad instance on `ForInStepT m α := m (ForInStep α)`.\n"}]}