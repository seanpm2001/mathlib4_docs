{"name":"Std.Data.DList","instances":[{"typeNames":["Std.DList"],"name":"Std.DList.instEmptyCollectionDList","className":"EmptyCollection"},{"typeNames":["Std.DList"],"name":"Std.DList.instAppendDList","className":"Append"}],"imports":["Init"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/DList.lean#L70-L70","name":"Std.DList.instAppendDList","kind":"instance","docLink":"./Std/Data/DList.html#Std.DList.instAppendDList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/DList.lean#L60-L68","name":"Std.DList.push","kind":"def","docLink":"./Std/Data/DList.html#Std.DList.push","doc":"`O(1)` (`apply` is `O(1)`). Append an element at the end of a `DList α`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/DList.lean#L50-L57","name":"Std.DList.append","kind":"def","docLink":"./Std/Data/DList.html#Std.DList.append","doc":"`O(1)` (`apply` is `O(1)`). Append two `DList α`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/DList.lean#L43-L47","name":"Std.DList.cons","kind":"def","docLink":"./Std/Data/DList.html#Std.DList.cons","doc":"`O(1)` (`apply` is `O(1)`). Prepend `a` on a `DList α`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/DList.lean#L38-L40","name":"Std.DList.singleton","kind":"def","docLink":"./Std/Data/DList.html#Std.DList.singleton","doc":"`O(1)` (`apply` is `O(1)`). A `DList α` corresponding to the list `[a]`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/DList.lean#L34-L35","name":"Std.DList.toList","kind":"def","docLink":"./Std/Data/DList.html#Std.DList.toList","doc":"`O(apply())`. Convert a `DList α` into a `List α` by running the `apply` function. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/DList.lean#L31-L31","name":"Std.DList.instEmptyCollectionDList","kind":"instance","docLink":"./Std/Data/DList.html#Std.DList.instEmptyCollectionDList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/DList.lean#L28-L29","name":"Std.DList.empty","kind":"def","docLink":"./Std/Data/DList.html#Std.DList.empty","doc":"`O(1)` (`apply` is `O(1)`). Return an empty `DList α`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/DList.lean#L24-L25","name":"Std.DList.ofList","kind":"def","docLink":"./Std/Data/DList.html#Std.DList.ofList","doc":"`O(1)` (`apply` is `O(|l|)`). Convert a `List α` into a `DList α`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/DList.lean#L17-L17","name":"Std.DList.invariant","kind":"def","docLink":"./Std/Data/DList.html#Std.DList.invariant","doc":"The `apply` function of a `DList` is completely determined by the list `apply []`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/DList.lean#L15-L15","name":"Std.DList.apply","kind":"def","docLink":"./Std/Data/DList.html#Std.DList.apply","doc":"\"Run\" a `DList` by appending it on the right by a `List α` to get another `List α`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/DList.lean#L13-L13","name":"Std.DList.mk","kind":"ctor","docLink":"./Std/Data/DList.html#Std.DList.mk","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/DList.lean#L13-L17","name":"Std.DList","kind":"structure","docLink":"./Std/Data/DList.html#Std.DList","doc":"A difference List is a Function that, given a List, returns the original\ncontents of the difference List prepended to the given List.\nThis structure supports `O(1)` `append` and `concat` operations on lists, making it\nuseful for append-heavy uses such as logging and pretty printing.\n"}]}