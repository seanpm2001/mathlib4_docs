{"name":"Mathlib.Combinatorics.SimpleGraph.Basic","instances":[{"typeNames":["SimpleGraph"],"name":"instFintypeSimpleGraph","className":"Fintype"},{"typeNames":["SimpleGraph"],"name":"SimpleGraph.instLESimpleGraph","className":"LE"},{"typeNames":["SimpleGraph"],"name":"SimpleGraph.instSupSimpleGraph","className":"Sup"},{"typeNames":["SimpleGraph"],"name":"SimpleGraph.instInfSimpleGraph","className":"Inf"},{"typeNames":["SimpleGraph"],"name":"SimpleGraph.hasCompl","className":"HasCompl"},{"typeNames":["SimpleGraph"],"name":"SimpleGraph.sdiff","className":"SDiff"},{"typeNames":["SimpleGraph"],"name":"SimpleGraph.supSet","className":"SupSet"},{"typeNames":["SimpleGraph"],"name":"SimpleGraph.infSet","className":"InfSet"},{"typeNames":["SimpleGraph"],"name":"SimpleGraph.distribLattice","className":"DistribLattice"},{"typeNames":["SimpleGraph"],"name":"SimpleGraph.completeBooleanAlgebra","className":"CompleteBooleanAlgebra"},{"typeNames":["SimpleGraph"],"name":"SimpleGraph.instInhabitedSimpleGraph","className":"Inhabited"},{"typeNames":["SimpleGraph.Adj","Bot.bot","SimpleGraph","CompleteLattice.toBot","Order.Coframe.toCompleteLattice","CompleteDistribLattice.toCoframe","CompleteBooleanAlgebra.toCompleteDistribLattice","SimpleGraph.completeBooleanAlgebra"],"name":"SimpleGraph.Bot.adjDecidable","className":"Decidable"},{"typeNames":["SimpleGraph.Adj","Sup.sup","SimpleGraph","SimpleGraph.instSupSimpleGraph"],"name":"SimpleGraph.Sup.adjDecidable","className":"Decidable"},{"typeNames":["SimpleGraph.Adj","Inf.inf","SimpleGraph","SimpleGraph.instInfSimpleGraph"],"name":"SimpleGraph.Inf.adjDecidable","className":"Decidable"},{"typeNames":["SimpleGraph.Adj","SDiff.sdiff","SimpleGraph","SimpleGraph.sdiff"],"name":"SimpleGraph.Sdiff.adjDecidable","className":"Decidable"},{"typeNames":["SimpleGraph.Adj","Top.top","SimpleGraph","CompleteLattice.toTop","Order.Coframe.toCompleteLattice","CompleteDistribLattice.toCoframe","CompleteBooleanAlgebra.toCompleteDistribLattice","SimpleGraph.completeBooleanAlgebra"],"name":"SimpleGraph.Top.adjDecidable","className":"Decidable"},{"typeNames":["SimpleGraph.Adj","HasCompl.compl","SimpleGraph","SimpleGraph.hasCompl"],"name":"SimpleGraph.Compl.adjDecidable","className":"Decidable"},{"typeNames":["Membership.mem","Set","Set.instMembershipSet","SimpleGraph.neighborSet"],"name":"SimpleGraph.neighborSet.memDecidable","className":"Decidable"},{"typeNames":["Sym2","Membership.mem","Set","Set.instMembershipSet","SimpleGraph.edgeSet"],"name":"SimpleGraph.decidableMemEdgeSet","className":"Decidable"},{"typeNames":["Set.Elem","Sym2","SimpleGraph.edgeSet"],"name":"SimpleGraph.fintypeEdgeSet","className":"Fintype"},{"typeNames":["Set.Elem","Sym2","SimpleGraph.edgeSet","Bot.bot","SimpleGraph","CompleteLattice.toBot","Order.Coframe.toCompleteLattice","CompleteDistribLattice.toCoframe","CompleteBooleanAlgebra.toCompleteDistribLattice","SimpleGraph.completeBooleanAlgebra"],"name":"SimpleGraph.fintypeEdgeSetBot","className":"Fintype"},{"typeNames":["Set.Elem","Sym2","SimpleGraph.edgeSet","Sup.sup","SimpleGraph","SimpleGraph.instSupSimpleGraph"],"name":"SimpleGraph.fintypeEdgeSetSup","className":"Fintype"},{"typeNames":["Set.Elem","Sym2","SimpleGraph.edgeSet","Inf.inf","SimpleGraph","SimpleGraph.instInfSimpleGraph"],"name":"SimpleGraph.fintypeEdgeSetInf","className":"Fintype"},{"typeNames":["Set.Elem","Sym2","SimpleGraph.edgeSet","SDiff.sdiff","SimpleGraph","SimpleGraph.sdiff"],"name":"SimpleGraph.fintypeEdgeSetSdiff","className":"Fintype"},{"typeNames":["Set.Elem","Sym2","SimpleGraph.edgeSet","SimpleGraph.fromEdgeSet"],"name":"SimpleGraph.instFintypeElemSym2EdgeSetFromEdgeSet","className":"Fintype"},{"typeNames":["Eq","SimpleGraph.Dart"],"name":"SimpleGraph.instDecidableEqDart","className":"Decidable"},{"typeNames":["SimpleGraph.Dart"],"name":"SimpleGraph.Dart.fintype","className":"Fintype"},{"typeNames":["SimpleGraph.Dart","Top.top","SimpleGraph","CompleteLattice.toTop","Order.Coframe.toCompleteLattice","CompleteDistribLattice.toCoframe","CompleteBooleanAlgebra.toCompleteDistribLattice","SimpleGraph.completeBooleanAlgebra"],"name":"SimpleGraph.nonempty_dart_top","className":"Nonempty"},{"typeNames":["Sym2","Membership.mem","Set","Set.instMembershipSet","SimpleGraph.incidenceSet"],"name":"SimpleGraph.decidableMemIncidenceSet","className":"Decidable"},{"typeNames":["Membership.mem","Set","Set.instMembershipSet","SimpleGraph.commonNeighbors"],"name":"SimpleGraph.decidableMemCommonNeighbors","className":"Decidable"},{"typeNames":["Set.Elem","Sym2","SimpleGraph.incidenceSet"],"name":"SimpleGraph.incidenceSetFintype","className":"Fintype"},{"typeNames":["Set.Elem","SimpleGraph.neighborSet"],"name":"SimpleGraph.neighborSetFintype","className":"Fintype"}],"imports":["Init","Mathlib.Combinatorics.SimpleGraph.Init","Mathlib.Data.Rel","Mathlib.Data.Set.Finite","Mathlib.Data.Sym.Sym2"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L2022-L2023","name":"SimpleGraph.Iso.coe_comp","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.coe_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L2017-L2018","name":"SimpleGraph.Iso.comp","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.comp","doc":"Composition of graph isomorphisms. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L2009-L2011","name":"SimpleGraph.Iso.toEmbedding_completeGraph","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.toEmbedding_completeGraph","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L2004-L2006","name":"SimpleGraph.Iso.completeGraph","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.completeGraph","doc":"Equivalences of types induce isomorphisms of complete graphs on those types. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1999-L2000","name":"SimpleGraph.Iso.map_symm_apply","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.map_symm_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1994-L1995","name":"SimpleGraph.Iso.map_apply","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.map_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1989-L1990","name":"SimpleGraph.Iso.map","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.map","doc":"Given an injective function, there is an embedding from a graph into the mapped graph. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1982-L1983","name":"SimpleGraph.Iso.comap_symm_apply","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.comap_symm_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1977-L1978","name":"SimpleGraph.Iso.comap_apply","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.comap_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1972-L1973","name":"SimpleGraph.Iso.comap","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.comap","doc":"Given a bijection, there is an embedding from the comapped graph into the original\ngraph. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1962-L1965","name":"SimpleGraph.Iso.card_eq_of_iso","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.card_eq_of_iso","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1952-L1959","name":"SimpleGraph.Iso.mapNeighborSet","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.mapNeighborSet","doc":"A graph isomorphism induces an equivalence of neighbor sets. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1951-L1951","name":"SimpleGraph.Iso.mapNeighborSet_symm_apply_coe","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.mapNeighborSet_symm_apply_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1951-L1951","name":"SimpleGraph.Iso.mapNeighborSet_apply_coe","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.mapNeighborSet_apply_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1934-L1947","name":"SimpleGraph.Iso.mapEdgeSet","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.mapEdgeSet","doc":"An isomorphism of graphs induces an equivalence of edge sets. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1933-L1933","name":"SimpleGraph.Iso.mapEdgeSet_apply","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.mapEdgeSet_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1933-L1933","name":"SimpleGraph.Iso.mapEdgeSet_symm_apply","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.mapEdgeSet_symm_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1928-L1929","name":"SimpleGraph.Iso.apply_mem_neighborSet_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.apply_mem_neighborSet_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1924-L1925","name":"SimpleGraph.Iso.map_mem_edgeSet_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.map_mem_edgeSet_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1920-L1921","name":"SimpleGraph.Iso.map_adj_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.map_adj_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1916-L1917","name":"SimpleGraph.Iso.symm","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.symm","doc":"The inverse of a graph isomorphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1911-L1912","name":"SimpleGraph.Iso.toHom","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.toHom","doc":"An isomorphism of graphs gives rise to a homomorphism of graphs. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1906-L1907","name":"SimpleGraph.Iso.toEmbedding","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.toEmbedding","doc":"An isomorphism of graphs gives rise to an embedding of graphs. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1901-L1902","name":"SimpleGraph.Iso.refl","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso.refl","doc":"The identity isomorphism of a graph with itself. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1888-L1891","name":"SimpleGraph.induceHom_comp","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.induceHom_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1882-L1885","name":"SimpleGraph.induceHom_id","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.induceHom_id","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1878-L1879","name":"SimpleGraph.coe_induceHom","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.coe_induceHom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1873-L1875","name":"SimpleGraph.InduceHom","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.InduceHom","doc":"The restriction of a morphism of graphs to induced subgraphs. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1861-L1862","name":"SimpleGraph.Embedding.coe_comp","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Embedding.coe_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1856-L1857","name":"SimpleGraph.Embedding.comp","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Embedding.comp","doc":"Composition of graph embeddings. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1848-L1850","name":"SimpleGraph.Embedding.completeGraph","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Embedding.completeGraph","doc":"Embeddings of types induce embeddings of complete graphs on those types. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1843-L1844","name":"SimpleGraph.Embedding.spanningCoe","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Embedding.spanningCoe","doc":"Graphs on a set of vertices embed in their `spanningCoe`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1837-L1838","name":"SimpleGraph.Embedding.induce","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Embedding.induce","doc":"Induced graphs embed in the original graph.\n\nNote that if `G.induce s = ⊤` (i.e., if `s` is a clique) then this gives the embedding of a\ncomplete graph. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1828-L1829","name":"SimpleGraph.Embedding.map_apply","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Embedding.map_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1823-L1824","name":"SimpleGraph.Embedding.map","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Embedding.map","doc":"Given an injective function, there is an embedding from a graph into the mapped graph. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1816-L1817","name":"SimpleGraph.Embedding.comap_apply","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Embedding.comap_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1811-L1812","name":"SimpleGraph.Embedding.comap","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Embedding.comap","doc":"Given an injective function, there is an embedding from the comapped graph into the original\ngraph. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1798-L1804","name":"SimpleGraph.Embedding.mapNeighborSet","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Embedding.mapNeighborSet","doc":"A graph embedding induces an embedding of neighbor sets. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1797-L1797","name":"SimpleGraph.Embedding.mapNeighborSet_apply_coe","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Embedding.mapNeighborSet_apply_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1791-L1793","name":"SimpleGraph.Embedding.mapEdgeSet","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Embedding.mapEdgeSet","doc":"A graph embedding induces an embedding of edge sets. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1790-L1790","name":"SimpleGraph.Embedding.mapEdgeSet_apply","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Embedding.mapEdgeSet_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1785-L1786","name":"SimpleGraph.Embedding.apply_mem_neighborSet_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Embedding.apply_mem_neighborSet_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1781-L1782","name":"SimpleGraph.Embedding.map_mem_edgeSet_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Embedding.map_mem_edgeSet_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1777-L1778","name":"SimpleGraph.Embedding.map_adj_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Embedding.map_adj_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1773-L1774","name":"SimpleGraph.Embedding.toHom","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Embedding.toHom","doc":"An embedding of graphs gives rise to a homomorphism of graphs. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1768-L1769","name":"SimpleGraph.Embedding.refl","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Embedding.refl","doc":"The identity embedding from a graph to itself. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1757-L1758","name":"SimpleGraph.Hom.coe_comp","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Hom.coe_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1752-L1753","name":"SimpleGraph.Hom.comp","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Hom.comp","doc":"Composition of graph homomorphisms. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1744-L1746","name":"SimpleGraph.Hom.comap","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Hom.comap","doc":"There is a homomorphism to a graph from a comapped graph.\nWhen the function is injective, this is an embedding (see `SimpleGraph.Embedding.comap`). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1743-L1743","name":"SimpleGraph.Hom.comap_apply","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Hom.comap_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1735-L1738","name":"SimpleGraph.Hom.injective_of_top_hom","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Hom.injective_of_top_hom","doc":"Every graph homomorphism from a complete graph is injective. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1727-L1731","name":"SimpleGraph.Hom.mapEdgeSet.injective","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Hom.mapEdgeSet.injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1722-L1724","name":"SimpleGraph.Hom.mapSpanningSubgraphs","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Hom.mapSpanningSubgraphs","doc":"The induced map for spanning subgraphs, which is the identity on vertices. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1721-L1721","name":"SimpleGraph.Hom.mapSpanningSubgraphs_apply","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Hom.mapSpanningSubgraphs_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1716-L1717","name":"SimpleGraph.Hom.mapDart_apply","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Hom.mapDart_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1711-L1712","name":"SimpleGraph.Hom.mapDart","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Hom.mapDart","doc":"The map between darts induced by a homomorphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1706-L1707","name":"SimpleGraph.Hom.mapNeighborSet","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Hom.mapNeighborSet","doc":"The map between neighbor sets induced by a homomorphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1705-L1705","name":"SimpleGraph.Hom.mapNeighborSet_coe","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Hom.mapNeighborSet_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1700-L1701","name":"SimpleGraph.Hom.mapEdgeSet","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Hom.mapEdgeSet","doc":"The map between edge sets induced by a homomorphism.\nThe underlying map on edges is given by `Sym2.map`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1699-L1699","name":"SimpleGraph.Hom.mapEdgeSet_coe","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Hom.mapEdgeSet_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1693-L1694","name":"SimpleGraph.Hom.apply_mem_neighborSet","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Hom.apply_mem_neighborSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1689-L1690","name":"SimpleGraph.Hom.map_mem_edgeSet","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Hom.map_mem_edgeSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1685-L1686","name":"SimpleGraph.Hom.map_adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Hom.map_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1681-L1682","name":"SimpleGraph.Hom.id","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Hom.id","doc":"The identity homomorphism from a graph to itself. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1674-L1674","name":"SimpleGraph.«term_≃g_»","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.«term_≃g_»","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1671-L1671","name":"SimpleGraph.«term_↪g_»","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.«term_↪g_»","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1668-L1668","name":"SimpleGraph.«term_→g_»","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.«term_→g_»","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1663-L1664","name":"SimpleGraph.Iso","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso","doc":"A graph isomorphism is a bijective map on vertex sets that respects adjacency relations.\n\nThe notation `G ≃g G'` represents the type of graph isomorphisms.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1655-L1656","name":"SimpleGraph.Embedding","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Embedding","doc":"A graph embedding is an embedding `f` such that for vertices `v w : V`,\n`G.Adj (f v) (f w) ↔ G.Adj v w `. Its image is an induced subgraph of G'.\n\nThe notation `G ↪g G'` represents the type of graph embeddings. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1647-L1648","name":"SimpleGraph.Hom","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Hom","doc":"A graph homomorphism is a map on vertex sets that respects adjacency relations.\n\nThe notation `G →g G'` represents the type of graph homomorphisms. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1632-L1637","name":"SimpleGraph.card_commonNeighbors_top","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.card_commonNeighbors_top","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1615-L1629","name":"SimpleGraph.Adj.card_commonNeighbors_lt_degree","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj.card_commonNeighbors_lt_degree","doc":"If the condition `G.Adj v w` fails, then `card_commonNeighbors_le_degree` is\nthe best we can do in general. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1608-L1610","name":"SimpleGraph.card_commonNeighbors_lt_card_verts","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.card_commonNeighbors_lt_card_verts","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1603-L1605","name":"SimpleGraph.card_commonNeighbors_le_degree_right","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.card_commonNeighbors_le_degree_right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1597-L1600","name":"SimpleGraph.card_commonNeighbors_le_degree_left","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.card_commonNeighbors_le_degree_left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1590-L1594","name":"SimpleGraph.maxDegree_lt_card_verts","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.maxDegree_lt_card_verts","doc":"The maximum degree of a nonempty graph is less than the number of vertices. Note that the assumption\nthat `V` is nonempty is necessary, as otherwise this would assert the existence of a\nnatural number less than zero. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1579-L1583","name":"SimpleGraph.degree_lt_card_verts","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.degree_lt_card_verts","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1567-L1576","name":"SimpleGraph.maxDegree_le_of_forall_degree_le","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.maxDegree_le_of_forall_degree_le","doc":"In a graph, if `k` is at least the degree of every vertex, then it is at least the maximum\ndegree. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1559-L1562","name":"SimpleGraph.degree_le_maxDegree","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.degree_le_maxDegree","doc":"The maximum degree in the graph is at least the degree of any particular vertex. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1547-L1555","name":"SimpleGraph.exists_maximal_degree_vertex","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.exists_maximal_degree_vertex","doc":"There exists a vertex of maximal degree. Note the assumption of being nonempty is necessary, as\nthe lemma implies there exists a vertex. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1541-L1542","name":"SimpleGraph.maxDegree","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.maxDegree","doc":"The maximum degree of all vertices (and `0` if there are no vertices).\nThe key properties of this are given in `exists_maximal_degree_vertex`, `degree_le_maxDegree`\nand `maxDegree_le_of_forall_degree_le`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1531-L1535","name":"SimpleGraph.le_minDegree_of_forall_le_degree","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.le_minDegree_of_forall_le_degree","doc":"In a nonempty graph, if `k` is at most the degree of every vertex, it is at most the minimum\ndegree. Note the assumption that the graph is nonempty is necessary as long as `G.minDegree` is\ndefined to be a natural. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1522-L1525","name":"SimpleGraph.minDegree_le_degree","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.minDegree_le_degree","doc":"The minimum degree in the graph is at most the degree of any particular vertex. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1514-L1518","name":"SimpleGraph.exists_minimal_degree_vertex","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.exists_minimal_degree_vertex","doc":"There exists a vertex of minimal degree. Note the assumption of being nonempty is necessary, as\nthe lemma implies there exists a vertex. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1508-L1509","name":"SimpleGraph.minDegree","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.minDegree","doc":"The minimum degree of all vertices (and `0` if there are no vertices).\nThe key properties of this are given in `exists_minimal_degree_vertex`, `minDegree_le_degree`\nand `le_minDegree_of_forall_le_degree`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1499-L1502","name":"SimpleGraph.IsRegularOfDegree.top","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.IsRegularOfDegree.top","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1494-L1496","name":"SimpleGraph.bot_degree","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.bot_degree","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1489-L1491","name":"SimpleGraph.complete_graph_degree","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.complete_graph_degree","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1482-L1485","name":"SimpleGraph.neighborFinset_compl","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborFinset_compl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1476-L1479","name":"SimpleGraph.neighborFinset_eq_filter","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborFinset_eq_filter","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1468-L1473","name":"SimpleGraph.neighborSetFintype","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSetFintype","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1456-L1459","name":"SimpleGraph.IsRegularOfDegree.compl","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.IsRegularOfDegree.compl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1452-L1453","name":"SimpleGraph.IsRegularOfDegree.degree_eq","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.IsRegularOfDegree.degree_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1446-L1447","name":"SimpleGraph.IsRegularOfDegree","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.IsRegularOfDegree","doc":"A locally finite simple graph is regular of degree `d` if every vertex has degree `d`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1439-L1440","name":"SimpleGraph.LocallyFinite","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.LocallyFinite","doc":"A graph is locally finite if every vertex has a finite neighbor set. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1426-L1430","name":"SimpleGraph.incidenceFinset_eq_filter","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.incidenceFinset_eq_filter","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1421-L1423","name":"SimpleGraph.mem_incidenceFinset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.mem_incidenceFinset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1414-L1417","name":"SimpleGraph.card_incidenceFinset_eq_degree","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.card_incidenceFinset_eq_degree","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1407-L1410","name":"SimpleGraph.card_incidenceSet_eq_degree","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.card_incidenceSet_eq_degree","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1402-L1403","name":"SimpleGraph.incidenceFinset","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.incidenceFinset","doc":"This is the `Finset` version of `incidenceSet`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1397-L1398","name":"SimpleGraph.incidenceSetFintype","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.incidenceSetFintype","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1390-L1394","name":"SimpleGraph.degree_compl","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.degree_compl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1386-L1387","name":"SimpleGraph.degree_pos_iff_exists_adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.degree_pos_iff_exists_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1382-L1383","name":"SimpleGraph.card_neighborSet_eq_degree","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.card_neighborSet_eq_degree","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1379-L1379","name":"SimpleGraph.card_neighborFinset_eq_degree","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.card_neighborFinset_eq_degree","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1370-L1371","name":"SimpleGraph.degree","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.degree","doc":"`G.degree v` is the number of vertices adjacent to `v`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1365-L1366","name":"SimpleGraph.singleton_disjoint_neighborFinset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.singleton_disjoint_neighborFinset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1361-L1362","name":"SimpleGraph.neighborFinset_disjoint_singleton","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborFinset_disjoint_singleton","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1358-L1358","name":"SimpleGraph.not_mem_neighborFinset_self","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.not_mem_neighborFinset_self","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1354-L1355","name":"SimpleGraph.mem_neighborFinset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.mem_neighborFinset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1349-L1350","name":"SimpleGraph.neighborFinset_def","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborFinset_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1345-L1346","name":"SimpleGraph.neighborFinset","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborFinset","doc":"`G.neighbors v` is the `Finset` version of `G.Adj v` in case `G` is\nlocally finite at `v`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1324-L1325","name":"SimpleGraph.spanningCoe_induce_le","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.spanningCoe_induce_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1320-L1321","name":"SimpleGraph.induce_spanningCoe","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.induce_spanningCoe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1316-L1317","name":"SimpleGraph.spanningCoe","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.spanningCoe","doc":"Given a graph on a set of vertices, we can make it be a `SimpleGraph V` by\nadding in the remaining vertices without adding in any additional edges.\nThis is a wrapper around `SimpleGraph.map`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1308-L1309","name":"SimpleGraph.induce","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.induce","doc":"Restrict a graph to the vertices in the set `s`, deleting all edges incident to vertices\noutside the set. This is a wrapper around `SimpleGraph.comap`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1295-L1296","name":"SimpleGraph.map_comap_le","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.map_comap_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1288-L1292","name":"SimpleGraph.map_le_iff_le_comap","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.map_le_iff_le_comap","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1284-L1285","name":"SimpleGraph.comap_surjective","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.comap_surjective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1280-L1281","name":"SimpleGraph.map_injective","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.map_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1275-L1277","name":"SimpleGraph.leftInverse_comap_map","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.leftInverse_comap_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1270-L1272","name":"SimpleGraph.comap_map_eq","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.comap_map_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1264-L1266","name":"SimpleGraph.comap_monotone","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.comap_monotone","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1258-L1261","name":"SimpleGraph.comap","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.comap","doc":"Given a function, there is a contravariant induced map on graphs by pulling back the\nadjacency relation.\nThis is one of the ways of creating induced graphs. See `SimpleGraph.induce` for a wrapper.\n\nThis is surjective when `f` is injective (see `SimpleGraph.comap_surjective`)."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1257-L1257","name":"SimpleGraph.comap_Adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.comap_Adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1247-L1249","name":"SimpleGraph.map_monotone","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.map_monotone","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1242-L1244","name":"SimpleGraph.map_adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.map_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1231-L1238","name":"SimpleGraph.map","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.map","doc":"Given an injective function, there is a covariant induced map on graphs by pushing forward\nthe adjacency relation.\n\nThis is injective (see `SimpleGraph.map_injective`). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1218-L1219","name":"SimpleGraph.DeleteFar.mono","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.DeleteFar.mono","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1215-L1215","name":"SimpleGraph.DeleteFar.le_card_sub_card","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.DeleteFar.le_card_sub_card","doc":"**Alias** of the forward direction of `SimpleGraph.deleteFar_iff`."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1204-L1212","name":"SimpleGraph.deleteFar_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.deleteFar_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1196-L1197","name":"SimpleGraph.DeleteFar","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.DeleteFar","doc":"A graph is `r`-*delete-far* from a property `p` if we must delete at least `r` edges from it to\nget a graph with the property `p`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1181-L1185","name":"SimpleGraph.edgeFinset_deleteEdges","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeFinset_deleteEdges","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1173-L1176","name":"SimpleGraph.edgeSet_deleteEdges","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet_deleteEdges","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1167-L1170","name":"SimpleGraph.deleteEdges_sdiff_eq_of_le","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.deleteEdges_sdiff_eq_of_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1161-L1164","name":"SimpleGraph.deleteEdges_eq_inter_edgeSet","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.deleteEdges_eq_inter_edgeSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1155-L1158","name":"SimpleGraph.deleteEdges_le_of_le","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.deleteEdges_le_of_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1150-L1152","name":"SimpleGraph.deleteEdges_le","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.deleteEdges_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1145-L1147","name":"SimpleGraph.deleteEdges_univ_eq","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.deleteEdges_univ_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1139-L1141","name":"SimpleGraph.deleteEdges_empty_eq","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.deleteEdges_empty_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1132-L1135","name":"SimpleGraph.deleteEdges_deleteEdges","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.deleteEdges_deleteEdges","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1126-L1128","name":"SimpleGraph.compl_eq_deleteEdges","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.compl_eq_deleteEdges","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1120-L1123","name":"SimpleGraph.deleteEdges_eq_sdiff_fromEdgeSet","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.deleteEdges_eq_sdiff_fromEdgeSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1115-L1117","name":"SimpleGraph.sdiff_eq_deleteEdges","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.sdiff_eq_deleteEdges","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1110-L1112","name":"SimpleGraph.deleteEdges_adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.deleteEdges_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1102-L1106","name":"SimpleGraph.deleteEdges","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.deleteEdges","doc":"Given a set of vertex pairs, remove all of the corresponding edges from the\ngraph's edge set, if present.\n\nSee also: `SimpleGraph.Subgraph.deleteEdges`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1083-L1090","name":"SimpleGraph.incidenceSetEquivNeighborSet","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.incidenceSetEquivNeighborSet","doc":"There is an equivalence between the set of edges incident to a given\nvertex and the set of vertices adjacent to the vertex. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1082-L1082","name":"SimpleGraph.incidenceSetEquivNeighborSet_apply_coe","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.incidenceSetEquivNeighborSet_apply_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1082-L1082","name":"SimpleGraph.incidenceSetEquivNeighborSet_symm_apply_coe","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.incidenceSetEquivNeighborSet_symm_apply_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1075-L1077","name":"SimpleGraph.incidence_other_neighbor_edge","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.incidence_other_neighbor_edge","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1068-L1071","name":"SimpleGraph.incidence_other_prop","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.incidence_other_prop","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1062-L1065","name":"SimpleGraph.edge_other_incident_set","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edge_other_incident_set","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1058-L1059","name":"SimpleGraph.otherVertexOfIncident","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.otherVertexOfIncident","doc":"Given an edge incident to a particular vertex, get the other vertex on the edge. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1047-L1050","name":"SimpleGraph.commonNeighbors_top_eq","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.commonNeighbors_top_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1042-L1044","name":"SimpleGraph.decidableMemCommonNeighbors","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.decidableMemCommonNeighbors","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1037-L1039","name":"SimpleGraph.commonNeighbors_subset_neighborSet_right","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.commonNeighbors_subset_neighborSet_right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1032-L1034","name":"SimpleGraph.commonNeighbors_subset_neighborSet_left","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.commonNeighbors_subset_neighborSet_left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1028-L1029","name":"SimpleGraph.not_mem_commonNeighbors_right","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.not_mem_commonNeighbors_right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1024-L1025","name":"SimpleGraph.not_mem_commonNeighbors_left","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.not_mem_commonNeighbors_left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1020-L1021","name":"SimpleGraph.commonNeighbors_symm","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.commonNeighbors_symm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1016-L1017","name":"SimpleGraph.mem_commonNeighbors","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.mem_commonNeighbors","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1012-L1013","name":"SimpleGraph.commonNeighbors_eq","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.commonNeighbors_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1008-L1009","name":"SimpleGraph.commonNeighbors","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.commonNeighbors","doc":"The set of common neighbors between two vertices `v` and `w` in a graph `G` is the\nintersection of the neighbor sets of `v` and `w`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1000-L1003","name":"SimpleGraph.neighborSet_compl","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet_compl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L993-L997","name":"SimpleGraph.card_neighborSet_union_compl_neighborSet","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.card_neighborSet_union_compl_neighborSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L985-L990","name":"SimpleGraph.neighborSet_union_compl_neighborSet_eq","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet_union_compl_neighborSet_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L977-L982","name":"SimpleGraph.compl_neighborSet_disjoint","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.compl_neighborSet_disjoint","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L966-L974","name":"SimpleGraph.adj_incidenceSet_inter","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.adj_incidenceSet_inter","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L962-L963","name":"SimpleGraph.mem_incidence_iff_neighbor","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.mem_incidence_iff_neighbor","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L958-L959","name":"SimpleGraph.mem_incidenceSet","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.mem_incidenceSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L953-L954","name":"SimpleGraph.mem_neighborSet","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.mem_neighborSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L946-L947","name":"SimpleGraph.edgeSet_univ_card","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet_univ_card","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L941-L942","name":"SimpleGraph.edgeFinset_card","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeFinset_card","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L937-L938","name":"SimpleGraph.edgeFinset_sdiff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeFinset_sdiff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L932-L933","name":"SimpleGraph.edgeFinset_inf","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeFinset_inf","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L927-L928","name":"SimpleGraph.edgeFinset_sup","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeFinset_sup","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L923-L923","name":"SimpleGraph.edgeFinset_bot","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeFinset_bot","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L917-L917","name":"SimpleGraph.edgeFinset_strict_mono","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeFinset_strict_mono","doc":"**Alias** of the reverse direction of `SimpleGraph.edgeFinset_ssubset_edgeFinset`."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L914-L914","name":"SimpleGraph.edgeFinset_mono","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeFinset_mono","doc":"**Alias** of the reverse direction of `SimpleGraph.edgeFinset_subset_edgeFinset`."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L911-L911","name":"SimpleGraph.edgeFinset_ssubset_edgeFinset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeFinset_ssubset_edgeFinset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L908-L908","name":"SimpleGraph.edgeFinset_subset_edgeFinset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeFinset_subset_edgeFinset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L905-L905","name":"SimpleGraph.edgeFinset_inj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeFinset_inj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L901-L902","name":"SimpleGraph.not_isDiag_of_mem_edgeFinset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.not_isDiag_of_mem_edgeFinset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L897-L898","name":"SimpleGraph.mem_edgeFinset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.mem_edgeFinset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L891-L892","name":"SimpleGraph.coe_edgeFinset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.coe_edgeFinset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L886-L887","name":"SimpleGraph.edgeFinset","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeFinset","doc":"The `edgeSet` of the graph as a `Finset`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L875-L877","name":"SimpleGraph.decidableMemIncidenceSet","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.decidableMemIncidenceSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L868-L872","name":"SimpleGraph.incidenceSet_inter_incidenceSet_of_not_adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.incidenceSet_inter_incidenceSet_of_not_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L862-L865","name":"SimpleGraph.adj_of_mem_incidenceSet","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.adj_of_mem_incidenceSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L855-L859","name":"SimpleGraph.incidenceSet_inter_incidenceSet_of_adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.incidenceSet_inter_incidenceSet_of_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L850-L852","name":"SimpleGraph.incidenceSet_inter_incidenceSet_subset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.incidenceSet_inter_incidenceSet_subset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L846-L847","name":"SimpleGraph.edge_mem_incidenceSet_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edge_mem_incidenceSet_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L842-L843","name":"SimpleGraph.mk'_mem_incidenceSet_right_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.mk'_mem_incidenceSet_right_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L838-L839","name":"SimpleGraph.mk'_mem_incidenceSet_left_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.mk'_mem_incidenceSet_left_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L834-L835","name":"SimpleGraph.mk'_mem_incidenceSet_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.mk'_mem_incidenceSet_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L831-L831","name":"SimpleGraph.incidenceSet_subset","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.incidenceSet_subset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L827-L828","name":"SimpleGraph.incidenceSet","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.incidenceSet","doc":"Set of edges incident to a given vertex, aka incidence set. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L816-L818","name":"SimpleGraph.nonempty_dart_top","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.nonempty_dart_top","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L809-L813","name":"SimpleGraph.dartOfNeighborSet_injective","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.dartOfNeighborSet_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L805-L806","name":"SimpleGraph.dartOfNeighborSet","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.dartOfNeighborSet","doc":"For a given vertex `v`, this is the bijective map from the neighbor set at `v`\nto the darts `d` with `d.fst = v`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L804-L804","name":"SimpleGraph.dartOfNeighborSet_toProd","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.dartOfNeighborSet_toProd","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L798-L799","name":"SimpleGraph.DartAdj","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.DartAdj","doc":"Two darts are said to be adjacent if they could be consecutive\ndarts in a walk -- that is, the first dart's second vertex is equal to\nthe second dart's first vertex. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L785-L790","name":"SimpleGraph.dart_edge_eq_mk'_iff'","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.dart_edge_eq_mk'_iff'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L779-L782","name":"SimpleGraph.dart_edge_eq_mk'_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.dart_edge_eq_mk'_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L774-L776","name":"SimpleGraph.dart_edge_eq_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.dart_edge_eq_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L770-L771","name":"SimpleGraph.Dart.symm_ne","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Dart.symm_ne","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L766-L767","name":"SimpleGraph.Dart.symm_involutive","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Dart.symm_involutive","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L761-L762","name":"SimpleGraph.Dart.symm_symm","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Dart.symm_symm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L756-L757","name":"SimpleGraph.Dart.edge_comp_symm","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Dart.edge_comp_symm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L751-L752","name":"SimpleGraph.Dart.edge_symm","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Dart.edge_symm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L746-L747","name":"SimpleGraph.Dart.symm_mk","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Dart.symm_mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L741-L742","name":"SimpleGraph.Dart.symm","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Dart.symm","doc":"The dart with reversed orientation from a given dart. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L740-L740","name":"SimpleGraph.Dart.symm_toProd","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Dart.symm_toProd","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L735-L736","name":"SimpleGraph.Dart.edge_mem","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Dart.edge_mem","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L730-L731","name":"SimpleGraph.Dart.edge_mk","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Dart.edge_mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L725-L726","name":"SimpleGraph.Dart.edge","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Dart.edge","doc":"The edge associated to the dart. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L716-L721","name":"SimpleGraph.Dart.fintype","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Dart.fintype","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L712-L713","name":"SimpleGraph.Dart.toProd_injective","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Dart.toProd_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L705-L706","name":"SimpleGraph.Dart.ext","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Dart.ext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L700-L701","name":"SimpleGraph.Dart.ext_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Dart.ext_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L691-L691","name":"SimpleGraph.instDecidableEqDart","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.instDecidableEqDart","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L690-L690","name":"SimpleGraph.Dart.is_adj","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Dart.is_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L689-L691","name":"SimpleGraph.Dart","kind":"structure","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Dart","doc":"A `Dart` is an oriented edge, implemented as an ordered pair of adjacent vertices.\nThis terminology comes from combinatorial maps, and they are also known as \"half-edges\"\nor \"bonds.\" "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L678-L680","name":"SimpleGraph.instFintypeElemSym2EdgeSetFromEdgeSet","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.instFintypeElemSym2EdgeSetFromEdgeSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L671-L675","name":"SimpleGraph.fromEdgeSet_mono","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.fromEdgeSet_mono","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L664-L667","name":"SimpleGraph.fromEdgeSet_sdiff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.fromEdgeSet_sdiff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L657-L660","name":"SimpleGraph.fromEdgeSet_sup","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.fromEdgeSet_sup","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L649-L653","name":"SimpleGraph.fromEdgeSet_inf","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.fromEdgeSet_inf","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L643-L645","name":"SimpleGraph.fromEdgeSet_univ","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.fromEdgeSet_univ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L637-L639","name":"SimpleGraph.fromEdgeSet_empty","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.fromEdgeSet_empty","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L631-L633","name":"SimpleGraph.fromEdgeSet_edgeSet","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.fromEdgeSet_edgeSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L625-L627","name":"SimpleGraph.edgeSet_fromEdgeSet","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet_fromEdgeSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L618-L619","name":"SimpleGraph.fromEdgeSet_adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.fromEdgeSet_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L612-L614","name":"SimpleGraph.fromEdgeSet","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.fromEdgeSet","doc":"`fromEdgeSet` constructs a `SimpleGraph` from a set of edges, without loops. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L599-L602","name":"SimpleGraph.fintypeEdgeSetSdiff","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.fintypeEdgeSetSdiff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L593-L596","name":"SimpleGraph.fintypeEdgeSetInf","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.fintypeEdgeSetInf","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L587-L590","name":"SimpleGraph.fintypeEdgeSetSup","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.fintypeEdgeSetSup","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L582-L584","name":"SimpleGraph.fintypeEdgeSetBot","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.fintypeEdgeSetBot","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L578-L579","name":"SimpleGraph.fintypeEdgeSet","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.fintypeEdgeSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L574-L575","name":"SimpleGraph.decidableMemEdgeSet","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.decidableMemEdgeSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L568-L571","name":"SimpleGraph.edge_other_ne","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edge_other_ne","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L564-L565","name":"SimpleGraph.adj_iff_exists_edge_coe","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.adj_iff_exists_edge_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L556-L561","name":"SimpleGraph.adj_iff_exists_edge","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.adj_iff_exists_edge","doc":"Two vertices are adjacent iff there is an edge between them. The\ncondition `v ≠ w` ensures they are different endpoints of the edge,\nwhich is necessary since when `v = w` the existential\n`∃ (e ∈ G.edgeSet), v ∈ e ∧ w ∈ e` is satisfied by every edge\nincident to `v`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L543-L548","name":"SimpleGraph.edgeSet_sdiff_sdiff_isDiag","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet_sdiff_sdiff_isDiag","doc":"This lemma, combined with `edgeSet_sdiff` and `edgeSet_from_edgeSet`,\nallows proving `(G \\ from_edgeSet s).edge_set = G.edgeSet \\ s` by `simp`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L535-L537","name":"SimpleGraph.edgeSet_sdiff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet_sdiff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L529-L531","name":"SimpleGraph.edgeSet_inf","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet_inf","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L523-L525","name":"SimpleGraph.edgeSet_sup","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet_sup","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L518-L519","name":"SimpleGraph.edgeSet_bot","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet_bot","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L510-L510","name":"SimpleGraph.edgeSet_strict_mono","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet_strict_mono","doc":"**Alias** of the reverse direction of `SimpleGraph.edgeSet_ssubset_edgeSet`."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L507-L507","name":"SimpleGraph.edgeSet_mono","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet_mono","doc":"**Alias** of the reverse direction of `SimpleGraph.edgeSet_subset_edgeSet`."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L503-L504","name":"SimpleGraph.edgeSet_injective","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L499-L500","name":"SimpleGraph.edgeSet_ssubset_edgeSet","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet_ssubset_edgeSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L494-L495","name":"SimpleGraph.edgeSet_subset_edgeSet","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet_subset_edgeSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L490-L490","name":"SimpleGraph.edgeSet_inj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet_inj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L486-L487","name":"SimpleGraph.not_isDiag_of_mem_edgeSet","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.not_isDiag_of_mem_edgeSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L482-L483","name":"SimpleGraph.mem_edgeSet","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.mem_edgeSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L477-L477","name":"SimpleGraph.edgeSet","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet","doc":"`G.edgeSet` is the edge set for `G`.\nThis is an abbreviation for `edgeSetEmbedding G` that permits dot notation. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L471-L473","name":"SimpleGraph.edgeSetEmbedding","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSetEmbedding","doc":"The edges of G consist of the unordered pairs of vertices related by\n`G.Adj`. This is the order embedding; for the edge set of a particular graph, see\n`SimpleGraph.edgeSet`.\n\nThe way `edgeSet` is defined is such that `mem_edgeSet` is proved by `refl`.\n(That is, `⟦(v, w)⟧ ∈ G.edgeSet` is definitionally equal to `G.Adj v w`.)\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L454-L456","name":"SimpleGraph.neighborSet.memDecidable","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet.memDecidable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L451-L451","name":"SimpleGraph.neighborSet","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet","doc":"`G.neighborSet v` is the set of vertices adjacent to `v` in `G`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L446-L447","name":"SimpleGraph.support_mono","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.support_mono","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L442-L443","name":"SimpleGraph.mem_support","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.mem_support","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L438-L439","name":"SimpleGraph.support","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.support","doc":"`G.support` is the set of vertices that form edges in `G`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L429-L430","name":"SimpleGraph.Compl.adjDecidable","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Compl.adjDecidable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L425-L426","name":"SimpleGraph.Top.adjDecidable","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Top.adjDecidable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L419-L420","name":"SimpleGraph.Sdiff.adjDecidable","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Sdiff.adjDecidable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L415-L416","name":"SimpleGraph.Inf.adjDecidable","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Inf.adjDecidable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L411-L412","name":"SimpleGraph.Sup.adjDecidable","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Sup.adjDecidable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L407-L408","name":"SimpleGraph.Bot.adjDecidable","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Bot.adjDecidable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L400-L401","name":"SimpleGraph.instInhabitedSimpleGraph","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.instInhabitedSimpleGraph","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L399-L399","name":"SimpleGraph.instInhabitedSimpleGraph_default","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.instInhabitedSimpleGraph_default","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L395-L396","name":"SimpleGraph.emptyGraph_eq_bot","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.emptyGraph_eq_bot","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L390-L391","name":"SimpleGraph.completeGraph_eq_top","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.completeGraph_eq_top","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L385-L386","name":"SimpleGraph.bot_adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.bot_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L380-L381","name":"SimpleGraph.top_adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.top_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L346-L377","name":"SimpleGraph.completeBooleanAlgebra","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.completeBooleanAlgebra","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L341-L344","name":"SimpleGraph.distribLattice","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.distribLattice","doc":"For graphs `G`, `H`, `G ≤ H` iff `∀ a b, G.Adj a b → H.Adj a b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L335-L337","name":"SimpleGraph.iInf_adj_of_nonempty","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.iInf_adj_of_nonempty","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L327-L332","name":"SimpleGraph.sInf_adj_of_nonempty","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.sInf_adj_of_nonempty","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L323-L324","name":"SimpleGraph.iInf_adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.iInf_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L319-L319","name":"SimpleGraph.iSup_adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.iSup_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L314-L315","name":"SimpleGraph.sInf_adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.sInf_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L309-L310","name":"SimpleGraph.sSup_adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.sSup_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L302-L306","name":"SimpleGraph.infSet","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.infSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L294-L300","name":"SimpleGraph.supSet","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.supSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L290-L291","name":"SimpleGraph.sdiff_adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.sdiff_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L284-L287","name":"SimpleGraph.sdiff","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.sdiff","doc":"The difference of two graphs `x \\ y` has the edges of `x` with the edges of `y` removed. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L279-L280","name":"SimpleGraph.compl_adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.compl_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L272-L276","name":"SimpleGraph.hasCompl","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.hasCompl","doc":"We define `Gᶜ` to be the `SimpleGraph V` such that no two adjacent vertices in `G`\nare adjacent in the complement, and every nonadjacent pair of vertices is adjacent\n(still ensuring that vertices are not adjacent to themselves). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L265-L266","name":"SimpleGraph.inf_adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.inf_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L259-L262","name":"SimpleGraph.instInfSimpleGraph","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.instInfSimpleGraph","doc":"The infimum of two graphs `x ⊓ y` has edges where both `x` and `y` have edges. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L254-L255","name":"SimpleGraph.sup_adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.sup_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L248-L251","name":"SimpleGraph.instSupSimpleGraph","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.instSupSimpleGraph","doc":"The supremum of two graphs `x ⊔ y` has edges where either `x` or `y` have edges. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L243-L244","name":"SimpleGraph.isSubgraph_eq_le","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.isSubgraph_eq_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L239-L240","name":"SimpleGraph.instLESimpleGraph","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.instLESimpleGraph","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L235-L236","name":"SimpleGraph.IsSubgraph","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.IsSubgraph","doc":"The relation that one `SimpleGraph` is a subgraph of another.\nNote that this should be spelled `≤`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L227-L228","name":"SimpleGraph.adj_inj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.adj_inj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L222-L223","name":"SimpleGraph.adj_injective","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.adj_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L218-L219","name":"SimpleGraph.ne_of_adj_of_not_adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.ne_of_adj_of_not_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L214-L215","name":"SimpleGraph.Adj.ne'","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj.ne'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L210-L211","name":"SimpleGraph.Adj.ne","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj.ne","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L205-L207","name":"SimpleGraph.ne_of_adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.ne_of_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L201-L202","name":"SimpleGraph.Adj.symm","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj.symm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L197-L198","name":"SimpleGraph.adj_symm","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.adj_symm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L192-L193","name":"SimpleGraph.adj_comm","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.adj_comm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L188-L189","name":"SimpleGraph.irrefl","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.irrefl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L171-L179","name":"completeBipartiteGraph","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#completeBipartiteGraph","doc":"Two vertices are adjacent in the complete bipartite graph on two vertex types\nif and only if they are not from the same side.\nBipartite graphs in general may be regarded as being subgraphs of one of these.\n\nTODO also introduce complete multi-partite graphs, where the vertex type is a sigma type of an\nindexed family of vertex types\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L170-L170","name":"completeBipartiteGraph_Adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#completeBipartiteGraph_Adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L160-L160","name":"emptyGraph","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#emptyGraph","doc":"The graph with no edges on a given vertex type `V`. `Mathlib` prefers the notation `⊥`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L156-L156","name":"completeGraph","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#completeGraph","doc":"The complete graph on a type `V` is the simple graph with all pairs of distinct vertices\nadjacent. In `Mathlib`, this is usually referred to as `⊤`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L145-L147","name":"SimpleGraph.fromRel_adj","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.fromRel_adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L137-L141","name":"SimpleGraph.fromRel","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.fromRel","doc":"Construct the simple graph induced by the given relation. It\nsymmetrizes the relation and makes it irreflexive. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L132-L133","name":"instFintypeSimpleGraph","kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#instFintypeSimpleGraph","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L128-L128","name":"SimpleGraph.loopless","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.loopless","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L127-L127","name":"SimpleGraph.symm","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.symm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L126-L126","name":"SimpleGraph.Adj","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L125-L125","name":"SimpleGraph.mk","kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L125-L128","name":"SimpleGraph","kind":"structure","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph","doc":"A simple graph is an irreflexive symmetric relation `Adj` on a vertex type `V`.\nThe relation describes which pairs of vertices are adjacent.\nThere is exactly one edge for every pair of adjacent vertices;\nsee `SimpleGraph.edgeSet` for the corresponding edge set.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L124-L124","name":"SimpleGraph.ext_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.ext_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L124-L124","name":"SimpleGraph.ext","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.ext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L109-L113","name":"aesop_graph_nonterminal","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#aesop_graph_nonterminal","doc":"A variant of `aesop_graph` which does not fail if it is unable to solve the\ngoal. Use this only for exploration! Nonterminal Aesop is even worse than\nnonterminal `simp`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L98-L102","name":"aesop_graph","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#aesop_graph","doc":"A variant of the `aesop` tactic for use in the graph library. Changes relative\nto standard `aesop`:\n\n- We use the `SimpleGraph` rule set in addition to the default rule sets.\n- We instruct Aesop's `intro` rule to unfold with `default` transparency.\n- We instruct Aesop to fail if it can't fully solve the goal. This allows us to\n  use `aesop_graph` for auto-params.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L1-L1","name":"SimpleGraph.Dart.mk","kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Dart.mk","doc":""}]}