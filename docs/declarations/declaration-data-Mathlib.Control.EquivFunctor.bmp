{"name":"Mathlib.Control.EquivFunctor","instances":[{"typeNames":[],"name":"EquivFunctor.ofLawfulFunctor","className":"EquivFunctor"}],"imports":["Init","Mathlib.Logic.Equiv.Defs"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/EquivFunctor.lean#L104-L109","name":"EquivFunctor.mapEquiv.injective","kind":"theorem","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv.injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/EquivFunctor.lean#L93-L101","name":"EquivFunctor.ofLawfulFunctor","kind":"instance","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.ofLawfulFunctor","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/EquivFunctor.lean#L86-L88","name":"EquivFunctor.mapEquiv_trans","kind":"theorem","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv_trans","doc":"The composition of `mapEquiv`s is carried over the `EquivFunctor`.\nFor plain `Functor`s, this lemma is named `map_map` when applied\nor `map_comp_map` when not applied.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/EquivFunctor.lean#L77-L78","name":"EquivFunctor.mapEquiv_symm","kind":"theorem","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv_symm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/EquivFunctor.lean#L72-L73","name":"EquivFunctor.mapEquiv_refl","kind":"theorem","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv_refl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/EquivFunctor.lean#L67-L68","name":"EquivFunctor.mapEquiv_symm_apply","kind":"theorem","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv_symm_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/EquivFunctor.lean#L63-L64","name":"EquivFunctor.mapEquiv_apply","kind":"theorem","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/EquivFunctor.lean#L51-L59","name":"EquivFunctor.mapEquiv","kind":"def","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv","doc":"An `EquivFunctor` in fact takes every equiv to an equiv. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/EquivFunctor.lean#L39-L39","name":"EquivFunctor.map_trans'","kind":"def","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.map_trans'","doc":"`map` is functorial on equivalences. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/EquivFunctor.lean#L37-L37","name":"EquivFunctor.map_refl'","kind":"def","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.map_refl'","doc":"`map` of `f` preserves the identity morphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/EquivFunctor.lean#L35-L35","name":"EquivFunctor.map","kind":"def","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.map","doc":"The action of `f` on isomorphisms. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/EquivFunctor.lean#L33-L33","name":"EquivFunctor.mk","kind":"ctor","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/EquivFunctor.lean#L33-L39","name":"EquivFunctor","kind":"class","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor","doc":"An `EquivFunctor` is only functorial with respect to equivalences.\n\nTo construct an `EquivFunctor`, it suffices to supply just the function `f α → f β` from\nan equivalence `α ≃ β`, and then prove the functor laws. It's then a consequence that\nthis function is part of an equivalence, provided by `EquivFunctor.mapEquiv`.\n"}]}