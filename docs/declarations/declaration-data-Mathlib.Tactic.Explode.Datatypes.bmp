{"name":"Mathlib.Tactic.Explode.Datatypes","instances":[{"typeNames":["Mathlib.Explode.Status"],"name":"Mathlib.Explode.instInhabitedStatus","className":"Inhabited"},{"typeNames":["Mathlib.Explode.Entries"],"name":"Mathlib.Explode.instInhabitedEntries","className":"Inhabited"}],"imports":["Init","Lean"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L85-L86","name":"Mathlib.Explode.Entries.addSynonym","kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.addSynonym","doc":"Add a pre-existing entry to the `ExprMap` for an additional expression.\nThis is used by `let` bindings where `expr` is an fvar. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L76-L81","name":"Mathlib.Explode.Entries.add","kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.add","doc":"Add the entry unless it already exists. Sets the `line` field to the next\navailable value. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L71-L72","name":"Mathlib.Explode.Entries.size","kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.size","doc":"Length of our entries. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L67-L68","name":"Mathlib.Explode.Entries.find?","kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.find?","doc":"Find a row where `Entry.expr` == `e`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L64-L64","name":"Mathlib.Explode.instInhabitedEntries","kind":"instance","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.instInhabitedEntries","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L63-L63","name":"Mathlib.Explode.Entries.l","kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.l","doc":"Simple list of `Expr`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L61-L61","name":"Mathlib.Explode.Entries.s","kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.s","doc":"Allows us to compare `Expr`s fast. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L59-L64","name":"Mathlib.Explode.Entries","kind":"structure","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries","doc":"Instead of simply keeping a list of entries (`List Entry`), we create a datatype `Entries`\nthat allows us to compare expressions faster. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L55-L55","name":"Mathlib.Explode.Entry.line!","kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.line!","doc":"Get the `line` for an `Entry` that has been added to the `Entries` structure. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L52-L52","name":"Mathlib.Explode.Entry.useAsDep","kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.useAsDep","doc":"Whether or not to use this in future deps lists. Generally controlled by the `select` function\npassed to `explodeCore`. Exception: `∀I` may ignore this for introduced hypotheses. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L49-L49","name":"Mathlib.Explode.Entry.deps","kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.deps","doc":"Which other lines (aka rows) this row depends on.\n`none` means that the dependency has been filtered out of the table. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L46-L46","name":"Mathlib.Explode.Entry.thm","kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.thm","doc":"What to display in the \"theorem applied\" column.\nMake sure to use `addMessageContext` if needed. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L43-L43","name":"Mathlib.Explode.Entry.status","kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.status","doc":"What `Status` this entry has - this only affects how `│`s are displayed. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L41-L41","name":"Mathlib.Explode.Entry.depth","kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.depth","doc":"How many `if`s (aka lambda-abstractions) this row is nested under. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L39-L39","name":"Mathlib.Explode.Entry.line","kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.line","doc":"The row number, starting from `0`. This is set by `Entries.add`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L37-L37","name":"Mathlib.Explode.Entry.type","kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.type","doc":"A type of this expression as a `MessageData`. Make sure to use `addMessageContext`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L35-L52","name":"Mathlib.Explode.Entry","kind":"structure","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry","doc":"The row in the Fitch table. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L32-L32","name":"Mathlib.Explode.instInhabitedStatus","kind":"instance","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.instInhabitedStatus","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L30-L31","name":"Mathlib.Explode.Status.reg","kind":"ctor","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.reg","doc":"`Entry.depth` * `│` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L28-L29","name":"Mathlib.Explode.Status.lam","kind":"ctor","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.lam","doc":"`Entry.depth` * `│` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L26-L27","name":"Mathlib.Explode.Status.cintro","kind":"ctor","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.cintro","doc":"`Entry.depth` * `│` + `├` Continuation intro "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L24-L25","name":"Mathlib.Explode.Status.intro","kind":"ctor","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.intro","doc":"`Entry.depth` * `│` + `┌` Normal intro "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L22-L23","name":"Mathlib.Explode.Status.sintro","kind":"ctor","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.sintro","doc":"`├` Start intro (top-level) "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L21-L32","name":"Mathlib.Explode.Status","kind":"inductive","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status","doc":"How to display pipes (`│`) for this entry in the Fitch table . "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L1-L1","name":"Mathlib.Explode.Entries.mk","kind":"ctor","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Explode/Datatypes.lean#L1-L1","name":"Mathlib.Explode.Entry.mk","kind":"ctor","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.mk","doc":""}]}