{"name":"Mathlib.CategoryTheory.Subobject.Comma","instances":[{"typeNames":["CategoryTheory.StructuredArrow","CategoryTheory.instCategoryStructuredArrow"],"name":"CategoryTheory.StructuredArrow.wellPowered_structuredArrow","className":"CategoryTheory.WellPowered"},{"typeNames":["Opposite","CategoryTheory.CostructuredArrow","CategoryTheory.Category.opposite","CategoryTheory.CostructuredArrow","CategoryTheory.instCategoryCostructuredArrow"],"name":"CategoryTheory.CostructuredArrow.well_copowered_costructuredArrow","className":"CategoryTheory.WellPowered"}],"imports":["Init","Mathlib.CategoryTheory.Subobject.WellPowered","Mathlib.CategoryTheory.Limits.Preserves.Finite","Mathlib.CategoryTheory.Limits.Shapes.FiniteLimits"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Subobject/Comma.lean#L240-L242","name":"CategoryTheory.CostructuredArrow.well_copowered_costructuredArrow","kind":"instance","docLink":"./Mathlib/CategoryTheory/Subobject/Comma.html#CategoryTheory.CostructuredArrow.well_copowered_costructuredArrow","doc":"If `C` is well-copowered and cocomplete and `S` preserves colimits, then\n`CostructuredArrow S T` is well-copowered. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Subobject/Comma.lean#L212-L235","name":"CategoryTheory.CostructuredArrow.quotientEquiv","kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/Comma.html#CategoryTheory.CostructuredArrow.quotientEquiv","doc":"If `A : S.obj B ⟶ T` is a costructured arrow for `S : C ⥤ D` and `T : D`, then we can\nexplicitly describe the quotients of `A` as the quotients `P` of `B` in `C` for which `A.hom`\nfactors through the image of `P` under `S`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Subobject/Comma.lean#L198-L206","name":"CategoryTheory.CostructuredArrow.unop_left_comp_ofMkLEMk_unop","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/Comma.html#CategoryTheory.CostructuredArrow.unop_left_comp_ofMkLEMk_unop","doc":"Technical lemma for `quotientEquiv`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Subobject/Comma.lean#L183-L194","name":"CategoryTheory.CostructuredArrow.lift_projectQuotient","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/Comma.html#CategoryTheory.CostructuredArrow.lift_projectQuotient","doc":"Projecting and then lifting a quotient recovers the original quotient, because there is at most\none morphism making the projected quotient into a costructured arrow. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Subobject/Comma.lean#L171-L178","name":"CategoryTheory.CostructuredArrow.unop_left_comp_underlyingIso_hom_unop","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/Comma.html#CategoryTheory.CostructuredArrow.unop_left_comp_underlyingIso_hom_unop","doc":"Technical lemma for `lift_projectQuotient`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Subobject/Comma.lean#L164-L166","name":"CategoryTheory.CostructuredArrow.liftQuotient","kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/Comma.html#CategoryTheory.CostructuredArrow.liftQuotient","doc":"A quotient of the underlying object of a costructured arrow can be lifted to a quotient of\nthe costructured arrow, provided that there is a morphism making the quotient into a\ncostructured arrow. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Subobject/Comma.lean#L151-L157","name":"CategoryTheory.CostructuredArrow.projectQuotient_factors","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/Comma.html#CategoryTheory.CostructuredArrow.projectQuotient_factors","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Subobject/Comma.lean#L145-L148","name":"CategoryTheory.CostructuredArrow.projectQuotient_mk","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/Comma.html#CategoryTheory.CostructuredArrow.projectQuotient_mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Subobject/Comma.lean#L135-L141","name":"CategoryTheory.CostructuredArrow.projectQuotient","kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/Comma.html#CategoryTheory.CostructuredArrow.projectQuotient","doc":"Every quotient of a costructured arrow can be projected to a quotient of the underlying\nobject. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Subobject/Comma.lean#L122-L124","name":"CategoryTheory.StructuredArrow.wellPowered_structuredArrow","kind":"instance","docLink":"./Mathlib/CategoryTheory/Subobject/Comma.html#CategoryTheory.StructuredArrow.wellPowered_structuredArrow","doc":"If `C` is well-powered and complete and `T` preserves limits, then `StructuredArrow S T` is\nwell-powered. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Subobject/Comma.lean#L102-L117","name":"CategoryTheory.StructuredArrow.subobjectEquiv","kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/Comma.html#CategoryTheory.StructuredArrow.subobjectEquiv","doc":"If `A : S → T.obj B` is a structured arrow for `S : D` and `T : C ⥤ D`, then we can explicitly\ndescribe the subobjects of `A` as the subobjects `P` of `B` in `C` for which `A.hom` factors\nthrough the image of `P` under `T`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Subobject/Comma.lean#L101-L101","name":"CategoryTheory.StructuredArrow.subobjectEquiv_symm_apply","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/Comma.html#CategoryTheory.StructuredArrow.subobjectEquiv_symm_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Subobject/Comma.lean#L101-L101","name":"CategoryTheory.StructuredArrow.subobjectEquiv_apply_coe","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/Comma.html#CategoryTheory.StructuredArrow.subobjectEquiv_apply_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Subobject/Comma.lean#L85-L95","name":"CategoryTheory.StructuredArrow.lift_projectSubobject","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/Comma.html#CategoryTheory.StructuredArrow.lift_projectSubobject","doc":"Projecting and then lifting a subobject recovers the original subobject, because there is at\nmost one morphism making the projected subobject into a structured arrow. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Subobject/Comma.lean#L78-L80","name":"CategoryTheory.StructuredArrow.liftSubobject","kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/Comma.html#CategoryTheory.StructuredArrow.liftSubobject","doc":"A subobject of the underlying object of a structured arrow can be lifted to a subobject of\nthe structured arrow, provided that there is a morphism making the subobject into a structured\narrow. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Subobject/Comma.lean#L66-L71","name":"CategoryTheory.StructuredArrow.projectSubobject_factors","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/Comma.html#CategoryTheory.StructuredArrow.projectSubobject_factors","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Subobject/Comma.lean#L61-L63","name":"CategoryTheory.StructuredArrow.projectSubobject_mk","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/Comma.html#CategoryTheory.StructuredArrow.projectSubobject_mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Subobject/Comma.lean#L52-L57","name":"CategoryTheory.StructuredArrow.projectSubobject","kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/Comma.html#CategoryTheory.StructuredArrow.projectSubobject","doc":"Every subobject of a structured arrow can be projected to a subobject of the underlying\nobject. "}]}