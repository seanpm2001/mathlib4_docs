{"name":"Std.CodeAction.Misc","instances":[],"imports":["Init","Std.Lean.Name","Std.Lean.Position","Std.CodeAction.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Misc.lean#L361-L364","name":"Std.CodeAction.addSubgoalsAction","kind":"def","docLink":"./Std/CodeAction/Misc.html#Std.CodeAction.addSubgoalsAction","doc":"The \"Add subgoals\" code action puts `· done` subgoals for any goals remaining at the end of a\nproof.\n```\nexample : True ∧ True := by\n  constructor\n  -- <- here\n```\nis transformed to\n```\nexample : True ∧ True := by\n  constructor\n  · done\n  · done\n```\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Misc.lean#L355-L355","name":"Std.CodeAction.addSubgoalsSeqAction","kind":"def","docLink":"./Std/CodeAction/Misc.html#Std.CodeAction.addSubgoalsSeqAction","doc":"The \"Add subgoals\" code action puts `· done` subgoals for any goals remaining at the end of a\nproof.\n```\nexample : True ∧ True := by\n  constructor\n  -- <- here\n```\nis transformed to\n```\nexample : True ∧ True := by\n  constructor\n  · done\n  · done\n```\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Misc.lean#L312-L352","name":"Std.CodeAction.addSubgoalsActionCore","kind":"def","docLink":"./Std/CodeAction/Misc.html#Std.CodeAction.addSubgoalsActionCore","doc":"The \"Add subgoals\" code action puts `· done` subgoals for any goals remaining at the end of a\nproof.\n```\nexample : True ∧ True := by\n  constructor\n  -- <- here\n```\nis transformed to\n```\nexample : True ∧ True := by\n  constructor\n  · done\n  · done\n```\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Misc.lean#L252-L295","name":"Std.CodeAction.casesExpand","kind":"def","docLink":"./Std/CodeAction/Misc.html#Std.CodeAction.casesExpand","doc":"Invoking tactic code action \"Generate an explicit pattern match for 'induction'\" in the\nfollowing:\n```lean\nexample (x : Nat) : x = x := by\n  induction x\n```\nproduces:\n```lean\nexample (x : Nat) : x = x := by\n  induction x with\n  | zero => sorry\n  | succ n ih => sorry\n```\n\nIt also works for `cases`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Misc.lean#L217-L232","name":"Std.CodeAction.getElimNames","kind":"def","docLink":"./Std/CodeAction/Misc.html#Std.CodeAction.getElimNames","doc":"Similar to `getElabInfo`, but returns the names of binders instead of just the numbers;\nintended for code actions which need to name the binders.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Misc.lean#L195-L211","name":"Std.CodeAction.removeAfterDoneAction","kind":"def","docLink":"./Std/CodeAction/Misc.html#Std.CodeAction.removeAfterDoneAction","doc":"The \"Remove tactics after 'no goals'\" code action deletes any tactics following a completed\nproof.\n```\nexample : True := by\n  trivial\n  trivial -- <- remove this, proof is already done\n  rfl\n```\nis transformed to\n```\nexample : True := by\n  trivial\n```\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Misc.lean#L167-L178","name":"Std.CodeAction.startTacticStub","kind":"def","docLink":"./Std/CodeAction/Misc.html#Std.CodeAction.startTacticStub","doc":"Invoking hole code action \"Start a tactic proof\" will fill in a hole with `by done`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Misc.lean#L134-L164","name":"Std.CodeAction.eqnStub","kind":"def","docLink":"./Std/CodeAction/Misc.html#Std.CodeAction.eqnStub","doc":"Invoking hole code action \"Generate a list of equations for a recursive definition\" in the\nfollowing:\n```lean\ndef foo : Expr → Unit := _\n```\n\nproduces:\n\n```lean\ndef foo : Expr → Unit := fun\n  | .bvar deBruijnIndex => _\n  | .fvar fvarId => _\n  | .mvar mvarId => _\n  | .sort u => _\n  | .const declName us => _\n  | .app fn arg => _\n  | .lam binderName binderType body binderInfo => _\n  | .forallE binderName binderType body binderInfo => _\n  | .letE declName type value body nonDep => _\n  | .lit _ => _\n  | .mdata data expr => _\n  | .proj typeName idx struct => _\n```\n\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Misc.lean#L103-L106","name":"Std.CodeAction.getExplicitArgs","kind":"def","docLink":"./Std/CodeAction/Misc.html#Std.CodeAction.getExplicitArgs","doc":"Returns the explicit arguments given a type. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Misc.lean#L96-L100","name":"Std.CodeAction.instanceStub.collectFields","kind":"opaque","docLink":"./Std/CodeAction/Misc.html#Std.CodeAction.instanceStub.collectFields","doc":"Returns the fields of a structure, unfolding parent structures. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Misc.lean#L52-L100","name":"Std.CodeAction.instanceStub","kind":"def","docLink":"./Std/CodeAction/Misc.html#Std.CodeAction.instanceStub","doc":"Hole code action used to fill in a structure's field when specifying an instance.\n\nIn the following:\n```lean\ninstance : Monad Id := _\n```\n\ninvoking the hole code action \"Generate a skeleton for the structure under construction.\" produces:\n```lean\ninstance : Monad Id := {\n  map := _\n  mapConst := _\n  pure := _\n  seq := _\n  seqLeft := _\n  seqRight := _\n  bind := _\n}\n```\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Misc.lean#L26-L29","name":"Std.CodeAction.holeKindToHoleString","kind":"def","docLink":"./Std/CodeAction/Misc.html#Std.CodeAction.holeKindToHoleString","doc":"Constructs a hole with a kind matching the provided hole elaborator.  "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Misc.lean#L20-L23","name":"Std.CodeAction.findStack?","kind":"def","docLink":"./Std/CodeAction/Misc.html#Std.CodeAction.findStack?","doc":"Return the syntax stack leading to `target` from `root`, if one exists. "}]}