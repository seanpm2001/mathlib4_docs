{"name":"Mathlib.Tactic.DeriveFintype","instances":[],"imports":["Init","Mathlib.Tactic.ProxyType","Mathlib.Data.Fintype.Basic","Mathlib.Data.Fintype.Sigma","Mathlib.Data.Fintype.Sum"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/DeriveFintype.lean#L178-L186","name":"Mathlib.Deriving.Fintype.mkFintypeInstanceHandler","kind":"def","docLink":"./Mathlib/Tactic/DeriveFintype.html#Mathlib.Deriving.Fintype.mkFintypeInstanceHandler","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/DeriveFintype.lean#L113-L176","name":"Mathlib.Deriving.Fintype.mkFintypeEnum","kind":"def","docLink":"./Mathlib/Tactic/DeriveFintype.html#Mathlib.Deriving.Fintype.mkFintypeEnum","doc":"Derive a `Fintype` instance for enum types. These come with a `toCtorIdx` function.\n\nWe generate a more optimized instance than the one produced by `mkFintype`.\nThe strategy is to (1) create a list `enumList` of all the constructors, (2) prove that this\nis in `toCtorIdx` order, (3) show that `toCtorIdx` maps `enumList` to `List.range numCtors` to show\nthe list has no duplicates, and (4) give the `Fintype` instance, using 2 for completeness.\n\nThe proofs are all linear complexity, and the main computation is that\n`enumList.map toCtorIdx = List.range numCtors`, which is true by `refl`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/DeriveFintype.lean#L91-L102","name":"Mathlib.Deriving.Fintype.mkFintype","kind":"def","docLink":"./Mathlib/Tactic/DeriveFintype.html#Mathlib.Deriving.Fintype.mkFintype","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/DeriveFintype.lean#L85-L85","name":"Mathlib.Deriving.Fintype.«termDerive_fintype%_»","kind":"def","docLink":"./Mathlib/Tactic/DeriveFintype.html#Mathlib.Deriving.Fintype.«termDerive_fintype%_»","doc":"The term elaborator `derive_fintype% α` tries to synthesize a `Fintype α` instance\nusing all the assumptions in the local context; this can be useful, for example, if one\nneeds an extra `DecidableEq` instance. It works only if `α` is an inductive\ntype that `proxy_equiv% α` can handle. The elaborator makes use of the\nexpected type, so `(derive_fintype% _ : Fintype α)` works.\n\nThis uses `proxy_equiv% α`, so as a side effect it defines `proxyType` and `proxyTypeEquiv` in\nthe namespace associated to the inductive type `α`.\n"}]}