{"name":"Mathlib.Algebra.Group.InjSurj","instances":[],"imports":["Init","Mathlib.Algebra.Group.Defs","Mathlib.Logic.Function.Basic","Mathlib.Data.Int.Cast.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L524-L531","name":"Function.Surjective.addCommGroupWithOne","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.addCommGroupWithOne","doc":"A type endowed with `0`, `1`, `+` is an additive commutative group with one, if it admits a\nsurjective map that preserves `0`, `1`, and `+` to an additive commutative group with one.\nSee note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L512-L516","name":"Function.Surjective.commGroup","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.commGroup","doc":"A type endowed with `1`, `*`, `⁻¹`, and `/` is a commutative group, if it admits a surjective\nmap that preserves `1`, `*`, `⁻¹`, and `/` from a commutative group. See note\n[reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L509-L511","name":"Function.Surjective.addCommGroup","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.addCommGroup","doc":"A type endowed with `0` and `+` is an additive commutative group, if it\nadmits a surjective map that preserves `0` and `+` to an additive commutative group."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L492-L503","name":"Function.Surjective.addGroupWithOne","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.addGroupWithOne","doc":"A type endowed with `0`, `1`, `+` is an additive group with one,\nif it admits a surjective map that preserves `0`, `1`, and `+` to an additive group with one.\nSee note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L479-L484","name":"Function.Surjective.group","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.group","doc":"A type endowed with `1`, `*` and `⁻¹` is a group, if it admits a surjective map that preserves\n`1`, `*` and `⁻¹` to a group. See note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L476-L478","name":"Function.Surjective.addGroup","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.addGroup","doc":"A type endowed with `0` and `+` is an additive group, if it admits a\nsurjective map that preserves `0` and `+` to an additive group."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L476-L478","name":"Function.Surjective.addGroup.proof_1","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.addGroup.proof_1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L457-L470","name":"Function.Surjective.divInvMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.divInvMonoid","doc":"A type endowed with `1`, `*`, `⁻¹`, and `/` is a `DivInvMonoid` if it admits a surjective map\nthat preserves `1`, `*`, `⁻¹`, and `/` to a `DivInvMonoid`. See note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L453-L456","name":"Function.Surjective.subNegMonoid.proof_1","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.subNegMonoid.proof_1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L453-L456","name":"Function.Surjective.subNegMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.subNegMonoid","doc":"A type endowed with `0`, `+`, unary `-`, and binary `-` is a\n`SubNegMonoid` if it admits a surjective map that preserves `0`, `+`, unary `-`, and binary `-` to\na `SubNegMonoid`."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L453-L456","name":"Function.Surjective.subNegMonoid.proof_2","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.subNegMonoid.proof_2","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L453-L456","name":"Function.Surjective.subNegMonoid.proof_3","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.subNegMonoid.proof_3","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L453-L456","name":"Function.Surjective.subNegMonoid.proof_4","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.subNegMonoid.proof_4","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L442-L445","name":"Function.Surjective.involutiveInv","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.involutiveInv","doc":"A type has an involutive inversion if it admits a surjective map that preserves `⁻¹` to a type\nwhich has an involutive inversion. See note [reducible non-instances] "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L439-L441","name":"Function.Surjective.involutiveNeg","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.involutiveNeg","doc":"A type has an involutive negation if it admits a surjective map that\npreserves `-` to a type which has an involutive negation."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L439-L441","name":"Function.Surjective.involutiveNeg.proof_1","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.involutiveNeg.proof_1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L430-L434","name":"Function.Surjective.addCommMonoidWithOne","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.addCommMonoidWithOne","doc":"A type endowed with `0`, `1` and `+` is an additive monoid with one,\nif it admits a surjective map that preserves `0`, `1` and `*` from an additive monoid with one.\nSee note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L419-L422","name":"Function.Surjective.commMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.commMonoid","doc":"A type endowed with `1` and `*` is a commutative monoid, if it admits a surjective map that\npreserves `1` and `*` from a commutative monoid. See note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L416-L418","name":"Function.Surjective.addCommMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.addCommMonoid","doc":"A type endowed with `0` and `+` is an additive commutative monoid, if it\nadmits a surjective map that preserves `0` and `+` to an additive commutative monoid."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L403-L411","name":"Function.Surjective.addMonoidWithOne","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.addMonoidWithOne","doc":"A type endowed with `0`, `1` and `+` is an additive monoid with one, if it admits a surjective\nmap that preserves `0`, `1` and `*` from an additive monoid with one. See note\n[reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L390-L395","name":"Function.Surjective.monoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.monoid","doc":"A type endowed with `1` and `*` is a monoid, if it admits a surjective map that preserves `1`\nand `*` to a monoid. See note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L386-L389","name":"Function.Surjective.addMonoid.proof_2","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.addMonoid.proof_2","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L386-L389","name":"Function.Surjective.addMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.addMonoid","doc":"A type endowed with `0` and `+` is an additive monoid, if it admits a\nsurjective map that preserves `0` and `+` to an additive monoid. This version takes a custom `nsmul`\nas a `[SMul ℕ M₂]` argument."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L386-L389","name":"Function.Surjective.addMonoid.proof_1","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.addMonoid.proof_1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L374-L378","name":"Function.Surjective.mulOneClass","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.mulOneClass","doc":"A type endowed with `1` and `*` is a `MulOneClass`, if it admits a surjective map that preserves\n`1` and `*` from a `MulOneClass`. See note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L371-L373","name":"Function.Surjective.addZeroClass.proof_2","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.addZeroClass.proof_2","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L371-L373","name":"Function.Surjective.addZeroClass.proof_1","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.addZeroClass.proof_1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L371-L373","name":"Function.Surjective.addZeroClass","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.addZeroClass","doc":"A type endowed with `0` and `+` is an `AddZeroClass`, if it admits a\nsurjective map that preserves `0` and `+` to an `AddZeroClass`."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L360-L363","name":"Function.Surjective.commSemigroup","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.commSemigroup","doc":"A type endowed with `*` is a commutative semigroup, if it admits a surjective map that preserves\n`*` from a commutative semigroup. See note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L357-L359","name":"Function.Surjective.addCommSemigroup","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.addCommSemigroup","doc":"A type endowed with `+` is an additive commutative semigroup, if it admits\na surjective map that preserves `+` from an additive commutative semigroup."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L357-L359","name":"Function.Surjective.addCommSemigroup.proof_1","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.addCommSemigroup.proof_1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L349-L351","name":"Function.Surjective.semigroup","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.semigroup","doc":"A type endowed with `*` is a semigroup, if it admits a surjective map that preserves `*` from a\nsemigroup. See note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L346-L348","name":"Function.Surjective.addSemigroup.proof_1","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.addSemigroup.proof_1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L346-L348","name":"Function.Surjective.addSemigroup","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Surjective.addSemigroup","doc":"A type endowed with `+` is an additive semigroup, if it admits a\nsurjective map that preserves `+` from an additive semigroup."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L323-L330","name":"Function.Injective.addCommGroupWithOne","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addCommGroupWithOne","doc":"A type endowed with `0`, `1` and `+` is an additive commutative group with one, if it admits an\ninjective map that preserves `0`, `1` and `+` to an additive commutative group with one.\nSee note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L311-L315","name":"Function.Injective.commGroup","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.commGroup","doc":"A type endowed with `1`, `*` and `⁻¹` is a commutative group, if it admits an injective map that\npreserves `1`, `*` and `⁻¹` to a commutative group. See note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L308-L310","name":"Function.Injective.addCommGroup","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addCommGroup","doc":"A type endowed with `0` and `+` is an additive commutative group, if it\nadmits an injective map that preserves `0` and `+` to an additive commutative group."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L293-L303","name":"Function.Injective.addGroupWithOne","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addGroupWithOne","doc":"A type endowed with `0`, `1` and `+` is an additive group with one, if it admits an injective\nmap that preserves `0`, `1` and `+` to an additive group with one.  See note\n[reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L280-L285","name":"Function.Injective.group","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.group","doc":"A type endowed with `1`, `*` and `⁻¹` is a group, if it admits an injective map that preserves\n`1`, `*` and `⁻¹` to a group. See note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L277-L279","name":"Function.Injective.addGroup.proof_1","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addGroup.proof_1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L277-L279","name":"Function.Injective.addGroup","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addGroup","doc":"A type endowed with `0` and `+` is an additive group, if it admits an\ninjective map that preserves `0` and `+` to an additive group."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L267-L271","name":"Function.Injective.divisionCommMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.divisionCommMonoid","doc":"A type endowed with `1`, `*`, `⁻¹`, and `/` is a `DivisionCommMonoid` if it admits an\ninjective map that preserves `1`, `*`, `⁻¹`, and `/` to a `DivisionCommMonoid`.\nSee note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L262-L266","name":"Function.Injective.subtractionCommMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.subtractionCommMonoid","doc":"A type endowed with `0`, `+`, unary `-`, and binary\n`-` is a `SubtractionCommMonoid` if it admits an injective map that preserves `0`, `+`, unary `-`,\nand binary `-` to a `SubtractionCommMonoid`. This version takes custom `nsmul` and `zsmul` as\n`[SMul ℕ M₁]` and `[SMul ℤ M₁]` arguments."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L248-L255","name":"Function.Injective.divisionMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.divisionMonoid","doc":"A type endowed with `1`, `*`, `⁻¹`, and `/` is a `DivisionMonoid` if it admits an injective map\nthat preserves `1`, `*`, `⁻¹`, and `/` to a `DivisionMonoid`. See note [reducible non-instances] "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L243-L247","name":"Function.Injective.subtractionMonoid.proof_2","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.subtractionMonoid.proof_2","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L243-L247","name":"Function.Injective.subtractionMonoid.proof_1","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.subtractionMonoid.proof_1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L243-L247","name":"Function.Injective.subtractionMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.subtractionMonoid","doc":"A type endowed with `0`, `+`, unary `-`, and binary `-`\nis a `SubtractionMonoid` if it admits an injective map that preserves `0`, `+`, unary `-`, and\nbinary `-` to a `SubtractionMonoid`. This version takes custom `nsmul` and `zsmul` as `[SMul ℕ M₁]`\nand `[SMul ℤ M₁]` arguments."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L228-L237","name":"Function.Injective.divInvMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.divInvMonoid","doc":"A type endowed with `1`, `*`, `⁻¹`, and `/` is a `DivInvMonoid` if it admits an injective map\nthat preserves `1`, `*`, `⁻¹`, and `/` to a `DivInvMonoid`. See note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L223-L227","name":"Function.Injective.subNegMonoid.proof_1","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.subNegMonoid.proof_1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L223-L227","name":"Function.Injective.subNegMonoid.proof_4","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.subNegMonoid.proof_4","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L223-L227","name":"Function.Injective.subNegMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.subNegMonoid","doc":"A type endowed with `0`, `+`, unary `-`, and binary `-` is a\n`SubNegMonoid` if it admits an injective map that preserves `0`, `+`, unary `-`, and binary `-` to\na `SubNegMonoid`. This version takes custom `nsmul` and `zsmul` as `[SMul ℕ M₁]` and `[SMul ℤ M₁]`\narguments."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L223-L227","name":"Function.Injective.subNegMonoid.proof_3","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.subNegMonoid.proof_3","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L223-L227","name":"Function.Injective.subNegMonoid.proof_2","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.subNegMonoid.proof_2","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L212-L215","name":"Function.Injective.involutiveInv","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.involutiveInv","doc":"A type has an involutive inversion if it admits a surjective map that preserves `⁻¹` to a type\nwhich has an involutive inversion. See note [reducible non-instances] "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L209-L211","name":"Function.Injective.involutiveNeg","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.involutiveNeg","doc":"A type has an involutive negation if it admits a surjective map that\npreserves `-` to a type which has an involutive negation."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L209-L211","name":"Function.Injective.involutiveNeg.proof_1","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.involutiveNeg.proof_1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L200-L203","name":"Function.Injective.cancelCommMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.cancelCommMonoid","doc":"A type endowed with `1` and `*` is a cancel commutative monoid, if it admits an injective map\nthat preserves `1` and `*` to a cancel commutative monoid.  See note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L197-L199","name":"Function.Injective.addCancelCommMonoid.proof_3","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addCancelCommMonoid.proof_3","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L197-L199","name":"Function.Injective.addCancelCommMonoid.proof_4","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addCancelCommMonoid.proof_4","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L197-L199","name":"Function.Injective.addCancelCommMonoid.proof_2","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addCancelCommMonoid.proof_2","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L197-L199","name":"Function.Injective.addCancelCommMonoid.proof_1","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addCancelCommMonoid.proof_1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L197-L199","name":"Function.Injective.addCancelCommMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addCancelCommMonoid","doc":"A type endowed with `0` and `+` is an additive cancel commutative monoid,\nif it admits an injective map that preserves `0` and `+` to an additive cancel commutative monoid."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L188-L192","name":"Function.Injective.addCommMonoidWithOne","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addCommMonoidWithOne","doc":"A type endowed with `0`, `1` and `+` is an additive commutative monoid with one, if it admits an\ninjective map that preserves `0`, `1` and `+` to an additive commutative monoid with one.\nSee note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L177-L180","name":"Function.Injective.commMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.commMonoid","doc":"A type endowed with `1` and `*` is a commutative monoid, if it admits an injective map that\npreserves `1` and `*` to a commutative monoid.  See note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L174-L176","name":"Function.Injective.addCommMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addCommMonoid","doc":"A type endowed with `0` and `+` is an additive commutative monoid, if it\nadmits an injective map that preserves `0` and `+` to an additive commutative monoid."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L165-L168","name":"Function.Injective.cancelMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.cancelMonoid","doc":"A type endowed with `1` and `*` is a cancel monoid, if it admits an injective map that preserves\n`1` and `*` to a cancel monoid. See note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L162-L164","name":"Function.Injective.addCancelMonoid.proof_1","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addCancelMonoid.proof_1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L162-L164","name":"Function.Injective.addCancelMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addCancelMonoid","doc":"A type endowed with `0` and `+` is an additive left cancel monoid,if it\nadmits an injective map that preserves `0` and `+` to an additive left cancel monoid."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L153-L156","name":"Function.Injective.rightCancelMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.rightCancelMonoid","doc":"A type endowed with `1` and `*` is a right cancel monoid, if it admits an injective map that\npreserves `1` and `*` to a right cancel monoid. See note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L150-L152","name":"Function.Injective.addRightCancelMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addRightCancelMonoid","doc":"A type endowed with `0` and `+` is an additive left cancel monoid,if it\nadmits an injective map that preserves `0` and `+` to an additive left cancel monoid."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L141-L144","name":"Function.Injective.leftCancelMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.leftCancelMonoid","doc":"A type endowed with `1` and `*` is a left cancel monoid, if it admits an injective map that\npreserves `1` and `*` to a left cancel monoid. See note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L138-L140","name":"Function.Injective.addLeftCancelMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addLeftCancelMonoid","doc":"A type endowed with `0` and `+` is an additive left cancel monoid, if it\nadmits an injective map that preserves `0` and `+` to an additive left cancel monoid."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L126-L133","name":"Function.Injective.addMonoidWithOne","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addMonoidWithOne","doc":"A type endowed with `0`, `1` and `+` is an additive monoid with one,\nif it admits an injective map that preserves `0`, `1` and `+` to an additive monoid with one.\nSee note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L113-L118","name":"Function.Injective.monoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.monoid","doc":"A type endowed with `1` and `*` is a monoid, if it admits an injective map that preserves `1`\nand `*` to a monoid.  See note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L109-L112","name":"Function.Injective.addMonoid.proof_2","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addMonoid.proof_2","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L109-L112","name":"Function.Injective.addMonoid.proof_1","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addMonoid.proof_1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L109-L112","name":"Function.Injective.addMonoid","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addMonoid","doc":"A type endowed with `0` and `+` is an additive monoid, if it admits an\ninjective map that preserves `0` and `+` to an additive monoid. See note\n[reducible non-instances]."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L97-L101","name":"Function.Injective.mulOneClass","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.mulOneClass","doc":"A type endowed with `1` and `*` is a `MulOneClass`, if it admits an injective map that\npreserves `1` and `*` to a `MulOneClass`.  See note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L94-L96","name":"Function.Injective.addZeroClass.proof_1","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addZeroClass.proof_1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L94-L96","name":"Function.Injective.addZeroClass","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addZeroClass","doc":"A type endowed with `0` and `+` is an `AddZeroClass`, if it admits an\ninjective map that preserves `0` and `+` to an `AddZeroClass`."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L94-L96","name":"Function.Injective.addZeroClass.proof_2","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addZeroClass.proof_2","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L82-L86","name":"Function.Injective.rightCancelSemigroup","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.rightCancelSemigroup","doc":"A type endowed with `*` is a right cancel semigroup, if it admits an injective map that\npreserves `*` to a right cancel semigroup.  See note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L79-L81","name":"Function.Injective.addRightCancelSemigroup.proof_1","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addRightCancelSemigroup.proof_1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L79-L81","name":"Function.Injective.addRightCancelSemigroup","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addRightCancelSemigroup","doc":"A type endowed with `+` is an additive right\ncancel semigroup, if it admits an injective map that preserves `+` to an additive right cancel\nsemigroup."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L69-L73","name":"Function.Injective.leftCancelSemigroup","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.leftCancelSemigroup","doc":"A type endowed with `*` is a left cancel semigroup, if it admits an injective map that\npreserves `*` to a left cancel semigroup.  See note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L67-L68","name":"Function.Injective.addLeftCancelSemigroup.proof_1","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addLeftCancelSemigroup.proof_1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L67-L68","name":"Function.Injective.addLeftCancelSemigroup","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addLeftCancelSemigroup","doc":"A type endowed with `+` is an additive left cancel\nsemigroup, if it admits an injective map that preserves `+` to an additive left cancel semigroup."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L59-L61","name":"Function.Injective.commSemigroup","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.commSemigroup","doc":"A type endowed with `*` is a commutative semigroup, if it admits an injective map that\npreserves `*` to a commutative semigroup.  See note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L56-L58","name":"Function.Injective.addCommSemigroup.proof_1","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addCommSemigroup.proof_1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L56-L58","name":"Function.Injective.addCommSemigroup","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addCommSemigroup","doc":"A type endowed with `+` is an additive commutative semigroup,if it admits\nan injective map that preserves `+` to an additive commutative semigroup."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L48-L50","name":"Function.Injective.semigroup","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.semigroup","doc":"A type endowed with `*` is a semigroup, if it admits an injective map that preserves `*` to\na semigroup. See note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L46-L47","name":"Function.Injective.addSemigroup","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addSemigroup","doc":"A type endowed with `+` is an additive semigroup, if it admits an\ninjective map that preserves `+` to an additive semigroup."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Group/InjSurj.lean#L46-L47","name":"Function.Injective.addSemigroup.proof_1","kind":"def","docLink":"./Mathlib/Algebra/Group/InjSurj.html#Function.Injective.addSemigroup.proof_1","doc":""}]}