{"name":"Std.Data.Int.Basic","instances":[{"typeNames":["Int"],"name":"Int.instDivInt_1","className":"Div"},{"typeNames":["Int"],"name":"Int.instModInt_1","className":"Mod"},{"typeNames":["Int"],"name":"Int.instDvdInt","className":"Dvd"}],"imports":["Init","Std.Classes.Dvd"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Int/Basic.lean#L128-L128","name":"Int.instDvdInt","kind":"instance","docLink":"./Std/Data/Int/Basic.html#Int.instDvdInt","doc":"Divisibility of integers. `a ∣ b` (typed as `\\|`) says that\nthere is some `c` such that `b = a * c`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Int/Basic.lean#L120-L120","name":"Int.gcd","kind":"def","docLink":"./Std/Data/Int/Basic.html#Int.gcd","doc":"Computes the greatest common divisor of two integers, as a `Nat`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Int/Basic.lean#L115-L115","name":"Int.instModInt_1","kind":"instance","docLink":"./Std/Data/Int/Basic.html#Int.instModInt_1","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Int/Basic.lean#L114-L114","name":"Int.instDivInt_1","kind":"instance","docLink":"./Std/Data/Int/Basic.html#Int.instDivInt_1","doc":"Core Lean provides instances using T-rounding division, i.e. `Int.div` and `Int.mod`.\nWe override these here.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Int/Basic.lean#L97-L102","name":"Int.fmod","kind":"def","docLink":"./Std/Data/Int/Basic.html#Int.fmod","doc":"Integer modulus. This version of `Int.mod` uses the F-rounding convention\n(flooring division), in which `Int.fdiv x y` satisfies `fdiv x y = floor (x / y)`\nand `Int.fmod` is the unique function satisfying `fmod x y + (fdiv x y) * y = x`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Int/Basic.lean#L84-L90","name":"Int.fdiv","kind":"def","docLink":"./Std/Data/Int/Basic.html#Int.fdiv","doc":"Integer division. This version of `Int.div` uses the F-rounding convention\n(flooring division), in which `Int.fdiv x y` satisfies `fdiv x y = floor (x / y)`\nand `Int.fmod` is the unique function satisfying `fmod x y + (fdiv x y) * y = x`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Int/Basic.lean#L69-L71","name":"Int.emod","kind":"def","docLink":"./Std/Data/Int/Basic.html#Int.emod","doc":"Integer modulus. This version of `Int.mod` uses the E-rounding convention\n(euclidean division), in which `Int.emod x y` satisfies `0 ≤ emod x y < natAbs y` for `y ≠ 0`\nand `Int.ediv` is the unique function satisfying `emod x y + (ediv x y) * y = x`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Int/Basic.lean#L57-L62","name":"Int.ediv","kind":"def","docLink":"./Std/Data/Int/Basic.html#Int.ediv","doc":"Integer division. This version of `Int.div` uses the E-rounding convention\n(euclidean division), in which `Int.emod x y` satisfies `0 ≤ mod x y < natAbs y` for `y ≠ 0`\nand `Int.ediv` is the unique function satisfying `emod x y + (ediv x y) * y = x`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Int/Basic.lean#L35-L37","name":"Int.toNat'","kind":"def","docLink":"./Std/Data/Int/Basic.html#Int.toNat'","doc":"* If `n : Nat`, then `int.toNat' n = some n`\n* If `n : Int` is negative, then `int.toNat' n = none`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Int/Basic.lean#L24-L27","name":"Int.sign","kind":"def","docLink":"./Std/Data/Int/Basic.html#Int.sign","doc":"Returns the \"sign\" of the integer as another integer: `1` for positive numbers,\n`-1` for negative numbers, and `0` for `0`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Int/Basic.lean#L12-L16","name":"Int.«term-[_+1]»","kind":"def","docLink":"./Std/Data/Int/Basic.html#Int.«term-[_+1]»","doc":"`-[n+1]` is suggestive notation for `negSucc n`, which is the second constructor of\n`Int` for making strictly negative numbers by mapping `n : Nat` to `-(n + 1)`.\n"}]}