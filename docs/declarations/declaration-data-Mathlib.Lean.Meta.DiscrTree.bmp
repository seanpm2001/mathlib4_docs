{"name":"Mathlib.Lean.Meta.DiscrTree","instances":[],"imports":["Init","Lean.Meta.DiscrTree","Mathlib.Lean.Expr.Traverse"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Meta/DiscrTree.lean#L65-L66","name":"Lean.Meta.DiscrTree.mapArrays","kind":"def","docLink":"./Mathlib/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.mapArrays","doc":"Apply a function to the array of values at each node in a `DiscrTree`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Meta/DiscrTree.lean#L61-L62","name":"Lean.Meta.DiscrTree.mapArraysM","kind":"def","docLink":"./Mathlib/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.mapArraysM","doc":"Apply a monadic function to the array of values at each node in a `DiscrTree`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Meta/DiscrTree.lean#L54-L58","name":"Lean.Meta.DiscrTree.Trie.mapArraysM","kind":"opaque","docLink":"./Mathlib/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.Trie.mapArraysM","doc":"Apply a monadic function to the array of values at each node in a `DiscrTree`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Meta/DiscrTree.lean#L37-L49","name":"Lean.Meta.DiscrTree.getSubexpressionMatches","kind":"opaque","docLink":"./Mathlib/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.getSubexpressionMatches","doc":"Find keys which match the expression, or some subexpression.\n\nNote that repeated subexpressions will be visited each time they appear,\nmaking this operation potentially very expensive.\nIt would be good to solve this problem!\n\nImplementation: we reverse the results from `getMatch`,\nso that we return lemmas matching larger subexpressions first,\nand amongst those we return more specific lemmas first.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Meta/DiscrTree.lean#L19-L24","name":"Lean.Meta.DiscrTree.insertIfSpecific","kind":"def","docLink":"./Mathlib/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.insertIfSpecific","doc":"Inserts a new key into a discrimination tree,\nbut only if it is not of the form `#[*]` or `#[=, *, *, *]`.\n"}]}