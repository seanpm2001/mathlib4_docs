{"name":"Mathlib.RingTheory.Adjoin.PowerBasis","instances":[],"imports":["Init","Mathlib.RingTheory.Adjoin.Basic","Mathlib.RingTheory.PowerBasis","Mathlib.LinearAlgebra.Matrix.Basis"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/Adjoin/PowerBasis.lean#L181-L191","name":"PowerBasis.toMatrix_isIntegral","kind":"theorem","docLink":"./Mathlib/RingTheory/Adjoin/PowerBasis.html#PowerBasis.toMatrix_isIntegral","doc":"Let `B B' : PowerBasis K S` be such that `IsIntegral R B.gen`, and let `P : R[X]` be such that\n`aeval B.gen P = B'.gen`. Then `IsIntegral R (B.basis.to_matrix B'.basis i j)` for all `i` and `j`\nif `minpoly K B.gen = (minpoly R B.gen).map (algebraMap R L)`. This is the case\nif `R` is a GCD domain and `K` is its fraction ring. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/Adjoin/PowerBasis.lean#L157-L174","name":"PowerBasis.repr_pow_isIntegral","kind":"theorem","docLink":"./Mathlib/RingTheory/Adjoin/PowerBasis.html#PowerBasis.repr_pow_isIntegral","doc":"Let `B : PowerBasis S A` be such that `IsIntegral R B.gen`, and let `x : A` be and element\nwith integral coordinates in the base `B.basis`. Then `IsIntegral R ((B.basis.repr (x ^ n) i)` for\nall `i` and all `n` if `minpoly S B.gen = (minpoly R B.gen).map (algebraMap R S)`. This is the case\nif `R` is a GCD domain and `S` is its fraction ring. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/Adjoin/PowerBasis.lean#L138-L150","name":"PowerBasis.repr_mul_isIntegral","kind":"theorem","docLink":"./Mathlib/RingTheory/Adjoin/PowerBasis.html#PowerBasis.repr_mul_isIntegral","doc":"Let `B : PowerBasis S A` be such that `IsIntegral R B.gen`, and let `x y : A` be elements with\nintegral coordinates in the base `B.basis`. Then `IsIntegral R ((B.basis.repr (x * y) i)` for all\n`i` if `minpoly S B.gen = (minpoly R B.gen).map (algebraMap R S)`. This is the case if `R` is a GCD\ndomain and `S` is its fraction ring. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/Adjoin/PowerBasis.lean#L105-L131","name":"PowerBasis.repr_gen_pow_isIntegral","kind":"theorem","docLink":"./Mathlib/RingTheory/Adjoin/PowerBasis.html#PowerBasis.repr_gen_pow_isIntegral","doc":"If `B : PowerBasis S A` is such that `IsIntegral R B.gen`, then\n`IsIntegral R (B.basis.repr (B.gen ^ n) i)` for all `i` if\n`minpoly S B.gen = (minpoly R B.gen).map (algebraMap R S)`. This is the case if `R` is a GCD domain\nand `S` is its fraction ring. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/Adjoin/PowerBasis.lean#L80-L84","name":"PowerBasis.ofGenMemAdjoin","kind":"def","docLink":"./Mathlib/RingTheory/Adjoin/PowerBasis.html#PowerBasis.ofGenMemAdjoin","doc":"The power basis given by `x` if `B.gen âˆˆ adjoin K {x}`. See `PowerBasis.ofGenMemAdjoin'`\nfor a version over a more general base ring. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/Adjoin/PowerBasis.lean#L79-L79","name":"PowerBasis.ofGenMemAdjoin_dim","kind":"theorem","docLink":"./Mathlib/RingTheory/Adjoin/PowerBasis.html#PowerBasis.ofGenMemAdjoin_dim","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/Adjoin/PowerBasis.lean#L79-L79","name":"PowerBasis.ofGenMemAdjoin_gen","kind":"theorem","docLink":"./Mathlib/RingTheory/Adjoin/PowerBasis.html#PowerBasis.ofGenMemAdjoin_gen","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/Adjoin/PowerBasis.lean#L65-L70","name":"Algebra.adjoin.powerBasis","kind":"def","docLink":"./Mathlib/RingTheory/Adjoin/PowerBasis.html#Algebra.adjoin.powerBasis","doc":"The power basis `1, x, ..., x ^ (d - 1)` for `K[x]`,\nwhere `d` is the degree of the minimal polynomial of `x`. See `Algebra.adjoin.powerBasis'` for\na version over a more general base ring. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/Adjoin/PowerBasis.lean#L64-L64","name":"Algebra.adjoin.powerBasis_gen","kind":"theorem","docLink":"./Mathlib/RingTheory/Adjoin/PowerBasis.html#Algebra.adjoin.powerBasis_gen","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/Adjoin/PowerBasis.lean#L64-L64","name":"Algebra.adjoin.powerBasis_dim","kind":"theorem","docLink":"./Mathlib/RingTheory/Adjoin/PowerBasis.html#Algebra.adjoin.powerBasis_dim","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/Adjoin/PowerBasis.lean#L36-L58","name":"Algebra.adjoin.powerBasisAux","kind":"def","docLink":"./Mathlib/RingTheory/Adjoin/PowerBasis.html#Algebra.adjoin.powerBasisAux","doc":"The elements `1, x, ..., x ^ (d - 1)` for a basis for the `K`-module `K[x]`,\nwhere `d` is the degree of the minimal polynomial of `x`. "}]}