{"name":"Std.Data.RBMap.WF","instances":[{"typeNames":["Prod","Prod","Std.byKey","Prod","Prod.fst","Std.byKey","Prod","Prod.fst","Std.RBMap.Imp.mapSnd"],"name":"Std.RBMap.Imp.instIsMonotoneProdProdByKeyFstByKeyFstMapSnd","className":"Std.RBNode.IsMonotone"}],"imports":["Init","Std.Logic","Std.Data.RBMap.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L541-L541","name":"Std.RBMap.mapVal","kind":"def","docLink":"./Std/Data/RBMap/WF.html#Std.RBMap.mapVal","doc":"`O(n)`. Map a function on the values in the map. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L528-L536","name":"Std.RBMap.Imp.instIsMonotoneProdProdByKeyFstByKeyFstMapSnd","kind":"instance","docLink":"./Std/Data/RBMap/WF.html#Std.RBMap.Imp.instIsMonotoneProdProdByKeyFstByKeyFstMapSnd","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L526-L526","name":"Std.RBMap.Imp.mapSnd","kind":"def","docLink":"./Std/Data/RBMap/WF.html#Std.RBMap.Imp.mapSnd","doc":"Applies `f` to the second component.\nWe extract this as a function so that `IsMonotone (mapSnd f)` can be an instance.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L512-L513","name":"Std.RBSet.map","kind":"def","docLink":"./Std/Data/RBMap/WF.html#Std.RBSet.map","doc":"`O(n)`. Map a function on every value in the tree.\nThis requires `IsMonotone` on the function in order to preserve the order invariant.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L497-L501","name":"Std.RBNode.Ordered.map","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.map","doc":"The `map` function preserves the order invariants if `f` is monotone. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L491-L494","name":"Std.RBNode.All.map","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.All.map","doc":"Sufficient condition for `map` to preserve an `All` quantifier. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L488-L488","name":"Std.RBNode.IsMonotone.lt_mono","kind":"def","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.IsMonotone.lt_mono","doc":"If `x < y` then `f x < f y`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L486-L486","name":"Std.RBNode.IsMonotone.mk","kind":"ctor","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.IsMonotone.mk","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L486-L488","name":"Std.RBNode.IsMonotone","kind":"class","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.IsMonotone","doc":"The property of a map function `f` which ensures the `map` operation is valid. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L480-L483","name":"Std.RBNode.Balanced.map","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.map","doc":"The `map` function preserves the balance invariants. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L476-L477","name":"Std.RBNode.WF_iff","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.WF_iff","doc":"The well-formedness invariant for a red-black tree is exactly the `mk` constructor,\nbecause the other constructors of `WF` are redundant.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L466-L470","name":"Std.RBNode.WF.out","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.WF.out","doc":"The well-formedness invariant implies the ordering and balance properties. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L461-L463","name":"Std.RBNode.Balanced.erase","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.erase","doc":"The `erase` function preserves the balance invariants. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L457-L458","name":"Std.RBNode.Ordered.erase","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.erase","doc":"The `erase` function preserves the ordering invariants. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L432-L454","name":"Std.RBNode.Balanced.del","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.del","doc":"The `del` function has the `DelProp` property. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L419-L429","name":"Std.RBNode.Ordered.del","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.del","doc":"The `del` function preserves the ordering invariants. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L406-L416","name":"Std.RBNode.All.del","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.All.del","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L400-L404","name":"Std.RBNode.DelProp.redred","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.DelProp.redred","doc":"The `DelProp` property is a strengthened version of the red-red invariant. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L394-L397","name":"Std.RBNode.DelProp","kind":"def","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.DelProp","doc":"The invariant of the `del` function.\n* If the input tree is black, then the result of deletion is a red-red tree with\n  black-height lowered by 1.\n* If the input tree is red or nil, then the result of deletion is a balanced tree with\n  some color and the same black-height.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L347-L383","name":"Std.RBNode.Balanced.append","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.append","doc":"The balance properties of the `append` function. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L314-L344","name":"Std.RBNode.Ordered.append","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.append","doc":"The `append` function preserves the ordering invariants. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L303-L311","name":"Std.RBNode.All.append","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.All.append","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L287-L301","name":"Std.RBNode.Balanced.balRight","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.balRight","doc":"The balancing properties of the `balRight` function. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L274-L284","name":"Std.RBNode.Ordered.balRight","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.balRight","doc":"The `balRight` function preserves the ordering invariants. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L269-L271","name":"Std.RBNode.All.balRight","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.All.balRight","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L253-L267","name":"Std.RBNode.Balanced.balLeft","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.balLeft","doc":"The balancing properties of the `balLeft` function. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L240-L250","name":"Std.RBNode.Ordered.balLeft","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.balLeft","doc":"The `balLeft` function preserves the ordering invariants. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L235-L237","name":"Std.RBNode.All.balLeft","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.All.balLeft","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L232-L233","name":"Std.RBNode.Ordered.setRed","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.setRed","doc":"The `setRed` function preserves the ordering invariants. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L228-L229","name":"Std.RBNode.All.setRed","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.All.setRed","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L222-L226","name":"Std.RBNode.Balanced.insert","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.insert","doc":"The `insert` function is balanced if the input is balanced.\n(We lose track of both the color and the black-height of the result,\nso this is only suitable for use on the root of the tree.)\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L194-L215","name":"Std.RBNode.Balanced.ins","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.ins","doc":"The balance invariant of the `ins` function.\nThe result of inserting into the tree either yields a balanced tree,\nor a tree which is almost balanced except that it has a red-red violation at the root.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L183-L185","name":"Std.RBNode.balance2_eq","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.balance2_eq","doc":"The `balance2` function does nothing if the second argument is already balanced. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L178-L180","name":"Std.RBNode.balance1_eq","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.balance1_eq","doc":"The `balance1` function does nothing if the first argument is already balanced. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L166-L175","name":"Std.RBNode.RedRed.balance2","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.balance2","doc":"The `balance2` function repairs the balance invariant when the second argument is red-red. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L154-L163","name":"Std.RBNode.RedRed.balance1","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.balance1","doc":"The `balance1` function repairs the balance invariant when the first argument is red-red. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L149-L151","name":"Std.RBNode.RedRed.setBlack","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.setBlack","doc":"If `t` has the red-red invariant, then setting the root to black yields a balanced tree. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L144-L146","name":"Std.RBNode.RedRed.imp","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.imp","doc":"The red-red invariant is monotonic in `p`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L139-L141","name":"Std.RBNode.RedRed.of_red","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.of_red","doc":"A `red` node with the red-red invariant has balanced children. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L134-L136","name":"Std.RBNode.RedRed.of_false","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.of_false","doc":"When `p` is false, the red-red case is impossible so the tree is balanced. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L130-L131","name":"Std.RBNode.RedRed.redred","kind":"ctor","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.redred","doc":"A red node with balanced red children has the red-red invariant (if `p` is true). "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L128-L129","name":"Std.RBNode.RedRed.balanced","kind":"ctor","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.balanced","doc":"A balanced tree has the red-red invariant. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L127-L131","name":"Std.RBNode.RedRed","kind":"inductive","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed","doc":"The red-red invariant is a weakening of the red-black balance invariant which allows\nthe root to be red with red children, but does not allow any other violations.\nIt occurs as a temporary condition in the `insert` and `erase` functions.\n\nThe `p` parameter allows the `.redred` case to be dependent on an additional condition.\nIf it is false, then this is equivalent to the usual red-black invariant.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L116-L117","name":"Std.RBNode.Ordered.insert","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.insert","doc":"The `insert` function preserves the ordering invariants. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L98-L113","name":"Std.RBNode.Ordered.ins","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.ins","doc":"The `ins` function preserves the ordering invariants. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L92-L95","name":"Std.RBNode.All.ins","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.All.ins","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L88-L90","name":"Std.RBNode.insert_setBlack","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.insert_setBlack","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L86-L86","name":"Std.RBNode.setBlack_idem","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.setBlack_idem","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L82-L84","name":"Std.RBNode.Balanced.setBlack","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.setBlack","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L79-L80","name":"Std.RBNode.Ordered.setBlack","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.setBlack","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L75-L77","name":"Std.RBNode.balance2_All","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.balance2_All","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L63-L73","name":"Std.RBNode.Ordered.balance2","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.balance2","doc":"The `balance2` function preserves the ordering invariants. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L58-L60","name":"Std.RBNode.balance1_All","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.balance1_All","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L46-L56","name":"Std.RBNode.Ordered.balance1","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.balance1","doc":"The `balance1` function preserves the ordering invariants. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L42-L43","name":"Std.RBNode.cmpEq.lt_congr_right","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.cmpEq.lt_congr_right","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L39-L40","name":"Std.RBNode.cmpEq.lt_congr_left","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.cmpEq.lt_congr_left","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L36-L37","name":"Std.RBNode.cmpLT.trans_r","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.cmpLT.trans_r","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L33-L34","name":"Std.RBNode.cmpLT.trans_l","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.cmpLT.trans_l","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L30-L31","name":"Std.RBNode.cmpLT.trans","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.cmpLT.trans","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L27-L28","name":"Std.RBNode.All_and","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.All_and","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/WF.lean#L23-L25","name":"Std.RBNode.All.trivial","kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.All.trivial","doc":""}]}