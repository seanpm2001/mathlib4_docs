{"name":"Mathlib.Tactic.FBinop","instances":[{"typeNames":["FBinopElab.SRec"],"name":"FBinopElab.instInhabitedSRec","className":"Inhabited"},{"typeNames":["FBinopElab.SRec"],"name":"FBinopElab.instToExprSRec","className":"Lean.ToExpr"}],"imports":["Init","Mathlib.Tactic.ToExpr"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/FBinop.lean#L240-L241","name":"FBinopElab.elabBinOp","kind":"def","docLink":"./Mathlib/Tactic/FBinop.html#FBinopElab.elabBinOp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/FBinop.lean#L85-L85","name":"FBinopElab.instToExprSRec","kind":"instance","docLink":"./Mathlib/Tactic/FBinop.html#FBinopElab.instToExprSRec","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/FBinop.lean#L85-L85","name":"FBinopElab.instInhabitedSRec","kind":"instance","docLink":"./Mathlib/Tactic/FBinop.html#FBinopElab.instInhabitedSRec","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/FBinop.lean#L84-L84","name":"FBinopElab.SRec.args","kind":"def","docLink":"./Mathlib/Tactic/FBinop.html#FBinopElab.SRec.args","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/FBinop.lean#L83-L83","name":"FBinopElab.SRec.name","kind":"def","docLink":"./Mathlib/Tactic/FBinop.html#FBinopElab.SRec.name","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/FBinop.lean#L82-L85","name":"FBinopElab.SRec","kind":"structure","docLink":"./Mathlib/Tactic/FBinop.html#FBinopElab.SRec","doc":"Records a \"functor\", which is some function `Type u → Type v`. We only\nallow `c a1 ... an` for `c` a constant. This is so we can abstract out the universe variables. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/FBinop.lean#L33-L35","name":"FBinopElab.prodSyntax","kind":"def","docLink":"./Mathlib/Tactic/FBinop.html#FBinopElab.prodSyntax","doc":"`fbinop% f x y` elaborates `f x y` for `x : S α` and `y : S' β`, taking into account\nany coercions that the \"functors\" `S` and `S'` possess. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/FBinop.lean#L1-L1","name":"FBinopElab.SRec.mk","kind":"ctor","docLink":"./Mathlib/Tactic/FBinop.html#FBinopElab.SRec.mk","doc":""}]}