{"name":"Mathlib.Tactic.Core","instances":[],"imports":["Init","Std.Tactic.Simpa","Mathlib.Lean.Expr"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L256-L256","name":"Mathlib.getMathlibDir","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Mathlib.getMathlibDir","doc":"Returns the mathlib root directory. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L247-L253","name":"Mathlib.getPackageDir","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Mathlib.getPackageDir","doc":"Returns the root directory which contains the package root file, e.g. `Mathlib.lean`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L237-L239","name":"Lean.Elab.Tactic.iterateUntilFailureCount","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Lean.Elab.Tactic.iterateUntilFailureCount","doc":"`iterateUntilFailureCount` is similar to `iterateUntilFailure` except it counts\nthe number of successful calls to `tac`. Always succeeds.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L227-L232","name":"Lean.Elab.Tactic.iterateUntilFailureWithResults","kind":"opaque","docLink":"./Mathlib/Tactic/Core.html#Lean.Elab.Tactic.iterateUntilFailureWithResults","doc":"`iterateUntilFailureWithResults` is a helper tactic which accumulates the list of results\nobtained from iterating `tac` until it fails. Always succeeds.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L221-L222","name":"Lean.Elab.Tactic.iterateUntilFailure","kind":"opaque","docLink":"./Mathlib/Tactic/Core.html#Lean.Elab.Tactic.iterateUntilFailure","doc":"Repeats a tactic until it fails. Always succeeds. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L215-L218","name":"Lean.Elab.Tactic.iterateRange","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Lean.Elab.Tactic.iterateRange","doc":"`iterateRange m n t`: Repeat the given tactic at least `m` times and\nat most `n` times or until `t` fails. Fails if `t` does not run at least `m` times.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L207-L209","name":"Lean.Elab.Tactic.iterateExactly'","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Lean.Elab.Tactic.iterateExactly'","doc":"`iterateExactly' n t` executes `t` `n` times. If any iteration fails, the whole tactic fails.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L201-L203","name":"Lean.Elab.Tactic.iterateAtMost","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Lean.Elab.Tactic.iterateAtMost","doc":"Repeats a tactic at most `n` times, stopping sooner if the\ntactic fails. Always succeeds. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L194-L195","name":"Lean.Elab.Tactic.andThenOnSubgoals","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Lean.Elab.Tactic.andThenOnSubgoals","doc":"Simulates the `<;>` tactic combinator. First runs `tac1` and then runs\n`tac2` on all newly-generated subgoals.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L174-L189","name":"Lean.Elab.Tactic.allGoals","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Lean.Elab.Tactic.allGoals","doc":"Run a tactic on all goals, and always succeeds.\n\n(This is parallel to `Lean.Elab.Tactic.evalAllGoals` in core,\nwhich takes a `Syntax` rather than `TacticM Unit`.\nThis function could be moved to core and `evalAllGoals` refactored to use it.)\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L155-L165","name":"Lean.Elab.Tactic.getFVarIdsAt","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Lean.Elab.Tactic.getFVarIdsAt","doc":"Get the array of `FVarId`s in the local context of the given `goal`.\n\nIf `ids` is specified, elaborate them in the local context of the given goal to obtain the array of\n`FVarId`s.\n\nIf `includeImplementationDetails` is `false` (the default), we filter out implementation details\n(`implDecl`s and `auxDecl`s) from the resulting list of `FVarId`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L140-L146","name":"Lean.Elab.Tactic.getFVarIdAt","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Lean.Elab.Tactic.getFVarIdAt","doc":"Elaborate syntax for an `FVarId` in the local context of the given goal. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L136-L137","name":"Lean.Elab.Tactic.filterOutImplementationDetails","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Lean.Elab.Tactic.filterOutImplementationDetails","doc":"Given a local context and an array of `FVarIds` assumed to be in that local context, remove all\nimplementation details. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L128-L128","name":"Mathlib.Tactic.tacticRepeat1_","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Mathlib.Tactic.tacticRepeat1_","doc":"`repeat1 tac` applies `tac` to main goal at least once. If the application succeeds,\nthe tactic is applied recursively to the generated subgoals until it eventually fails.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L120-L122","name":"Mathlib.Tactic.getUsingArg","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Mathlib.Tactic.getUsingArg","doc":"Extract the argument from a `usingArg` syntax as a syntax term "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L115-L117","name":"Mathlib.Tactic.getWithArgs","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Mathlib.Tactic.getWithArgs","doc":"Extract the arguments from a `withArgs` syntax as an array of syntaxes "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L110-L112","name":"Mathlib.Tactic.getDSimpArgs","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Mathlib.Tactic.getDSimpArgs","doc":"Extract the arguments from a `dsimpArgs` syntax as an array of syntaxes "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L105-L107","name":"Mathlib.Tactic.getSimpArgs","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Mathlib.Tactic.getSimpArgs","doc":"Extract the arguments from a `simpArgs` syntax as an array of syntaxes "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L100-L100","name":"Mathlib.Tactic.usingArg","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Mathlib.Tactic.usingArg","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L99-L99","name":"Mathlib.Tactic.withArgs","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Mathlib.Tactic.withArgs","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L71-L91","name":"Lean.MVarId.introsWithBinderIdents","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Lean.MVarId.introsWithBinderIdents","doc":"Introduce variables, giving them names from a specified list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L66-L67","name":"Lean.setProtected","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Lean.setProtected","doc":"Make `nm` protected. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L51-L63","name":"Lean.toPreDefinition","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Lean.toPreDefinition","doc":"Make a PreDefinition taking some metadata from declaration `nm`.\nYou can provide a new type, value and (optional) docstring, but the remaining information is taken\nfrom `nm`.\nCurrently only implemented for definitions and theorems. Also see docstring of `toModifiers`\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Core.lean#L26-L43","name":"Lean.toModifiers","kind":"def","docLink":"./Mathlib/Tactic/Core.html#Lean.toModifiers","doc":"Return the modifiers of declaration `nm` with (optional) docstring `newDoc`.\nCurrently, recursive or partial definitions are not supported, and no attributes are provided.\n"}]}