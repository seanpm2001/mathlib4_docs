{"name":"Mathlib.Data.Erased","instances":[{"typeNames":["Erased"],"name":"Erased.instReprErased","className":"Repr"},{"typeNames":["Erased"],"name":"Erased.instToStringErased","className":"ToString"},{"typeNames":["Erased"],"name":"Erased.instInhabitedErased","className":"Inhabited"},{"typeNames":["Erased"],"name":"Erased.Monad","className":"Monad"},{"typeNames":["Erased","Erased.Monad"],"name":"Erased.LawfulMonad","className":"LawfulMonad"}],"imports":["Init","Mathlib.Logic.Equiv.Defs"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L160-L170","name":"Erased.LawfulMonad","kind":"instance","docLink":"./Mathlib/Data/Erased.html#Erased.LawfulMonad","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L155-L156","name":"Erased.map_def","kind":"theorem","docLink":"./Mathlib/Data/Erased.html#Erased.map_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L150-L151","name":"Erased.bind_def","kind":"theorem","docLink":"./Mathlib/Data/Erased.html#Erased.bind_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L145-L146","name":"Erased.pure_def","kind":"theorem","docLink":"./Mathlib/Data/Erased.html#Erased.pure_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L138-L141","name":"Erased.Monad","kind":"instance","docLink":"./Mathlib/Data/Erased.html#Erased.Monad","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L135-L135","name":"Erased.map_out","kind":"theorem","docLink":"./Mathlib/Data/Erased.html#Erased.map_out","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L130-L131","name":"Erased.map","kind":"def","docLink":"./Mathlib/Data/Erased.html#Erased.map","doc":"`(<$>)` operation on `Erased`.\n\nThis is a separate definition because `α` and `β` can live in different\nuniverses (the universe is fixed in `Functor`).\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L121-L122","name":"Erased.join_eq_out","kind":"theorem","docLink":"./Mathlib/Data/Erased.html#Erased.join_eq_out","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L116-L117","name":"Erased.join","kind":"def","docLink":"./Mathlib/Data/Erased.html#Erased.join","doc":"Collapses two levels of erasure.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L111-L111","name":"Erased.bind_eq_out","kind":"theorem","docLink":"./Mathlib/Data/Erased.html#Erased.bind_eq_out","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L106-L107","name":"Erased.bind","kind":"def","docLink":"./Mathlib/Data/Erased.html#Erased.bind","doc":"`(>>=)` operation on `Erased`.\n\nThis is a separate definition because `α` and `β` can live in different\nuniverses (the universe is fixed in `Monad`).\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L98-L99","name":"Erased.instInhabitedErased","kind":"instance","docLink":"./Mathlib/Data/Erased.html#Erased.instInhabitedErased","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L94-L95","name":"Erased.nonempty_iff","kind":"theorem","docLink":"./Mathlib/Data/Erased.html#Erased.nonempty_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L89-L90","name":"Erased.choice","kind":"def","docLink":"./Mathlib/Data/Erased.html#Erased.choice","doc":"Computably produce an erased value from a proof of nonemptiness. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L83-L84","name":"Erased.instToStringErased","kind":"instance","docLink":"./Mathlib/Data/Erased.html#Erased.instToStringErased","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L80-L81","name":"Erased.instReprErased","kind":"instance","docLink":"./Mathlib/Data/Erased.html#Erased.instReprErased","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L76-L77","name":"Erased.equiv","kind":"def","docLink":"./Mathlib/Data/Erased.html#Erased.equiv","doc":"Equivalence between `Erased α` and `α`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L72-L72","name":"Erased.out_inj","kind":"theorem","docLink":"./Mathlib/Data/Erased.html#Erased.out_inj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L67-L68","name":"Erased.mk_out","kind":"theorem","docLink":"./Mathlib/Data/Erased.html#Erased.mk_out","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L60-L63","name":"Erased.out_mk","kind":"theorem","docLink":"./Mathlib/Data/Erased.html#Erased.out_mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L55-L56","name":"Erased.out_proof","kind":"theorem","docLink":"./Mathlib/Data/Erased.html#Erased.out_proof","doc":"Extracts the erased value, if it is a proof. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L50-L51","name":"Erased.OutType","kind":"def","docLink":"./Mathlib/Data/Erased.html#Erased.OutType","doc":"Extracts the erased value, if it is a type.\n\nNote: `(mk a).OutType` is not definitionally equal to `a`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L41-L42","name":"Erased.out","kind":"def","docLink":"./Mathlib/Data/Erased.html#Erased.out","doc":"Extracts the erased value, noncomputably. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L36-L37","name":"Erased.mk","kind":"def","docLink":"./Mathlib/Data/Erased.html#Erased.mk","doc":"Erase a value. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Erased.lean#L28-L29","name":"Erased","kind":"def","docLink":"./Mathlib/Data/Erased.html#Erased","doc":"`Erased α` is the same as `α`, except that the elements\nof `Erased α` are erased in the VM in the same way as types\nand proofs. This can be used to track data without storing it\nliterally. "}]}