{"name":"Mathlib.Tactic.RestateAxiom","instances":[],"imports":["Init","Lean","Lean.Data"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/RestateAxiom.lean#L14-L62","name":"commandRestate_axiom___","kind":"def","docLink":"./Mathlib/Tactic/RestateAxiom.html#commandRestate_axiom___","doc":"__DEPRECATED__: `restate_axiom` was necessary in Lean 3 but is no longer needed for Lean 4.\nIt is still present for backwards compatibility but will probably be removed in the future.\n\n# Original Docstring\n\n`restate_axiom` makes a new copy of a structure field, first definitionally simplifying the type.\nThis is useful to remove `autoParam` or `optParam` from the statement.\n\nAs an example, we have:\n```lean\nstructure A :=\n  (x : â„•)\n  (a' : x = 1 . skip)\n\nexample (z : A) : z.x = 1 := by rw A.a' -- rewrite tactic failed, lemma is not an equality nor a iff\n\nrestate_axiom A.a'\nexample (z : A) : z.x = 1 := by rw A.a\n```\n\nBy default, `restate_axiom` names the new lemma by removing a trailing `'`, or otherwise appending\n`_lemma` if there is no trailing `'`. You can also give `restate_axiom` a second argument to\nspecify the new name, as in\n```lean\nrestate_axiom A.a f\nexample (z : A) : z.x = 1 := by rw A.f\n```\n"}]}