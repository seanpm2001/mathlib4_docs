{"name":"Mathlib.Util.PiNotation","instances":[],"imports":["Init","Std.Util.ExtendedBinder"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/PiNotation.lean#L49-L59","name":"PiNotation.delabPi","kind":"def","docLink":"./Mathlib/Util/PiNotation.html#PiNotation.delabPi","doc":"Override the Lean 4 pi notation delaborator with one that uses `Π`.\nNote that this takes advantage of the fact that `(x : α) → p x` notation is\nnever used for propositions, so we can match on this result and rewrite it. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/PiNotation.lean#L41-L43","name":"PiNotation.replacePiNotation","kind":"def","docLink":"./Mathlib/Util/PiNotation.html#PiNotation.replacePiNotation","doc":"Since pi notation and forall notation are interchangeable, we can\nparse it by simply using the pre-existing forall parser. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/PiNotation.lean#L30-L33","name":"PiNotation.«termΠ__,_»","kind":"def","docLink":"./Mathlib/Util/PiNotation.html#PiNotation.«termΠ__,_»","doc":"Dependent function type (a \"pi type\"). The notation `Π x ∈ s, β x` is\nshort for `Π x, x ∈ s → β x`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/PiNotation.lean#L25-L28","name":"PiNotation.piNotation","kind":"def","docLink":"./Mathlib/Util/PiNotation.html#PiNotation.piNotation","doc":"Dependent function type (a \"pi type\"). The notation `Π x : α, β x` can\nalso be written as `(x : α) → β x`. "}]}