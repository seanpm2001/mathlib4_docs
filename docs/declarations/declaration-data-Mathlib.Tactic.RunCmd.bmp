{"name":"Mathlib.Tactic.RunCmd","instances":[],"imports":["Init","Lean.Elab.Eval","Std.Util.TermUnsafe"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/RunCmd.lean#L49-L61","name":"Mathlib.RunCmd.elabRunElab","kind":"def","docLink":"./Mathlib/Tactic/RunCmd.html#Mathlib.RunCmd.elabRunElab","doc":"Elaborator for `by_elab`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/RunCmd.lean#L40-L46","name":"Mathlib.RunCmd.byElab","kind":"def","docLink":"./Mathlib/Tactic/RunCmd.html#Mathlib.RunCmd.byElab","doc":"* The `by_elab doSeq` expression runs the `doSeq` as a `TermElabM Expr` to\n  synthesize the expression.\n* `by_elab fun expectedType? â†¦ do doSeq` receives the expected type (an `Option Expr`)\n  as well.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/RunCmd.lean#L35-L38","name":"Mathlib.RunCmd.runTac","kind":"def","docLink":"./Mathlib/Tactic/RunCmd.html#Mathlib.RunCmd.runTac","doc":"The `run_tac doSeq` tactic executes code in `TacticM Unit`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/RunCmd.lean#L24-L33","name":"Mathlib.RunCmd.runCmd","kind":"def","docLink":"./Mathlib/Tactic/RunCmd.html#Mathlib.RunCmd.runCmd","doc":"The `run_cmd doSeq` command executes code in `CommandElabM Unit`.\nThis is almost the same as `#eval show CommandElabM Unit from do doSeq`,\nexcept that it doesn't print an empty diagnostic.\n"}]}