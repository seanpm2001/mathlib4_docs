{"name":"Mathlib.Tactic.CategoryTheory.Elementwise","instances":[],"imports":["Init","Mathlib.CategoryTheory.ConcreteCategory.Basic","Mathlib.Util.AddRelatedDecl","Std.Tactic.Lint"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Elementwise.lean#L232-L232","name":"Tactic.Elementwise.tacticElementwise!___","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Elementwise.html#Tactic.Elementwise.tacticElementwise!___","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Elementwise.lean#L231-L231","name":"Tactic.Elementwise.tacticElementwise___","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Elementwise.html#Tactic.Elementwise.tacticElementwise___","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Elementwise.lean#L203-L228","name":"Tactic.Elementwise.¬´termElementwise_of%_¬ª","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Elementwise.html#Tactic.Elementwise.¬´termElementwise_of%_¬ª","doc":"`elementwise_of% h`, where `h` is a proof of an equation `f = g` between\nmorphisms `X ‚ü∂ Y` in a concrete category (possibly after a `‚àÄ` binder),\nproduces a proof of equation `‚àÄ (x : X), f x = g x`, but with compositions fully\nright associated and identities removed.\n\nA typical example is using `elementwise_of%` to dynamically generate rewrite lemmas:\n```lean\nexample (M N K : MonCat) (f : M ‚ü∂ N) (g : N ‚ü∂ K) (h : M ‚ü∂ K) (w : f ‚â´ g = h) (m : M) :\n    g (f m) = h m := by rw [elementwise_of% w]\n```\nIn this case, `elementwise_of% w` generates the lemma `‚àÄ (x : M), f (g x) = h x`.\n\nLike the `@[elementwise]` attribute, `elementwise_of%` inserts a `ConcreteCategory`\ninstance argument if it can't synthesize a relevant `ConcreteCategory` instance.\n(Technical note: The forgetful functor's universe variable is instantiated with a\nfresh level metavariable in this case.)\n\nOne difference between `elementwise_of%` and `@[elementwise]` is that `@[elementwise]` by\ndefault applies `simp` to both sides of the generated lemma to get something that is in simp\nnormal form. `elementwise_of%` does not do this.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Elementwise.lean#L143-L181","name":"Tactic.Elementwise.elementwise","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Elementwise.html#Tactic.Elementwise.elementwise","doc":"The `elementwise` attribute can be added to a lemma proving an equation of morphisms, and it\ncreates a new lemma for a `ConcreteCategory` giving an equation with those morphisms applied\nto some value.\n\nSyntax examples:\n- `@[elementwise]`\n- `@[elementwise nosimp]` to not use `simp` on both sides of the generated lemma\n- `@[elementwise (attr := simp)]` to apply the `simp` attribute to both the generated lemma and\n  the original lemma.\n\nExample application of `elementwise`:\n\n```lean\n@[elementwise]\nlemma some_lemma {C : Type _} [Category C]\n    {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (h : X ‚ü∂ Z) (w : ...) : f ‚â´ g = h := ...\n```\n\nproduces\n\n```lean\nlemma some_lemma_apply {C : Type _} [Category C]\n    {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (h : X ‚ü∂ Z) (w : ...)\n    [ConcreteCategory C] (x : X) : g (f x) = h x := ...\n```\n\nHere `X` is being coerced to a type via `CategoryTheory.ConcreteCategory.hasCoeToSort` and\n`f`, `g`, and `h` are being coerced to functions via `CategoryTheory.ConcreteCategory.hasCoeToFun`.\nFurther, we simplify the type using `CategoryTheory.coe_id : ((ùüô X) : X ‚Üí X) x = x` and\n`CategoryTheory.coe_comp : (f ‚â´ g) x = g (f x)`,\nreplacing morphism composition with function composition.\n\nThe `[ConcreteCategory C]` argument will be omitted if it is possible to synthesize an instance.\n\nThe name of the produced lemma can be specified with `@[elementwise other_lemma_name]`.\nIf `simp` is added first, the generated lemma will also have the `simp` attribute.\n "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Elementwise.lean#L112-L128","name":"Tactic.Elementwise.elementwiseExpr.mkHomElementwise","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Elementwise.html#Tactic.Elementwise.elementwiseExpr.mkHomElementwise","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Elementwise.lean#L106-L111","name":"Tactic.Elementwise.elementwiseExpr.extractCatInstance","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Elementwise.html#Tactic.Elementwise.elementwiseExpr.extractCatInstance","doc":"Given an equality, extract a `Category` instance from it or raise an error.\nReturns the name of the category and its instance. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Elementwise.lean#L77-L128","name":"Tactic.Elementwise.elementwiseExpr","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Elementwise.html#Tactic.Elementwise.elementwiseExpr","doc":"Given an equation `f = g` between morphisms `X ‚ü∂ Y` in a category `C`\n(possibly after a `‚àÄ` binder), produce the equation `‚àÄ (x : X), f x = g x` or\n`‚àÄ [ConcreteCategory C] (x : X), f x = g x` as needed (after the `‚àÄ` binder), but\nwith compositions fully right associated and identities removed.\n\nReturns the proof of the new theorem along with (optionally) a new level metavariable\nfor the first universe parameter to `ConcreteCategory`.\n\nThe `simpSides` option controls whether to simplify both sides of the equality, for simpNF\npurposes.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Elementwise.lean#L56-L63","name":"Tactic.Elementwise.elementwiseThms","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Elementwise.html#Tactic.Elementwise.elementwiseThms","doc":"List of simp lemmas to apply to the elementwise theorem. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Elementwise.lean#L50-L51","name":"Tactic.Elementwise.hom_elementwise","kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Elementwise.html#Tactic.Elementwise.hom_elementwise","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Elementwise.lean#L48-L48","name":"Tactic.Elementwise.forget_hom_Type","kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Elementwise.html#Tactic.Elementwise.forget_hom_Type","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Elementwise.lean#L43-L44","name":"Tactic.Elementwise.forall_congr_forget_Type","kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Elementwise.html#Tactic.Elementwise.forall_congr_forget_Type","doc":""}]}