{"name":"Mathlib.Tactic.Propose","instances":[],"imports":["Init","Mathlib.Lean.Expr.Basic","Mathlib.Lean.Meta","Mathlib.Lean.Meta.Basic","Mathlib.Lean.Meta.DiscrTree","Mathlib.Tactic.Cache","Mathlib.Tactic.Core","Mathlib.Tactic.SolveByElim","Mathlib.Tactic.TryThis"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Propose.lean#L133-L133","name":"Mathlib.Tactic.Propose.«tacticHave?!:_Using__»","kind":"def","docLink":"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.«tacticHave?!:_Using__»","doc":"* `have? using a, b, c` tries to find a lemma\nwhich makes use of each of the local hypotheses `a, b, c`,\nand reports any results via trace messages.\n* `have? : h using a, b, c` only returns lemmas whose type matches `h` (which may contain `_`).\n* `have?! using a, b, c` will also call `have` to add results to the local goal state.\n\nNote that `have?` (unlike `apply?`) does not inspect the goal at all,\nonly the types of the lemmas in the `using` clause.\n\n`have?` should not be left in proofs; it is a search tool, like `apply?`.\n\nSuggestions are printed as `have := f a b c`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Propose.lean#L96-L110","name":"Mathlib.Tactic.Propose.propose'","kind":"def","docLink":"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.propose'","doc":"* `have? using a, b, c` tries to find a lemma\nwhich makes use of each of the local hypotheses `a, b, c`,\nand reports any results via trace messages.\n* `have? : h using a, b, c` only returns lemmas whose type matches `h` (which may contain `_`).\n* `have?! using a, b, c` will also call `have` to add results to the local goal state.\n\nNote that `have?` (unlike `apply?`) does not inspect the goal at all,\nonly the types of the lemmas in the `using` clause.\n\n`have?` should not be left in proofs; it is a search tool, like `apply?`.\n\nSuggestions are printed as `have := f a b c`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Propose.lean#L74-L92","name":"Mathlib.Tactic.Propose.propose","kind":"def","docLink":"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.propose","doc":"Attempts to find lemmas which use all of the `required` expressions as arguments, and\ncan by unified with the given `type` (which may contain metavariables, which we avoid assigning).\nWe look up candidate lemmas from a discrimination tree using the first such expression.\n\nReturns an array of pairs, containing the names of found lemmas and the resulting application.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Propose.lean#L55-L65","name":"Mathlib.Tactic.Propose.solveByElim","kind":"def","docLink":"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.solveByElim","doc":"Shortcut for calling `solveByElim`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Propose.lean#L43-L52","name":"Mathlib.Tactic.Propose.proposeLemmas","kind":"opaque","docLink":"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.proposeLemmas","doc":""}]}