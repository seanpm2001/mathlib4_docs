{"name":"Mathlib.LinearAlgebra.Dfinsupp","instances":[{"typeNames":["Dfinsupp","LinearMap","RingHom.id","Semiring.toNonAssocSemiring","LinearMap.instZeroLinearMap"],"name":"Dfinsupp.addCommMonoidOfLinearMap","className":"AddCommMonoid"},{"typeNames":["Dfinsupp","LinearMap","RingHom.id","Semiring.toNonAssocSemiring","LinearMap.instZeroLinearMap","Dfinsupp.addCommMonoidOfLinearMap"],"name":"Dfinsupp.moduleOfLinearMap","className":"Module"},{"typeNames":["LinearEquiv"],"name":"Dfinsupp.instEquivLikeLinearEquiv","className":"EquivLike"}],"imports":["Init","Mathlib.Data.Finsupp.ToDfinsupp","Mathlib.LinearAlgebra.Basis"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L565-L569","name":"CompleteLattice.independent_iff_linearIndependent_of_ne_zero","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#CompleteLattice.independent_iff_linearIndependent_of_ne_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L545-L562","name":"CompleteLattice.Independent.linearIndependent","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#CompleteLattice.Independent.linearIndependent","doc":"If a family of submodules is `Independent`, then a choice of nonzero vector from each submodule\nforms a linearly independent family.\n\nSee also `CompleteLattice.Independent.linearIndependent'`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L536-L538","name":"CompleteLattice.independent_iff_dfinsupp_sumAddHom_injective","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#CompleteLattice.independent_iff_dfinsupp_sumAddHom_injective","doc":"A family of additive subgroups over an additive group are independent if and only if\n`Dfinsupp.sumAddHom` applied with `AddSubgroup.subtype` is injective. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L529-L531","name":"CompleteLattice.independent_iff_dfinsupp_lsum_injective","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#CompleteLattice.independent_iff_dfinsupp_lsum_injective","doc":"A family of submodules over an additive group are independent if and only iff `Dfinsupp.lsum`\napplied with `Submodule.subtype` is injective.\n\nNote that this is not generally true for `[Semiring R]`; see\n`CompleteLattice.Independent.dfinsupp_lsum_injective` for details. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L518-L521","name":"CompleteLattice.Independent.dfinsupp_sumAddHom_injective","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#CompleteLattice.Independent.dfinsupp_sumAddHom_injective","doc":"The canonical map out of a direct sum of a family of additive subgroups is injective when the\nadditive subgroups are `CompleteLattice.Independent`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L497-L513","name":"CompleteLattice.Independent.dfinsupp_lsum_injective","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#CompleteLattice.Independent.dfinsupp_lsum_injective","doc":"The canonical map out of a direct sum of a family of submodules is injective when the submodules\nare `CompleteLattice.Independent`.\n\nNote that this is not generally true for `[Semiring R]`, for instance when `A` is the\n`ℕ`-submodules of the positive and negative integers.\n\nSee `counterexamples/direct_sum_is_internal.lean` for a proof of this fact. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L484-L487","name":"CompleteLattice.independent_of_dfinsupp_sumAddHom_injective'","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#CompleteLattice.independent_of_dfinsupp_sumAddHom_injective'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L465-L473","name":"CompleteLattice.lsum_comp_mapRange_toSpanSingleton","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#CompleteLattice.lsum_comp_mapRange_toSpanSingleton","doc":"Combining `Dfinsupp.lsum` with `LinearMap.toSpanSingleton` is the same as `Finsupp.total` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L458-L461","name":"CompleteLattice.independent_of_dfinsupp_sumAddHom_injective","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#CompleteLattice.independent_of_dfinsupp_sumAddHom_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L443-L453","name":"CompleteLattice.independent_of_dfinsupp_lsum_injective","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#CompleteLattice.independent_of_dfinsupp_lsum_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L431-L438","name":"CompleteLattice.independent_iff_forall_dfinsupp","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#CompleteLattice.independent_iff_forall_dfinsupp","doc":"Independence of a family of submodules can be expressed as a quantifier over `Dfinsupp`s.\n\nThis is an intermediate result used to prove\n`CompleteLattice.independent_of_dfinsupp_lsum_injective` and\n`CompleteLattice.Independent.dfinsupp_lsum_injective`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L379-L413","name":"Submodule.mem_iSup_finset_iff_exists_sum","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Submodule.mem_iSup_finset_iff_exists_sum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L369-L374","name":"Submodule.mem_biSup_iff_exists_dfinsupp","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Submodule.mem_biSup_iff_exists_dfinsupp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L362-L366","name":"Submodule.mem_iSup_iff_exists_dfinsupp'","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Submodule.mem_iSup_iff_exists_dfinsupp'","doc":"A variant of `Submodule.mem_iSup_iff_exists_dfinsupp` with the RHS fully unfolded. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L355-L358","name":"Submodule.mem_iSup_iff_exists_dfinsupp","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Submodule.mem_iSup_iff_exists_dfinsupp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L337-L352","name":"Submodule.biSup_eq_range_dfinsupp_lsum","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Submodule.biSup_eq_range_dfinsupp_lsum","doc":"The bounded supremum of a family of commutative additive submonoids is equal to the range of\n`Dfinsupp.sumAddHom` composed with `Dfinsupp.filter_add_monoid_hom`; that is, every element in the\nbounded `iSup` can be produced from taking a finite number of non-zero elements from the `S i` that\nsatisfy `p i`, coercing them to `γ`, and summing them. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L322-L330","name":"Submodule.iSup_eq_range_dfinsupp_lsum","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Submodule.iSup_eq_range_dfinsupp_lsum","doc":"The supremum of a family of submodules is equal to the range of `Dfinsupp.lsum`; that is\nevery element in the `iSup` can be produced from taking a finite number of non-zero elements\nof `p i`, coercing them to `N`, and summing them. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L313-L316","name":"Submodule.dfinsupp_sumAddHom_mem","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Submodule.dfinsupp_sumAddHom_mem","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L307-L310","name":"Submodule.dfinsupp_sum_mem","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Submodule.dfinsupp_sum_mem","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L291-L294","name":"Dfinsupp.basis","kind":"def","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.basis","doc":"The direct sum of free modules is free.\n\nNote that while this is stated for `Dfinsupp` not `DirectSum`, the types are defeq. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L280-L282","name":"Dfinsupp.coprodMap_apply_single","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.coprodMap_apply_single","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L273-L277","name":"Dfinsupp.coprodMap_apply","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.coprodMap_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L268-L270","name":"Dfinsupp.coprodMap","kind":"def","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.coprodMap","doc":"Given a family of linear maps `f i : M i  →ₗ[R] N`, we can form a linear map\n`(Π₀ i, M i) →ₗ[R] N` which sends `x : Π₀ i, M i` to the sum over `i` of `f i` applied to `x i`.\nThis is the map coming from the universal property of `Π₀ i, M i` as the coproduct of the `M i`.\nSee also `LinearMap.coprod` for the binary product version. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L253-L255","name":"Dfinsupp.mapRange.linearEquiv_symm","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.mapRange.linearEquiv_symm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L245-L249","name":"Dfinsupp.mapRange.linearEquiv_trans","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.mapRange.linearEquiv_trans","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L240-L242","name":"Dfinsupp.mapRange.linearEquiv_refl","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.mapRange.linearEquiv_refl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L232-L236","name":"Dfinsupp.mapRange.linearEquiv","kind":"def","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.mapRange.linearEquiv","doc":"`Dfinsupp.mapRange.linearMap` as a `LinearEquiv`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L231-L231","name":"Dfinsupp.mapRange.linearEquiv_apply","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.mapRange.linearEquiv_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L221-L227","name":"Dfinsupp.sum_mapRange_index.linearMap","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.sum_mapRange_index.linearMap","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L214-L218","name":"Dfinsupp.mapRange.linearMap_comp","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.mapRange.linearMap_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L208-L211","name":"Dfinsupp.mapRange.linearMap_id","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.mapRange.linearMap_id","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L201-L204","name":"Dfinsupp.mapRange.linearMap","kind":"def","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.mapRange.linearMap","doc":"`Dfinsupp.mapRange` as a `LinearMap`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L200-L200","name":"Dfinsupp.mapRange.linearMap_apply","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.mapRange.linearMap_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L192-L196","name":"Dfinsupp.mapRange_smul","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.mapRange_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L171-L173","name":"Dfinsupp.lsum_single","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.lsum_single","doc":"While `simp` can prove this, it is often convenient to avoid unfolding `lsum` into `sumAddHom`\nwith `Dfinsupp.lsum_apply_apply`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L137-L166","name":"Dfinsupp.lsum","kind":"def","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.lsum","doc":"The `Dfinsupp` version of `Finsupp.lsum`.\n\nSee note [bundled maps over different rings] for why separate `R` and `S` semirings are used. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L136-L136","name":"Dfinsupp.lsum_symm_apply","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.lsum_symm_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L136-L136","name":"Dfinsupp.lsum_apply_apply","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.lsum_apply_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L125-L129","name":"Dfinsupp.instEquivLikeLinearEquiv","kind":"instance","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.instEquivLikeLinearEquiv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L117-L119","name":"Dfinsupp.moduleOfLinearMap","kind":"instance","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.moduleOfLinearMap","doc":"Typeclass inference can't find `Dfinsupp.module` without help for this case.\nThis is needed to define `Dfinsupp.lsum` below.\n\nThe cause seems to be an inability to unify the `∀ i, AddCommMonoid (M i →ₗ[R] N)` instance that\nwe have with the `∀ i, Zero (M i →ₗ[R] N)` instance which appears as a parameter to the\n`Dfinsupp` type. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L107-L108","name":"Dfinsupp.addCommMonoidOfLinearMap","kind":"instance","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.addCommMonoidOfLinearMap","doc":"Typeclass inference can't find `Dfinsupp.addCommMonoid` without help for this case.\nThis instance allows it to be found where it is needed on the LHS of the colon in\n`Dfinsupp.moduleOfLinearMap`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L97-L98","name":"Dfinsupp.lapply_apply","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.lapply_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L92-L93","name":"Dfinsupp.lsingle_apply","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.lsingle_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L87-L88","name":"Dfinsupp.lmk_apply","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.lmk_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L80-L83","name":"Dfinsupp.lapply","kind":"def","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.lapply","doc":"Interpret `fun (f : Π₀ i, M i) ↦ f i` as a linear map. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L74-L76","name":"Dfinsupp.lhom_ext'","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.lhom_ext'","doc":"Two `R`-linear maps from `Π₀ i, M i` which agree on each `single i x` agree everywhere.\n\nSee note [partially-applied ext lemmas].\nAfter apply this lemma, if `M = R` then it suffices to verify `φ (single a 1) = ψ (single a 1)`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L65-L66","name":"Dfinsupp.lhom_ext","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.lhom_ext","doc":"Two `R`-linear maps from `Π₀ i, M i` which agree on each `single i x` agree everywhere. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L58-L61","name":"Dfinsupp.lsingle","kind":"def","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.lsingle","doc":"`Dfinsupp.single` as a `LinearMap` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Dfinsupp.lean#L51-L54","name":"Dfinsupp.lmk","kind":"def","docLink":"./Mathlib/LinearAlgebra/Dfinsupp.html#Dfinsupp.lmk","doc":"`Dfinsupp.mk` as a `LinearMap`. "}]}