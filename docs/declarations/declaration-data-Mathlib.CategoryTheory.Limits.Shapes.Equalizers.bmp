{"name":"Mathlib.CategoryTheory.Limits.Shapes.Equalizers","instances":[{"typeNames":["Eq","CategoryTheory.Limits.WalkingParallelPair"],"name":"CategoryTheory.Limits.instDecidableEqWalkingParallelPair","className":"Decidable"},{"typeNames":["CategoryTheory.Limits.WalkingParallelPair"],"name":"CategoryTheory.Limits.instInhabitedWalkingParallelPair","className":"Inhabited"},{"typeNames":["Eq","CategoryTheory.Limits.WalkingParallelPairHom"],"name":"CategoryTheory.Limits.instDecidableEqWalkingParallelPairHom","className":"Decidable"},{"typeNames":["CategoryTheory.Limits.WalkingParallelPairHom","CategoryTheory.Limits.WalkingParallelPair.zero","CategoryTheory.Limits.WalkingParallelPair.one"],"name":"CategoryTheory.Limits.instInhabitedWalkingParallelPairHomZeroOne","className":"Inhabited"},{"typeNames":["CategoryTheory.Limits.WalkingParallelPair"],"name":"CategoryTheory.Limits.walkingParallelPairHomCategory","className":"CategoryTheory.Category"},{"typeNames":["CategoryTheory.Limits.equalizer","CategoryTheory.Limits.equalizer.Œπ"],"name":"CategoryTheory.Limits.equalizer.Œπ_mono","className":"CategoryTheory.Mono"},{"typeNames":[],"name":"CategoryTheory.Limits.hasEqualizer_of_self","className":"CategoryTheory.Limits.HasLimit"},{"typeNames":["CategoryTheory.Limits.equalizer","CategoryTheory.Limits.hasEqualizer_of_self","CategoryTheory.Limits.equalizer.Œπ","CategoryTheory.Limits.hasEqualizer_of_self"],"name":"CategoryTheory.Limits.equalizer.Œπ_of_self","className":"CategoryTheory.IsIso"},{"typeNames":["CategoryTheory.Limits.coequalizer","CategoryTheory.Limits.coequalizer.œÄ"],"name":"CategoryTheory.Limits.coequalizer.œÄ_epi","className":"CategoryTheory.Epi"},{"typeNames":[],"name":"CategoryTheory.Limits.hasCoequalizer_of_self","className":"CategoryTheory.Limits.HasColimit"},{"typeNames":["CategoryTheory.Limits.coequalizer","CategoryTheory.Limits.hasCoequalizer_of_self","CategoryTheory.Limits.coequalizer.œÄ","CategoryTheory.Limits.hasCoequalizer_of_self"],"name":"CategoryTheory.Limits.coequalizer.œÄ_of_self","className":"CategoryTheory.IsIso"}],"imports":["Init","Mathlib.CategoryTheory.EpiMono","Mathlib.CategoryTheory.Limits.HasLimits"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1353-L1355","name":"CategoryTheory.Limits.splitEpiOfIdempotentCoequalizer","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.splitEpiOfIdempotentCoequalizer","doc":"The coequalizer of an idempotent morphism and the identity is split epi. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1342-L1349","name":"CategoryTheory.Limits.splitEpiOfIdempotentOfIsColimitCofork","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.splitEpiOfIdempotentOfIsColimitCofork","doc":"A coequalizer of an idempotent morphism and the identity is split epi. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1341-L1341","name":"CategoryTheory.Limits.splitEpiOfIdempotentOfIsColimitCofork_section_","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.splitEpiOfIdempotentOfIsColimitCofork_section_","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1332-L1335","name":"CategoryTheory.Limits.hasCoequalizer_epi_comp","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.hasCoequalizer_epi_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1319-L1329","name":"CategoryTheory.Limits.isCoequalizerEpiComp","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.isCoequalizerEpiComp","doc":"The cofork obtained by precomposing a coequalizer cofork with an epimorphism is\na coequalizer. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1304-L1312","name":"CategoryTheory.Limits.splitEpiOfCoequalizer","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.splitEpiOfCoequalizer","doc":"We show that the converse to `isSplitEpiEqualizes` is true:\nWhenever `f` coequalizes `(f ‚â´ s)` and `(ùüô X)`, then `s` is a section of `f`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1292-L1297","name":"CategoryTheory.Limits.isSplitEpiCoequalizes","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.isSplitEpiCoequalizes","doc":"A split epi `f` coequalizes `(f ‚â´ section_ f)` and `(ùüô X)`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1286-L1287","name":"CategoryTheory.Limits.coconeOfIsSplitEpi_œÄ","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coconeOfIsSplitEpi_œÄ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1281-L1282","name":"CategoryTheory.Limits.coconeOfIsSplitEpi","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coconeOfIsSplitEpi","doc":"A split epi `f` coequalizes `(f ‚â´ section_ f)` and `(ùüô X)`.\nHere we build the cocone, and show in `isSplitEpiCoequalizes` that it is a colimit cocone.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1280-L1280","name":"CategoryTheory.Limits.coconeOfIsSplitEpi_pt","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coconeOfIsSplitEpi_pt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1280-L1280","name":"CategoryTheory.Limits.coconeOfIsSplitEpi_Œπ_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coconeOfIsSplitEpi_Œπ_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1266-L1268","name":"CategoryTheory.Limits.splitMonoOfIdempotentEqualizer","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.splitMonoOfIdempotentEqualizer","doc":"The equalizer of an idempotent morphism and the identity is split mono. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1256-L1262","name":"CategoryTheory.Limits.splitMonoOfIdempotentOfIsLimitFork","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.splitMonoOfIdempotentOfIsLimitFork","doc":"An equalizer of an idempotent morphism and the identity is split mono. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1255-L1255","name":"CategoryTheory.Limits.splitMonoOfIdempotentOfIsLimitFork_retraction","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.splitMonoOfIdempotentOfIsLimitFork_retraction","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1248-L1251","name":"CategoryTheory.Limits.hasEqualizer_comp_mono","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.hasEqualizer_comp_mono","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1233-L1242","name":"CategoryTheory.Limits.isEqualizerCompMono","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.isEqualizerCompMono","doc":"The fork obtained by postcomposing an equalizer fork with a monomorphism is an equalizer. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1223-L1227","name":"CategoryTheory.Limits.splitMonoOfEqualizer","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.splitMonoOfEqualizer","doc":"We show that the converse to `isSplitMonoEqualizes` is true:\nWhenever `f` equalizes `(r ‚â´ f)` and `(ùüô Y)`, then `r` is a retraction of `f`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1210-L1216","name":"CategoryTheory.Limits.isSplitMonoEqualizes","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.isSplitMonoEqualizes","doc":"A split mono `f` equalizes `(retraction f ‚â´ f)` and `(ùüô Y)`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1204-L1205","name":"CategoryTheory.Limits.coneOfIsSplitMono_Œπ","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coneOfIsSplitMono_Œπ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1199-L1200","name":"CategoryTheory.Limits.coneOfIsSplitMono","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coneOfIsSplitMono","doc":"A split mono `f` equalizes `(retraction f ‚â´ f)` and `(ùüô Y)`.\nHere we build the cone, and show in `isSplitMonoEqualizes` that it is a limit cone.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1198-L1198","name":"CategoryTheory.Limits.coneOfIsSplitMono_œÄ_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coneOfIsSplitMono_œÄ_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1198-L1198","name":"CategoryTheory.Limits.coneOfIsSplitMono_pt","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coneOfIsSplitMono_pt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1184-L1186","name":"CategoryTheory.Limits.hasCoequalizers_of_hasColimit_parallelPair","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.hasCoequalizers_of_hasColimit_parallelPair","doc":"If `C` has all colimits of diagrams `parallelPair f g`, then it has all coequalizers "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1178-L1180","name":"CategoryTheory.Limits.hasEqualizers_of_hasLimit_parallelPair","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.hasEqualizers_of_hasLimit_parallelPair","doc":"If `C` has all limits of diagrams `parallelPair f g`, then it has all equalizers "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1173-L1174","name":"CategoryTheory.Limits.HasCoequalizers","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.HasCoequalizers","doc":"`HasCoequalizers` represents a choice of coequalizer for every pair of morphisms "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1168-L1169","name":"CategoryTheory.Limits.HasEqualizers","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.HasEqualizers","doc":"`HasEqualizers` represents a choice of equalizer for every pair of morphisms "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1155-L1160","name":"CategoryTheory.Limits.coequalizerComparison_map_desc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizerComparison_map_desc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1154-L1154","name":"CategoryTheory.Limits.coequalizerComparison_map_desc_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizerComparison_map_desc_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1149-L1151","name":"CategoryTheory.Limits.Œπ_comp_coequalizerComparison","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Œπ_comp_coequalizerComparison","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1148-L1148","name":"CategoryTheory.Limits.Œπ_comp_coequalizerComparison_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Œπ_comp_coequalizerComparison_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1142-L1145","name":"CategoryTheory.Limits.coequalizerComparison","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizerComparison","doc":"The comparison morphism for the coequalizer of `f,g`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1133-L1138","name":"CategoryTheory.Limits.map_lift_equalizerComparison","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.map_lift_equalizerComparison","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1132-L1132","name":"CategoryTheory.Limits.map_lift_equalizerComparison_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.map_lift_equalizerComparison_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1127-L1129","name":"CategoryTheory.Limits.equalizerComparison_comp_œÄ","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizerComparison_comp_œÄ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1126-L1126","name":"CategoryTheory.Limits.equalizerComparison_comp_œÄ_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizerComparison_comp_œÄ_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1120-L1123","name":"CategoryTheory.Limits.equalizerComparison","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizerComparison","doc":"The comparison morphism for the equalizer of `f,g`.\nThis is an isomorphism iff `G` preserves the equalizer of `f,g`; see\n`CategoryTheory/Limits/Preserves/Shapes/Equalizers.lean`\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1108-L1109","name":"CategoryTheory.Limits.coequalizer.isoTargetOfSelf_inv","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizer.isoTargetOfSelf_inv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1101-L1104","name":"CategoryTheory.Limits.coequalizer.isoTargetOfSelf_hom","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizer.isoTargetOfSelf_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1096-L1097","name":"CategoryTheory.Limits.coequalizer.isoTargetOfSelf","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizer.isoTargetOfSelf","doc":"The coequalizer of a morphism with itself is isomorphic to the target. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1091-L1092","name":"CategoryTheory.Limits.coequalizer.œÄ_of_self","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizer.œÄ_of_self","doc":"The coequalizer projection for `(f, f)` is an isomorphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1084-L1087","name":"CategoryTheory.Limits.hasCoequalizer_of_self","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.hasCoequalizer_of_self","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1078-L1079","name":"CategoryTheory.Limits.eq_of_mono_coequalizer","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.eq_of_mono_coequalizer","doc":"If the coequalizer of two morphisms is a monomorphism, then the two morphisms are equal. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1073-L1074","name":"CategoryTheory.Limits.eq_of_mono_cofork_œÄ","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.eq_of_mono_cofork_œÄ","doc":"Two morphisms are equal if there is a cofork whose projection is mono. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1067-L1069","name":"CategoryTheory.Limits.isIso_limit_cocone_parallelPair_of_epi","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.isIso_limit_cocone_parallelPair_of_epi","doc":"A coequalizer that is a monomorphism is an isomorphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1062-L1063","name":"CategoryTheory.Limits.isIso_colimit_cocone_parallelPair_of_self","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.isIso_colimit_cocone_parallelPair_of_self","doc":"Every coequalizer of `(f, f)` is an isomorphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1057-L1058","name":"CategoryTheory.Limits.coequalizer.œÄ_of_eq","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizer.œÄ_of_eq","doc":"The coequalizer of `(f, g)`, where `f = g`, is an isomorphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1051-L1053","name":"CategoryTheory.Limits.isIso_colimit_cocone_parallelPair_of_eq","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.isIso_colimit_cocone_parallelPair_of_eq","doc":"Every coequalizer of `(f, g)`, where `f = g`, is an isomorphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1044-L1047","name":"CategoryTheory.Limits.isColimitIdCofork","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.isColimitIdCofork","doc":"The identity on `Y` is a coequalizer of `(f, g)`, where `f = g`.  "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1039-L1040","name":"CategoryTheory.Limits.idCofork","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.idCofork","doc":"The identity determines a cocone on the coequalizer diagram of `f` and `g`, if `f = g`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1028-L1029","name":"CategoryTheory.Limits.epi_of_isColimit_cofork","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.epi_of_isColimit_cofork","doc":"The coequalizer morphism in any colimit cocone is an epimorphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1017-L1018","name":"CategoryTheory.Limits.coequalizer.œÄ_epi","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizer.œÄ_epi","doc":"A coequalizer morphism is an epimorphism "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1011-L1013","name":"CategoryTheory.Limits.coequalizer.existsUnique","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizer.existsUnique","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L1006-L1008","name":"CategoryTheory.Limits.coequalizer.hom_ext","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizer.hom_ext","doc":"Two maps from a coequalizer are equal if they are equal when composed with the coequalizer\nmap "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L998-L1000","name":"CategoryTheory.Limits.coequalizer.desc'","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizer.desc'","doc":"Any morphism `k : Y ‚ü∂ W` satisfying `f ‚â´ k = g ‚â´ k` induces a morphism\n`l : coequalizer f g ‚ü∂ W` satisfying `coequalizer.œÄ ‚â´ g = l`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L988-L993","name":"CategoryTheory.Limits.coequalizer.œÄ_colimMap_desc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizer.œÄ_colimMap_desc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L983-L985","name":"CategoryTheory.Limits.coequalizer.œÄ_desc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizer.œÄ_desc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L982-L982","name":"CategoryTheory.Limits.coequalizer.œÄ_desc_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizer.œÄ_desc_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L976-L978","name":"CategoryTheory.Limits.coequalizer.desc","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizer.desc","doc":"Any morphism `k : Y ‚ü∂ W` satisfying `f ‚â´ k = g ‚â´ k` factors through the coequalizer of `f`\nand `g` via `coequalizer.desc : coequalizer f g ‚ü∂ W`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L967-L969","name":"CategoryTheory.Limits.coequalizerIsCoequalizer","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizerIsCoequalizer","doc":"The cofork built from `coequalizer.œÄ f g` is colimiting. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L962-L963","name":"CategoryTheory.Limits.coequalizer.condition","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizer.condition","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L961-L961","name":"CategoryTheory.Limits.coequalizer.condition_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizer.condition_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L957-L958","name":"CategoryTheory.Limits.coequalizer.cofork_Œπ_app_one","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizer.cofork_Œπ_app_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L952-L953","name":"CategoryTheory.Limits.coequalizer.cofork_œÄ","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizer.cofork_œÄ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L947-L948","name":"CategoryTheory.Limits.coequalizer.cofork","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizer.cofork","doc":"An arbitrary choice of coequalizer cocone for a parallel pair `f` and `g`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L941-L942","name":"CategoryTheory.Limits.coequalizer.œÄ","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizer.œÄ","doc":"If a coequalizer of `f` and `g` exists, we can access the corresponding projection by\nsaying `coequalizer.œÄ f g`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L935-L936","name":"CategoryTheory.Limits.coequalizer","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.coequalizer","doc":"If a coequalizer of `f` and `g` exists, we can access an arbitrary choice of such by\nsaying `coequalizer f g`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L927-L928","name":"CategoryTheory.Limits.HasCoequalizer","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.HasCoequalizer","doc":"`HasCoequalizer f g` represents a particular choice of colimiting cocone\nfor the parallel pair of morphisms `f` and `g`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L916-L919","name":"CategoryTheory.Limits.equalizer.isoSourceOfSelf_inv","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizer.isoSourceOfSelf_inv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L911-L912","name":"CategoryTheory.Limits.equalizer.isoSourceOfSelf_hom","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizer.isoSourceOfSelf_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L906-L907","name":"CategoryTheory.Limits.equalizer.isoSourceOfSelf","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizer.isoSourceOfSelf","doc":"The equalizer of a morphism with itself is isomorphic to the source. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L901-L902","name":"CategoryTheory.Limits.equalizer.Œπ_of_self","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizer.Œπ_of_self","doc":"The equalizer inclusion for `(f, f)` is an isomorphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L894-L897","name":"CategoryTheory.Limits.hasEqualizer_of_self","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.hasEqualizer_of_self","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L888-L889","name":"CategoryTheory.Limits.eq_of_epi_equalizer","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.eq_of_epi_equalizer","doc":"If the equalizer of two morphisms is an epimorphism, then the two morphisms are equal. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L883-L884","name":"CategoryTheory.Limits.eq_of_epi_fork_Œπ","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.eq_of_epi_fork_Œπ","doc":"Two morphisms are equal if there is a fork whose inclusion is epi. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L878-L879","name":"CategoryTheory.Limits.isIso_limit_cone_parallelPair_of_epi","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.isIso_limit_cone_parallelPair_of_epi","doc":"An equalizer that is an epimorphism is an isomorphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L873-L874","name":"CategoryTheory.Limits.isIso_limit_cone_parallelPair_of_self","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.isIso_limit_cone_parallelPair_of_self","doc":"Every equalizer of `(f, f)` is an isomorphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L868-L869","name":"CategoryTheory.Limits.equalizer.Œπ_of_eq","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizer.Œπ_of_eq","doc":"The equalizer of `(f, g)`, where `f = g`, is an isomorphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L862-L864","name":"CategoryTheory.Limits.isIso_limit_cone_parallelPair_of_eq","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.isIso_limit_cone_parallelPair_of_eq","doc":"Every equalizer of `(f, g)`, where `f = g`, is an isomorphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L855-L858","name":"CategoryTheory.Limits.isLimitIdFork","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.isLimitIdFork","doc":"The identity on `X` is an equalizer of `(f, g)`, if `f = g`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L850-L851","name":"CategoryTheory.Limits.idFork","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.idFork","doc":"The identity determines a cone on the equalizer diagram of `f` and `g` if `f = g`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L839-L840","name":"CategoryTheory.Limits.mono_of_isLimit_fork","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.mono_of_isLimit_fork","doc":"The equalizer morphism in any limit cone is a monomorphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L828-L829","name":"CategoryTheory.Limits.equalizer.Œπ_mono","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizer.Œπ_mono","doc":"An equalizer morphism is a monomorphism "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L822-L824","name":"CategoryTheory.Limits.equalizer.existsUnique","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizer.existsUnique","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L817-L819","name":"CategoryTheory.Limits.equalizer.hom_ext","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizer.hom_ext","doc":"Two maps into an equalizer are equal if they are are equal when composed with the equalizer\nmap. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L809-L811","name":"CategoryTheory.Limits.equalizer.lift'","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizer.lift'","doc":"A morphism `k : W ‚ü∂ X` satisfying `k ‚â´ f = k ‚â´ g` induces a morphism `l : W ‚ü∂ equalizer f g`\nsatisfying `l ‚â´ equalizer.Œπ f g = k`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L802-L804","name":"CategoryTheory.Limits.equalizer.lift_Œπ","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizer.lift_Œπ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L801-L801","name":"CategoryTheory.Limits.equalizer.lift_Œπ_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizer.lift_Œπ_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L796-L797","name":"CategoryTheory.Limits.equalizer.lift","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizer.lift","doc":"A morphism `k : W ‚ü∂ X` satisfying `k ‚â´ f = k ‚â´ g` factors through the equalizer of `f` and `g`\nvia `equalizer.lift : W ‚ü∂ equalizer f g`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L787-L789","name":"CategoryTheory.Limits.equalizerIsEqualizer","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizerIsEqualizer","doc":"The equalizer built from `equalizer.Œπ f g` is limiting. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L782-L783","name":"CategoryTheory.Limits.equalizer.condition","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizer.condition","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L781-L781","name":"CategoryTheory.Limits.equalizer.condition_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizer.condition_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L777-L778","name":"CategoryTheory.Limits.equalizer.fork_œÄ_app_zero","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizer.fork_œÄ_app_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L772-L773","name":"CategoryTheory.Limits.equalizer.fork_Œπ","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizer.fork_Œπ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L767-L768","name":"CategoryTheory.Limits.equalizer.fork","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizer.fork","doc":"An equalizer cone for a parallel pair `f` and `g` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L762-L763","name":"CategoryTheory.Limits.equalizer.Œπ","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizer.Œπ","doc":"If an equalizer of `f` and `g` exists, we can access the inclusion\n`equalizer f g ‚ü∂ X` by saying `equalizer.Œπ f g`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L756-L757","name":"CategoryTheory.Limits.equalizer","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.equalizer","doc":"If an equalizer of `f` and `g` exists, we can access an arbitrary choice of such by\nsaying `equalizer f g`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L748-L749","name":"CategoryTheory.Limits.HasEqualizer","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.HasEqualizer","doc":"`HasEqualizer f g` represents a particular choice of limiting cone\nfor the parallel pair of morphisms `f` and `g`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L737-L738","name":"CategoryTheory.Limits.Cofork.isoCoforkOfœÄ","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.isoCoforkOfœÄ","doc":"Every cofork is isomorphic to one of the form `Cofork.ofœÄ _ _`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L730-L733","name":"CategoryTheory.Limits.Cofork.ext","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.ext","doc":"To construct an isomorphism between coforks,\nit suffices to give an isomorphism between the cocone points\nand check that it commutes with the `œÄ` morphisms.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L729-L729","name":"CategoryTheory.Limits.Cofork.ext_hom","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.ext_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L729-L729","name":"CategoryTheory.Limits.Cofork.ext_inv","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.ext_inv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L721-L722","name":"CategoryTheory.Limits.Fork.œÄ_comp_hom","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.œÄ_comp_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L720-L720","name":"CategoryTheory.Limits.Fork.œÄ_comp_hom_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.œÄ_comp_hom_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L716-L717","name":"CategoryTheory.Limits.Fork.hom_comp_Œπ","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.hom_comp_Œπ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L715-L715","name":"CategoryTheory.Limits.Fork.hom_comp_Œπ_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.hom_comp_Œπ_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L707-L712","name":"CategoryTheory.Limits.Cofork.mkHom","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.mkHom","doc":"Helper function for constructing morphisms between coequalizer coforks.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L706-L706","name":"CategoryTheory.Limits.Cofork.mkHom_Hom","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.mkHom_Hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L700-L701","name":"CategoryTheory.Limits.Fork.isoForkOfŒπ","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.isoForkOfŒπ","doc":"Every fork is isomorphic to one of the form `Fork.of_Œπ _ _`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L693-L696","name":"CategoryTheory.Limits.Fork.ext","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.ext","doc":"To construct an isomorphism between forks,\nit suffices to give an isomorphism between the cone points\nand check that it commutes with the `Œπ` morphisms.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L692-L692","name":"CategoryTheory.Limits.Fork.ext_hom","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.ext_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L692-L692","name":"CategoryTheory.Limits.Fork.ext_inv","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.ext_inv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L679-L685","name":"CategoryTheory.Limits.Fork.mkHom","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.mkHom","doc":"Helper function for constructing morphisms between equalizer forks.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L678-L678","name":"CategoryTheory.Limits.Fork.mkHom_Hom","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.mkHom_Hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L671-L673","name":"CategoryTheory.Limits.Cofork.œÄ_precompose","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.œÄ_precompose","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L665-L667","name":"CategoryTheory.Limits.Fork.Œπ_postcompose","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.Œπ_postcompose","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L660-L661","name":"CategoryTheory.Limits.Cofork.ofCocone_Œπ","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.ofCocone_Œπ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L655-L656","name":"CategoryTheory.Limits.Fork.ofCone_œÄ","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.ofCone_œÄ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L647-L651","name":"CategoryTheory.Limits.Cofork.ofCocone","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.ofCocone","doc":"Given `F : WalkingParallelPair ‚•§ C`, which is really the same as\n`parallelPair (F.map left) (F.map right)` and a cocone on `F`, we get a cofork on\n`F.map left` and `F.map right`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L637-L641","name":"CategoryTheory.Limits.Fork.ofCone","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.ofCone","doc":"Given `F : WalkingParallelPair ‚•§ C`, which is really the same as\n`parallelPair (F.map left) (F.map right)` and a cone on `F`, we get a fork on\n`F.map left` and `F.map right`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L630-L631","name":"CategoryTheory.Limits.Cocone.ofCofork_Œπ","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cocone.ofCofork_Œπ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L625-L626","name":"CategoryTheory.Limits.Cone.ofFork_œÄ","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cone.ofFork_œÄ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L616-L621","name":"CategoryTheory.Limits.Cocone.ofCofork","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cocone.ofCofork","doc":"This is a helper construction that can be useful when verifying that a category has all\ncoequalizers. Given `F : WalkingParallelPair ‚•§ C`, which is really the same as\n`parallelPair (F.map left) (F.map right)`, and a cofork on `F.map left` and `F.map right`,\nwe get a cocone on `F`.\n\nIf you're thinking about using this, have a look at\n`hasCoequalizers_of_hasColimit_parallelPair`, which you may find to be an easier way of\nachieving your goal. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L600-L605","name":"CategoryTheory.Limits.Cone.ofFork","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cone.ofFork","doc":"This is a helper construction that can be useful when verifying that a category has all\nequalizers. Given `F : WalkingParallelPair ‚•§ C`, which is really the same as\n`parallelPair (F.map left) (F.map right)`, and a fork on `F.map left` and `F.map right`,\nwe get a cone on `F`.\n\nIf you're thinking about using this, have a look at `hasEqualizers_of_hasLimit_parallelPair`,\nwhich you may find to be an easier way of achieving your goal. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L586-L590","name":"CategoryTheory.Limits.Cofork.IsColimit.homIso_natural","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.IsColimit.homIso_natural","doc":"The bijection of `Cofork.IsColimit.homIso` is natural in `Z`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L577-L582","name":"CategoryTheory.Limits.Cofork.IsColimit.homIso","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.IsColimit.homIso","doc":"Given a colimit cocone for the pair `f g : X ‚ü∂ Y`, for any `Z`, morphisms from the cocone point\nto `Z` are in bijection with morphisms `h : Y ‚ü∂ Z` such that `f ‚â´ h = g ‚â´ h`.\nFurther, this bijection is natural in `Z`: see `Cofork.IsColimit.homIso_natural`.\nThis is a special case of `IsColimit.homIso'`, often useful to construct adjunctions.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L576-L576","name":"CategoryTheory.Limits.Cofork.IsColimit.homIso_apply_coe","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.IsColimit.homIso_apply_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L576-L576","name":"CategoryTheory.Limits.Cofork.IsColimit.homIso_symm_apply","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.IsColimit.homIso_symm_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L565-L568","name":"CategoryTheory.Limits.Fork.IsLimit.homIso_natural","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.IsLimit.homIso_natural","doc":"The bijection of `Fork.IsLimit.homIso` is natural in `Z`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L556-L561","name":"CategoryTheory.Limits.Fork.IsLimit.homIso","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.IsLimit.homIso","doc":"Given a limit cone for the pair `f g : X ‚ü∂ Y`, for any `Z`, morphisms from `Z` to its point are in\nbijection with morphisms `h : Z ‚ü∂ X` such that `h ‚â´ f = h ‚â´ g`.\nFurther, this bijection is natural in `Z`: see `Fork.IsLimit.homIso_natural`.\nThis is a special case of `IsLimit.homIso'`, often useful to construct adjunctions.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L555-L555","name":"CategoryTheory.Limits.Fork.IsLimit.homIso_symm_apply","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.IsLimit.homIso_symm_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L555-L555","name":"CategoryTheory.Limits.Fork.IsLimit.homIso_apply_coe","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.IsLimit.homIso_apply_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L543-L546","name":"CategoryTheory.Limits.Cofork.IsColimit.ofExistsUnique","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.IsColimit.ofExistsUnique","doc":"Noncomputably make a colimit cocone from the existence of unique factorizations. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L536-L539","name":"CategoryTheory.Limits.Fork.IsLimit.ofExistsUnique","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.IsLimit.ofExistsUnique","doc":"Noncomputably make a limit cone from the existence of unique factorizations. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L528-L532","name":"CategoryTheory.Limits.Cofork.IsColimit.mk'","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.IsColimit.mk'","doc":"This is another convenient method to verify that a fork is a limit cone. It\nonly asks for a proof of facts that carry any mathematical content, and allows access to the\nsame `s` for all parts. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L515-L522","name":"CategoryTheory.Limits.Cofork.IsColimit.mk","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.IsColimit.mk","doc":"This is a slightly more convenient method to verify that a cofork is a colimit cocone. It\nonly asks for a proof of facts that carry any mathematical content "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L508-L510","name":"CategoryTheory.Limits.Fork.IsLimit.mk'","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.IsLimit.mk'","doc":"This is another convenient method to verify that a fork is a limit cone. It\nonly asks for a proof of facts that carry any mathematical content, and allows access to the\nsame `s` for all parts. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L495-L502","name":"CategoryTheory.Limits.Fork.IsLimit.mk","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.IsLimit.mk","doc":"This is a slightly more convenient method to verify that a fork is a limit cone. It\nonly asks for a proof of facts that carry any mathematical content "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L494-L494","name":"CategoryTheory.Limits.Fork.IsLimit.mk_lift","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.IsLimit.mk_lift","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L486-L489","name":"CategoryTheory.Limits.Cofork.IsColimit.existsUnique","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.IsColimit.existsUnique","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L480-L483","name":"CategoryTheory.Limits.Fork.IsLimit.existsUnique","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.IsLimit.existsUnique","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L475-L477","name":"CategoryTheory.Limits.Cofork.IsColimit.desc'","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.IsColimit.desc'","doc":"If `s` is a colimit cofork over `f` and `g`, then a morphism `k : Y ‚ü∂ W` satisfying\n`f ‚â´ k = g ‚â´ k` induces a morphism `l : s.pt ‚ü∂ W` such that `cofork.œÄ s ‚â´ l = k`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L469-L471","name":"CategoryTheory.Limits.Cofork.IsColimit.œÄ_desc'","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.IsColimit.œÄ_desc'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L468-L468","name":"CategoryTheory.Limits.Cofork.IsColimit.œÄ_desc'_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.IsColimit.œÄ_desc'_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L464-L466","name":"CategoryTheory.Limits.Cofork.IsColimit.desc","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.IsColimit.desc","doc":"If `s` is a colimit cofork over `f` and `g`, then a morphism `k : Y ‚ü∂ W` satisfying\n`f ‚â´ k = g ‚â´ k` induces a morphism `l : s.pt ‚ü∂ W` such that `cofork.œÄ s ‚â´ l = k`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L456-L458","name":"CategoryTheory.Limits.Fork.IsLimit.lift'","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.IsLimit.lift'","doc":"If `s` is a limit fork over `f` and `g`, then a morphism `k : W ‚ü∂ X` satisfying\n`k ‚â´ f = k ‚â´ g` induces a morphism `l : W ‚ü∂ s.pt` such that `l ‚â´ fork.Œπ s = k`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L450-L452","name":"CategoryTheory.Limits.Fork.IsLimit.lift_Œπ'","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.IsLimit.lift_Œπ'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L449-L449","name":"CategoryTheory.Limits.Fork.IsLimit.lift_Œπ'_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.IsLimit.lift_Œπ'_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L445-L447","name":"CategoryTheory.Limits.Fork.IsLimit.lift","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.IsLimit.lift","doc":"If `s` is a limit fork over `f` and `g`, then a morphism `k : W ‚ü∂ X` satisfying\n`k ‚â´ f = k ‚â´ g` induces a morphism `l : W ‚ü∂ s.pt` such that `l ‚â´ fork.Œπ s = k`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L438-L439","name":"CategoryTheory.Limits.Cofork.IsColimit.œÄ_desc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.IsColimit.œÄ_desc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L437-L437","name":"CategoryTheory.Limits.Cofork.IsColimit.œÄ_desc_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.IsColimit.œÄ_desc_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L433-L434","name":"CategoryTheory.Limits.Fork.IsLimit.lift_Œπ","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.IsLimit.lift_Œπ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L432-L432","name":"CategoryTheory.Limits.Fork.IsLimit.lift_Œπ_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.IsLimit.lift_Œπ_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L427-L429","name":"CategoryTheory.Limits.Cofork.IsColimit.hom_ext","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.IsColimit.hom_ext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L422-L424","name":"CategoryTheory.Limits.Fork.IsLimit.hom_ext","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.IsLimit.hom_ext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L416-L419","name":"CategoryTheory.Limits.Cofork.coequalizer_ext","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.coequalizer_ext","doc":"To check whether two maps are coequalized by both maps of a cofork, it suffices to check it for\nthe second map "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L405-L411","name":"CategoryTheory.Limits.Fork.equalizer_ext","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.equalizer_ext","doc":"To check whether two maps are equalized by both maps of a fork, it suffices to check it for the\nfirst map "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L399-L400","name":"CategoryTheory.Limits.Cofork.condition","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.condition","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L398-L398","name":"CategoryTheory.Limits.Cofork.condition_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.condition_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L394-L395","name":"CategoryTheory.Limits.Fork.condition","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.condition","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L393-L393","name":"CategoryTheory.Limits.Fork.condition_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.condition_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L389-L390","name":"CategoryTheory.Limits.Cofork.œÄ_ofœÄ","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.œÄ_ofœÄ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L384-L385","name":"CategoryTheory.Limits.Fork.Œπ_ofŒπ","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.Œπ_ofŒπ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L375-L379","name":"CategoryTheory.Limits.Cofork.ofœÄ","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.ofœÄ","doc":"A cofork on `f g : X ‚ü∂ Y` is determined by the morphism `œÄ : Y ‚ü∂ P` satisfying\n`f ‚â´ œÄ = g ‚â´ œÄ`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L374-L374","name":"CategoryTheory.Limits.Cofork.ofœÄ_Œπ_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.ofœÄ_Œπ_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L374-L374","name":"CategoryTheory.Limits.Cofork.ofœÄ_pt","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.ofœÄ_pt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L364-L369","name":"CategoryTheory.Limits.Fork.ofŒπ","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.ofŒπ","doc":"A fork on `f g : X ‚ü∂ Y` is determined by the morphism `Œπ : P ‚ü∂ X` satisfying `Œπ ‚â´ f = Œπ ‚â´ g`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L363-L363","name":"CategoryTheory.Limits.Fork.ofŒπ_œÄ_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.ofŒπ_œÄ_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L363-L363","name":"CategoryTheory.Limits.Fork.ofŒπ_pt","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.ofŒπ_pt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L357-L358","name":"CategoryTheory.Limits.Cofork.app_zero_eq_comp_œÄ_right","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.app_zero_eq_comp_œÄ_right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L356-L356","name":"CategoryTheory.Limits.Cofork.app_zero_eq_comp_œÄ_right_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.app_zero_eq_comp_œÄ_right_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L352-L353","name":"CategoryTheory.Limits.Cofork.app_zero_eq_comp_œÄ_left","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.app_zero_eq_comp_œÄ_left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L347-L348","name":"CategoryTheory.Limits.Fork.app_one_eq_Œπ_comp_right","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.app_one_eq_Œπ_comp_right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L346-L346","name":"CategoryTheory.Limits.Fork.app_one_eq_Œπ_comp_right_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.app_one_eq_Œπ_comp_right_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L342-L343","name":"CategoryTheory.Limits.Fork.app_one_eq_Œπ_comp_left","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.app_one_eq_Œπ_comp_left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L337-L338","name":"CategoryTheory.Limits.Cofork.app_one_eq_œÄ","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.app_one_eq_œÄ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L332-L333","name":"CategoryTheory.Limits.Cofork.œÄ","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork.œÄ","doc":"A cofork `t` on the parallelPair `f g : X ‚ü∂ Y` consists of two morphisms\n`t.Œπ.app zero : X ‚ü∂ t.pt` and `t.Œπ.app one : Y ‚ü∂ t.pt`. Of these, only the second one is\ninteresting, and we give it the shorter name `Cofork.œÄ t`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L325-L326","name":"CategoryTheory.Limits.Fork.app_zero_eq_Œπ","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.app_zero_eq_Œπ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L320-L321","name":"CategoryTheory.Limits.Fork.Œπ","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.Œπ","doc":"A fork `t` on the parallel pair `f g : X ‚ü∂ Y` consists of two morphisms\n`t.œÄ.app zero : t.pt ‚ü∂ X`\nand `t.œÄ.app one : t.pt ‚ü∂ Y`. Of these, only the first one is interesting, and we give it the\nshorter name `Fork.Œπ t`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L310-L311","name":"CategoryTheory.Limits.Cofork","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork","doc":"A cofork on `f` and `g` is just a `Cocone (parallelPair f g)`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L305-L306","name":"CategoryTheory.Limits.Fork","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork","doc":"A fork on `f` and `g` is just a `Cone (parallelPair f g)`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L299-L301","name":"CategoryTheory.Limits.parallelPair.eqOfHomEq","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.parallelPair.eqOfHomEq","doc":"Construct a natural isomorphism between `parallelPair f g` and `parallelPair f' g'` given\nequalities `f = f'` and `g = g'`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L298-L298","name":"CategoryTheory.Limits.parallelPair.eqOfHomEq_inv_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.parallelPair.eqOfHomEq_inv_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L298-L298","name":"CategoryTheory.Limits.parallelPair.eqOfHomEq_hom_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.parallelPair.eqOfHomEq_hom_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L286-L293","name":"CategoryTheory.Limits.parallelPair.ext","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.parallelPair.ext","doc":"Construct a natural isomorphism between functors out of the walking parallel pair from\nits components. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L285-L285","name":"CategoryTheory.Limits.parallelPair.ext_hom_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.parallelPair.ext_hom_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L285-L285","name":"CategoryTheory.Limits.parallelPair.ext_inv_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.parallelPair.ext_inv_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L277-L280","name":"CategoryTheory.Limits.parallelPairHom_app_one","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.parallelPairHom_app_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L270-L273","name":"CategoryTheory.Limits.parallelPairHom_app_zero","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.parallelPairHom_app_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L258-L266","name":"CategoryTheory.Limits.parallelPairHom","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.parallelPairHom","doc":"Construct a morphism between parallel pairs. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L252-L254","name":"CategoryTheory.Limits.diagramIsoParallelPair","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.diagramIsoParallelPair","doc":"Every functor indexing a (co)equalizer is naturally isomorphic (actually, equal) to a\n`parallelPair` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L251-L251","name":"CategoryTheory.Limits.diagramIsoParallelPair_hom_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.diagramIsoParallelPair_hom_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L251-L251","name":"CategoryTheory.Limits.diagramIsoParallelPair_inv_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.diagramIsoParallelPair_inv_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L245-L246","name":"CategoryTheory.Limits.parallelPair_functor_obj","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.parallelPair_functor_obj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L241-L241","name":"CategoryTheory.Limits.parallelPair_map_right","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.parallelPair_map_right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L237-L237","name":"CategoryTheory.Limits.parallelPair_map_left","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.parallelPair_map_left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L233-L233","name":"CategoryTheory.Limits.parallelPair_obj_one","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.parallelPair_obj_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L229-L229","name":"CategoryTheory.Limits.parallelPair_obj_zero","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.parallelPair_obj_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L213-L225","name":"CategoryTheory.Limits.parallelPair","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.parallelPair","doc":"`parallelPair f g` is the diagram in `C` consisting of the two morphisms `f` and `g` with\ncommon domain and codomain. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L202-L204","name":"CategoryTheory.Limits.walkingParallelPairOpEquiv_counitIso_one","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.walkingParallelPairOpEquiv_counitIso_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L197-L198","name":"CategoryTheory.Limits.walkingParallelPairOpEquiv_counitIso_zero","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.walkingParallelPairOpEquiv_counitIso_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L192-L193","name":"CategoryTheory.Limits.walkingParallelPairOpEquiv_unitIso_one","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.walkingParallelPairOpEquiv_unitIso_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L187-L188","name":"CategoryTheory.Limits.walkingParallelPairOpEquiv_unitIso_zero","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.walkingParallelPairOpEquiv_unitIso_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L166-L183","name":"CategoryTheory.Limits.walkingParallelPairOpEquiv","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.walkingParallelPairOpEquiv","doc":"The equivalence `WalkingParallelPair ‚•§ WalkingParallelPair·µí·µñ` sending left to left and right to\nright.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L165-L165","name":"CategoryTheory.Limits.walkingParallelPairOpEquiv_functor","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.walkingParallelPairOpEquiv_functor","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L165-L165","name":"CategoryTheory.Limits.walkingParallelPairOpEquiv_inverse","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.walkingParallelPairOpEquiv_inverse","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L157-L158","name":"CategoryTheory.Limits.walkingParallelPairOp_right","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.walkingParallelPairOp_right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L152-L153","name":"CategoryTheory.Limits.walkingParallelPairOp_left","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.walkingParallelPairOp_left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L148-L148","name":"CategoryTheory.Limits.walkingParallelPairOp_one","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.walkingParallelPairOp_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L144-L144","name":"CategoryTheory.Limits.walkingParallelPairOp_zero","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.walkingParallelPairOp_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L135-L140","name":"CategoryTheory.Limits.walkingParallelPairOp","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.walkingParallelPairOp","doc":"The functor `WalkingParallelPair ‚•§ WalkingParallelPair·µí·µñ` sending left to left and right to\nright.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L129-L130","name":"CategoryTheory.Limits.WalkingParallelPairHom.id.sizeOf_spec'","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.WalkingParallelPairHom.id.sizeOf_spec'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L123-L124","name":"CategoryTheory.Limits.walkingParallelPairHom_id","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.walkingParallelPairHom_id","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L113-L119","name":"CategoryTheory.Limits.walkingParallelPairHomCategory","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.walkingParallelPairHomCategory","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L108-L111","name":"CategoryTheory.Limits.WalkingParallelPairHom.assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.WalkingParallelPairHom.assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L104-L106","name":"CategoryTheory.Limits.WalkingParallelPairHom.comp_id","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.WalkingParallelPairHom.comp_id","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L100-L102","name":"CategoryTheory.Limits.WalkingParallelPairHom.id_comp","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.WalkingParallelPairHom.id_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L90-L96","name":"CategoryTheory.Limits.WalkingParallelPairHom.comp","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.WalkingParallelPairHom.comp","doc":"Composition of morphisms in the indexing diagram for (co)equalizers. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L85-L85","name":"CategoryTheory.Limits.instInhabitedWalkingParallelPairHomZeroOne","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.instInhabitedWalkingParallelPairHomZeroOne","doc":"Satisfying the inhabited linter "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L77-L77","name":"CategoryTheory.Limits.instDecidableEqWalkingParallelPairHom","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.instDecidableEqWalkingParallelPairHom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L76-L76","name":"CategoryTheory.Limits.WalkingParallelPairHom.id","kind":"ctor","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.WalkingParallelPairHom.id","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L75-L75","name":"CategoryTheory.Limits.WalkingParallelPairHom.right","kind":"ctor","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.WalkingParallelPairHom.right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L74-L74","name":"CategoryTheory.Limits.WalkingParallelPairHom.left","kind":"ctor","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.WalkingParallelPairHom.left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L73-L77","name":"CategoryTheory.Limits.WalkingParallelPairHom","kind":"inductive","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.WalkingParallelPairHom","doc":"The type family of morphisms for the diagram indexing a (co)equalizer. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L67-L67","name":"CategoryTheory.Limits.instInhabitedWalkingParallelPair","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.instInhabitedWalkingParallelPair","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L67-L67","name":"CategoryTheory.Limits.instDecidableEqWalkingParallelPair","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.instDecidableEqWalkingParallelPair","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L66-L66","name":"CategoryTheory.Limits.WalkingParallelPair.one","kind":"ctor","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.WalkingParallelPair.one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L65-L65","name":"CategoryTheory.Limits.WalkingParallelPair.zero","kind":"ctor","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.WalkingParallelPair.zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/Equalizers.lean#L64-L67","name":"CategoryTheory.Limits.WalkingParallelPair","kind":"inductive","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.WalkingParallelPair","doc":"The type of objects for the diagram indexing a (co)equalizer. "}]}