{"name":"Mathlib.Tactic.Recall","instances":[],"imports":["Init","Lean.Elab.MutualDef","Std.Tactic.OpenPrivate"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Recall.lean#L15-L35","name":"Mathlib.Tactic.Recall.recall","kind":"def","docLink":"./Mathlib/Tactic/Recall.html#Mathlib.Tactic.Recall.recall","doc":"The `recall` command redeclares a previous definition for illustrative purposes.\nThis can be useful for files that give an expository account of some theory in Lean.\n\nThe syntax of the command mirrors `def`, so all the usual bells and whistles work.\n```\nrecall List.cons_append (a : α) (as bs : List α) : (a :: as) ++ bs = a :: (as ++ bs) := rfl\n```\nAlso, one can leave out the body.\n```\nrecall Nat.add_comm (n m : Nat) : n + m = m + n\n```\n\nThe command verifies that the new definition type-checks and that the type and value\nprovided are definitionally equal to the original declaration. However, this does not\ncapture some details (like binders), so the following works without error.\n```\nrecall Nat.add_comm {n m : Nat} : n + m = m + n\n```\n"}]}