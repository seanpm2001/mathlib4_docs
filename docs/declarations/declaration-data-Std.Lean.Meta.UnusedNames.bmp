{"name":"Std.Lean.Meta.UnusedNames","instances":[],"imports":["Init","Lean.Meta","Std.Data.String"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/UnusedNames.lean#L138-L140","name":"Lean.Meta.getUnusedUserNames","kind":"def","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.Meta.getUnusedUserNames","doc":"Obtain `n` distinct names such that each name is unused in the current local\ncontext and `suggestion` is a prefix of each name.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/UnusedNames.lean#L131-L132","name":"Lean.Meta.getUnusedUserName","kind":"def","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.Meta.getUnusedUserName","doc":"Obtain a name `n` such that `n` is unused in the current local context and\n`suggestion` is a prefix of `n`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/UnusedNames.lean#L117-L120","name":"Lean.LocalContext.getUnusedUserNames.loop","kind":"def","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.LocalContext.getUnusedUserNames.loop","doc":"Auxiliary definition for `getUnusedUserNames`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/UnusedNames.lean#L105-L120","name":"Lean.LocalContext.getUnusedUserNames","kind":"def","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.LocalContext.getUnusedUserNames","doc":"Obtain `n` distinct names such that each name is unused in the given local\ncontext and `suggestion` is a prefix of each name.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/UnusedNames.lean#L95-L99","name":"Lean.LocalContext.getUnusedUserName","kind":"def","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.LocalContext.getUnusedUserName","doc":"Obtain a name `n` such that `n` is unused in the given local context and\n`suggestion` is a prefix of `n`. This is similar to `getUnusedName` but uses\na different algorithm which may or may not be faster.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/UnusedNames.lean#L86-L88","name":"Lean.LocalContext.getUnusedUserNameIndex.updateMinSuffix","kind":"def","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.LocalContext.getUnusedUserNameIndex.updateMinSuffix","doc":"Auxiliary definition for `getUnusedUserNameIndex`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/UnusedNames.lean#L71-L88","name":"Lean.LocalContext.getUnusedUserNameIndex","kind":"def","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.LocalContext.getUnusedUserNameIndex","doc":"Obtain the least natural number `i` such that `suggestion ++ \"_i\"` is an unused\nname in the given local context. If `suggestion` itself is unused, the result\nis `none`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/UnusedNames.lean#L42-L59","name":"Lean.Name.matchUpToIndexSuffix","kind":"def","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.Name.matchUpToIndexSuffix","doc":"Succeeds if `n` is equal to `query`, except `n` may have an additional `_i`\nsuffix for some natural number `i`. More specifically:\n\n- If `n = query`, the result is `exactMatch`.\n- If `n = query ++ \"_i\"` for some natural number `i`, the result is\n  `suffixMatch i`.\n- Otherwise the result is `noMatch`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/UnusedNames.lean#L30-L31","name":"Lean.Name.MatchUpToIndexSuffix.suffixMatch","kind":"ctor","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix.suffixMatch","doc":"Match up to suffix. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/UnusedNames.lean#L28-L29","name":"Lean.Name.MatchUpToIndexSuffix.noMatch","kind":"ctor","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix.noMatch","doc":"No match. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/UnusedNames.lean#L26-L27","name":"Lean.Name.MatchUpToIndexSuffix.exactMatch","kind":"ctor","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix.exactMatch","doc":"Exact match. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/UnusedNames.lean#L25-L31","name":"Lean.Name.MatchUpToIndexSuffix","kind":"inductive","docLink":"./Std/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix","doc":"Result type of `Lean.Name.matchUpToIndexSuffix`. See there for details.\n"}]}