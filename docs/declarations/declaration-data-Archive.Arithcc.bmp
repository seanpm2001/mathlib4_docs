{"name":"Archive.Arithcc","instances":[{"typeNames":["Arithcc.Expr"],"name":"Arithcc.instInhabitedExpr","className":"Inhabited"},{"typeNames":["Arithcc.Instruction"],"name":"Arithcc.instInhabitedInstruction","className":"Inhabited"},{"typeNames":["Arithcc.State"],"name":"Arithcc.instInhabitedState","className":"Inhabited"},{"typeNames":["Arithcc.State","Arithcc.State","Arithcc.State","Arithcc.StateEq","HAdd.hAdd","Arithcc.Register","instHAdd","instAddNat","OfNat.ofNat","instOfNatNat","Arithcc.StateEq","HAdd.hAdd","Arithcc.Register","instHAdd","instAddNat","OfNat.ofNat","instOfNatNat","Arithcc.StateEq","HAdd.hAdd","Arithcc.Register","instHAdd","instAddNat","OfNat.ofNat","instOfNatNat"],"name":"Arithcc.instTransStateStateEqHAddRegisterInstHAddInstAddNatOfNatInstOfNatNat","className":"Trans"},{"typeNames":["Arithcc.State","Arithcc.State","Arithcc.State","Arithcc.StateEq","HAdd.hAdd","Arithcc.Register","instHAdd","instAddNat","OfNat.ofNat","instOfNatNat","Arithcc.StateEqRs","HAdd.hAdd","Arithcc.Register","instHAdd","instAddNat","OfNat.ofNat","instOfNatNat","Arithcc.StateEqRs","HAdd.hAdd","Arithcc.Register","instHAdd","instAddNat","OfNat.ofNat","instOfNatNat"],"name":"Arithcc.instTransStateStateEqHAddRegisterInstHAddInstAddNatOfNatInstOfNatNatStateEqRs","className":"Trans"}],"imports":["Init","Mathlib.Order.Basic","Mathlib.Tactic.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L308-L376","name":"Arithcc.compiler_correctness","kind":"theorem","docLink":"./Archive/Arithcc.html#Arithcc.compiler_correctness","doc":"The main **compiler correctness theorem**.\n\nUnlike Theorem 1 in the paper, both `map` and the assumption on `t` are explicit.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L294-L301","name":"Arithcc.write_eq_implies_stateEq","kind":"theorem","docLink":"./Archive/Arithcc.html#Arithcc.write_eq_implies_stateEq","doc":"`≃[t + 1]` with writing to register `t` implies `≃[t]`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L285-L290","name":"Arithcc.stateEqRs_implies_write_eq_rs","kind":"theorem","docLink":"./Archive/Arithcc.html#Arithcc.stateEqRs_implies_write_eq_rs","doc":"Writing the same value to any register preserves `≃[t]/ac`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L271-L281","name":"Arithcc.stateEq_implies_write_eq","kind":"theorem","docLink":"./Archive/Arithcc.html#Arithcc.stateEq_implies_write_eq","doc":"Writing the same value to register `t` gives `≃[t + 1]` from `≃[t]`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L267-L268","name":"Arithcc.instTransStateStateEqHAddRegisterInstHAddInstAddNatOfNatInstOfNatNatStateEqRs","kind":"instance","docLink":"./Archive/Arithcc.html#Arithcc.instTransStateStateEqHAddRegisterInstHAddInstAddNatOfNatInstOfNatNatStateEqRs","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L260-L263","name":"Arithcc.StateEqStateEqRs.trans","kind":"theorem","docLink":"./Archive/Arithcc.html#Arithcc.StateEqStateEqRs.trans","doc":"Transitivity of chaining `≃[t]` and `≃[t]/ac`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L255-L256","name":"Arithcc.instTransStateStateEqHAddRegisterInstHAddInstAddNatOfNatInstOfNatNat","kind":"instance","docLink":"./Archive/Arithcc.html#Arithcc.instTransStateStateEqHAddRegisterInstHAddInstAddNatOfNatInstOfNatNat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L246-L251","name":"Arithcc.StateEq.trans","kind":"theorem","docLink":"./Archive/Arithcc.html#Arithcc.StateEq.trans","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L240-L242","name":"Arithcc.StateEq.symm","kind":"theorem","docLink":"./Archive/Arithcc.html#Arithcc.StateEq.symm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L236-L236","name":"Arithcc.StateEq.refl","kind":"theorem","docLink":"./Archive/Arithcc.html#Arithcc.StateEq.refl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L233-L233","name":"Arithcc.«term_≃[_]_»","kind":"def","docLink":"./Archive/Arithcc.html#Arithcc.«term_≃[_]_»","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L229-L230","name":"Arithcc.StateEq","kind":"def","docLink":"./Archive/Arithcc.html#Arithcc.StateEq","doc":"Machine states ζ₁ and ζ₂ are equal except for registers {x | x ≥ t}. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L223-L225","name":"Arithcc.StateEqRs.trans","kind":"theorem","docLink":"./Archive/Arithcc.html#Arithcc.StateEqRs.trans","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L217-L219","name":"Arithcc.StateEqRs.symm","kind":"theorem","docLink":"./Archive/Arithcc.html#Arithcc.StateEqRs.symm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L213-L213","name":"Arithcc.StateEqRs.refl","kind":"theorem","docLink":"./Archive/Arithcc.html#Arithcc.StateEqRs.refl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L210-L210","name":"Arithcc.«term_≃[_]/ac_»","kind":"def","docLink":"./Archive/Arithcc.html#Arithcc.«term_≃[_]/ac_»","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L206-L207","name":"Arithcc.StateEqRs","kind":"def","docLink":"./Archive/Arithcc.html#Arithcc.StateEqRs","doc":"Machine states ζ₁ and ζ₂ are equal except for the accumulator and registers {x | x ≥ t}. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L192-L195","name":"Arithcc.compile","kind":"def","docLink":"./Archive/Arithcc.html#Arithcc.compile","doc":"The implementation of the compiler (4.2).\n\nThis definition explicitly takes a map from variables to registers.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L183-L184","name":"Arithcc.loc","kind":"def","docLink":"./Archive/Arithcc.html#Arithcc.loc","doc":"Map a variable in the source expression to a machine register. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L165-L169","name":"Arithcc.outcome_append","kind":"theorem","docLink":"./Archive/Arithcc.html#Arithcc.outcome_append","doc":"A lemma on the concatenation of two programs (3.13). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L158-L160","name":"Arithcc.outcome","kind":"def","docLink":"./Archive/Arithcc.html#Arithcc.outcome","doc":"The resulting machine state of running a target program from a given machine state (3.12). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L149-L153","name":"Arithcc.step","kind":"def","docLink":"./Archive/Arithcc.html#Arithcc.step","doc":"The semantics of the target language (3.11). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L144-L145","name":"Arithcc.write","kind":"def","docLink":"./Archive/Arithcc.html#Arithcc.write","doc":"This is similar to the `a` function (3.9), but for registers only. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L138-L139","name":"Arithcc.read","kind":"def","docLink":"./Archive/Arithcc.html#Arithcc.read","doc":"This is similar to the `c` function (3.8), but for registers only. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L132-L134","name":"Arithcc.instInhabitedState","kind":"instance","docLink":"./Archive/Arithcc.html#Arithcc.instInhabitedState","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L129-L129","name":"Arithcc.State.rs","kind":"def","docLink":"./Archive/Arithcc.html#Arithcc.State.rs","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L128-L128","name":"Arithcc.State.ac","kind":"def","docLink":"./Archive/Arithcc.html#Arithcc.State.ac","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L127-L127","name":"Arithcc.State.mk","kind":"ctor","docLink":"./Archive/Arithcc.html#Arithcc.State.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L127-L129","name":"Arithcc.State","kind":"structure","docLink":"./Archive/Arithcc.html#Arithcc.State","doc":"Machine state consists of the accumulator and a vector of registers.\n\nThe paper uses two functions `c` and `a` for accessing both the accumulator and registers.\nFor clarity, we make accessing the accumulator explicit and use `read`/`write` for registers.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L119-L119","name":"Arithcc.instInhabitedInstruction","kind":"instance","docLink":"./Archive/Arithcc.html#Arithcc.instInhabitedInstruction","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L118-L118","name":"Arithcc.Instruction.add","kind":"ctor","docLink":"./Archive/Arithcc.html#Arithcc.Instruction.add","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L117-L117","name":"Arithcc.Instruction.sto","kind":"ctor","docLink":"./Archive/Arithcc.html#Arithcc.Instruction.sto","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L116-L116","name":"Arithcc.Instruction.load","kind":"ctor","docLink":"./Archive/Arithcc.html#Arithcc.Instruction.load","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L115-L115","name":"Arithcc.Instruction.li","kind":"ctor","docLink":"./Archive/Arithcc.html#Arithcc.Instruction.li","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L114-L119","name":"Arithcc.Instruction","kind":"inductive","docLink":"./Archive/Arithcc.html#Arithcc.Instruction","doc":"Instructions of the target machine language (3.1--3.7). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L100-L103","name":"Arithcc.value","kind":"def","docLink":"./Archive/Arithcc.html#Arithcc.value","doc":"The semantics of the source language (2.1). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L95-L95","name":"Arithcc.instInhabitedExpr","kind":"instance","docLink":"./Archive/Arithcc.html#Arithcc.instInhabitedExpr","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L94-L94","name":"Arithcc.Expr.sum","kind":"ctor","docLink":"./Archive/Arithcc.html#Arithcc.Expr.sum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L93-L93","name":"Arithcc.Expr.var","kind":"ctor","docLink":"./Archive/Arithcc.html#Arithcc.Expr.var","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L92-L92","name":"Arithcc.Expr.const","kind":"ctor","docLink":"./Archive/Arithcc.html#Arithcc.Expr.const","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L91-L95","name":"Arithcc.Expr","kind":"inductive","docLink":"./Archive/Arithcc.html#Arithcc.Expr","doc":"An expression in the source language is formed by constants, variables, and sums. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L79-L80","name":"Arithcc.Register.le_of_lt_succ","kind":"theorem","docLink":"./Archive/Arithcc.html#Arithcc.Register.le_of_lt_succ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L75-L76","name":"Arithcc.Register.lt_succ_self","kind":"theorem","docLink":"./Archive/Arithcc.html#Arithcc.Register.lt_succ_self","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L71-L72","name":"Arithcc.Register","kind":"def","docLink":"./Archive/Arithcc.html#Arithcc.Register","doc":"Register name type in the target language. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L65-L66","name":"Arithcc.Identifier","kind":"def","docLink":"./Archive/Arithcc.html#Arithcc.Identifier","doc":"Variable identifier type in the source language. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Archive/Arithcc.lean#L59-L60","name":"Arithcc.Word","kind":"def","docLink":"./Archive/Arithcc.html#Arithcc.Word","doc":"Value type shared by both source and target languages. "}]}