{"name":"Mathlib.Data.PNat.Find","instances":[{"typeNames":["Nat","Exists","PNat","Exists","Eq","PNat.val"],"name":"PNat.decidablePredExistsNat","className":"Decidable"}],"imports":["Init","Mathlib.Data.PNat.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Find.lean#L123-L129","name":"PNat.find_comp_succ","kind":"theorem","docLink":"./Mathlib/Data/PNat/Find.html#PNat.find_comp_succ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Find.lean#L119-L120","name":"PNat.find_le","kind":"theorem","docLink":"./Mathlib/Data/PNat/Find.html#PNat.find_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Find.lean#L114-L116","name":"PNat.find_mono","kind":"theorem","docLink":"./Mathlib/Data/PNat/Find.html#PNat.find_mono","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Find.lean#L110-L111","name":"PNat.one_le_find","kind":"theorem","docLink":"./Mathlib/Data/PNat/Find.html#PNat.one_le_find","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Find.lean#L106-L106","name":"PNat.find_eq_one","kind":"theorem","docLink":"./Mathlib/Data/PNat/Find.html#PNat.find_eq_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Find.lean#L101-L102","name":"PNat.lt_find_iff","kind":"theorem","docLink":"./Mathlib/Data/PNat/Find.html#PNat.lt_find_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Find.lean#L96-L97","name":"PNat.le_find_iff","kind":"theorem","docLink":"./Mathlib/Data/PNat/Find.html#PNat.le_find_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Find.lean#L91-L92","name":"PNat.find_le_iff","kind":"theorem","docLink":"./Mathlib/Data/PNat/Find.html#PNat.find_le_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Find.lean#L85-L87","name":"PNat.find_lt_iff","kind":"theorem","docLink":"./Mathlib/Data/PNat/Find.html#PNat.find_lt_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Find.lean#L76-L81","name":"PNat.find_eq_iff","kind":"theorem","docLink":"./Mathlib/Data/PNat/Find.html#PNat.find_eq_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Find.lean#L70-L71","name":"PNat.find_min'","kind":"theorem","docLink":"./Mathlib/Data/PNat/Find.html#PNat.find_min'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Find.lean#L66-L67","name":"PNat.find_min","kind":"theorem","docLink":"./Mathlib/Data/PNat/Find.html#PNat.find_min","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Find.lean#L62-L63","name":"PNat.find_spec","kind":"theorem","docLink":"./Mathlib/Data/PNat/Find.html#PNat.find_spec","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Find.lean#L58-L59","name":"PNat.find","kind":"def","docLink":"./Mathlib/Data/PNat/Find.html#PNat.find","doc":"If `p` is a (decidable) predicate on `ℕ+` and `hp : ∃ (n : ℕ+), p n` is a proof that\nthere exists some positive natural number satisfying `p`, then `PNat.find hp` is the\nsmallest positive natural number satisfying `p`. Note that `PNat.find` is protected,\nmeaning that you can't just write `find`, even if the `PNat` namespace is open.\n\nThe API for `PNat.find` is:\n\n* `PNat.find_spec` is the proof that `PNat.find hp` satisfies `p`.\n* `PNat.find_min` is the proof that if `m < PNat.find hp` then `m` does not satisfy `p`.\n* `PNat.find_min'` is the proof that if `m` does satisfy `p` then `PNat.find hp ≤ m`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Find.lean#L35-L44","name":"PNat.findX","kind":"def","docLink":"./Mathlib/Data/PNat/Find.html#PNat.findX","doc":"The `PNat` version of `Nat.findX` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Find.lean#L25-L29","name":"PNat.decidablePredExistsNat","kind":"instance","docLink":"./Mathlib/Data/PNat/Find.html#PNat.decidablePredExistsNat","doc":""}]}