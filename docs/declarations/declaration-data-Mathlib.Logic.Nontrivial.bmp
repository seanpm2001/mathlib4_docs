{"name":"Mathlib.Logic.Nontrivial","instances":[{"typeNames":["_builtin_prop"],"name":"instNontrivialProp","className":"Nontrivial"},{"typeNames":[],"name":"Nontrivial.to_nonempty","className":"Nonempty"},{"typeNames":["Option"],"name":"Option.nontrivial","className":"Nontrivial"},{"typeNames":["Prod"],"name":"nontrivial_prod_right","className":"Nontrivial"},{"typeNames":["Prod"],"name":"nontrivial_prod_left","className":"Nontrivial"},{"typeNames":[],"name":"Pi.nontrivial","className":"Nontrivial"},{"typeNames":[],"name":"Function.nontrivial","className":"Nontrivial"},{"typeNames":["Bool"],"name":"Bool.instNontrivialBool","className":"Nontrivial"}],"imports":["Init","Mathlib.Data.Prod.Basic","Mathlib.Data.Subtype","Mathlib.Logic.Function.Basic","Mathlib.Logic.Unique"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L210-L211","name":"Bool.instNontrivialBool","kind":"instance","docLink":"./Mathlib/Logic/Nontrivial.html#Bool.instNontrivialBool","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L204-L205","name":"Subsingleton.le","kind":"theorem","docLink":"./Mathlib/Logic/Nontrivial.html#Subsingleton.le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L201-L202","name":"Function.nontrivial","kind":"instance","docLink":"./Mathlib/Logic/Nontrivial.html#Function.nontrivial","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L195-L197","name":"Pi.nontrivial","kind":"instance","docLink":"./Mathlib/Logic/Nontrivial.html#Pi.nontrivial","doc":"As a convenience, provide an instance automatically if `(f default)` is nontrivial.\n\nIf a different index has the non-trivial type, then use `haveI := nontrivial_at that_index`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L185-L188","name":"Pi.nontrivial_at","kind":"theorem","docLink":"./Mathlib/Logic/Nontrivial.html#Pi.nontrivial_at","doc":"A pi type is nontrivial if it's nonempty everywhere and nontrivial somewhere. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L177-L178","name":"nontrivial_prod_left","kind":"instance","docLink":"./Mathlib/Logic/Nontrivial.html#nontrivial_prod_left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L174-L175","name":"nontrivial_prod_right","kind":"instance","docLink":"./Mathlib/Logic/Nontrivial.html#nontrivial_prod_right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L165-L170","name":"Function.Injective.exists_ne","kind":"theorem","docLink":"./Mathlib/Logic/Nontrivial.html#Function.Injective.exists_ne","doc":"An injective function from a nontrivial type has an argument at\nwhich it does not take a given value. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L152-L160","name":"Function.Surjective.nontrivial","kind":"theorem","docLink":"./Mathlib/Logic/Nontrivial.html#Function.Surjective.nontrivial","doc":"Pullback a `Nontrivial` instance along a surjective function. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L145-L148","name":"Function.Injective.nontrivial","kind":"theorem","docLink":"./Mathlib/Logic/Nontrivial.html#Function.Injective.nontrivial","doc":"Pushforward a `Nontrivial` instance along an injective function. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L140-L142","name":"Option.nontrivial","kind":"instance","docLink":"./Mathlib/Logic/Nontrivial.html#Option.nontrivial","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L136-L137","name":"false_of_nontrivial_of_subsingleton","kind":"theorem","docLink":"./Mathlib/Logic/Nontrivial.html#false_of_nontrivial_of_subsingleton","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L131-L133","name":"subsingleton_or_nontrivial","kind":"theorem","docLink":"./Mathlib/Logic/Nontrivial.html#subsingleton_or_nontrivial","doc":"A type is either a subsingleton or nontrivial. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L126-L127","name":"not_subsingleton","kind":"theorem","docLink":"./Mathlib/Logic/Nontrivial.html#not_subsingleton","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L122-L123","name":"not_nontrivial","kind":"theorem","docLink":"./Mathlib/Logic/Nontrivial.html#not_nontrivial","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L118-L119","name":"not_nontrivial_iff_subsingleton","kind":"theorem","docLink":"./Mathlib/Logic/Nontrivial.html#not_nontrivial_iff_subsingleton","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L112-L115","name":"subsingleton_iff","kind":"theorem","docLink":"./Mathlib/Logic/Nontrivial.html#subsingleton_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L101-L109","name":"nontrivialPSumUnique","kind":"def","docLink":"./Mathlib/Logic/Nontrivial.html#nontrivialPSumUnique","doc":"An inhabited type is either nontrivial, or has a unique element. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L96-L98","name":"Nontrivial.to_nonempty","kind":"instance","docLink":"./Mathlib/Logic/Nontrivial.html#Nontrivial.to_nonempty","doc":"See Note [lower instance priority]\n\nNote that since this and `nonempty_of_inhabited` are the most \"obvious\" way to find a nonempty\ninstance if no direct instance can be found, we give this a higher priority than the usual `100`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L88-L89","name":"instNontrivialProp","kind":"instance","docLink":"./Mathlib/Logic/Nontrivial.html#instNontrivialProp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L83-L85","name":"Subtype.nontrivial_iff_exists_ne","kind":"theorem","docLink":"./Mathlib/Logic/Nontrivial.html#Subtype.nontrivial_iff_exists_ne","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L79-L80","name":"nontrivial_iff_exists_ne","kind":"theorem","docLink":"./Mathlib/Logic/Nontrivial.html#nontrivial_iff_exists_ne","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L75-L76","name":"nontrivial_iff_lt","kind":"theorem","docLink":"./Mathlib/Logic/Nontrivial.html#nontrivial_iff_lt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L70-L72","name":"exists_pair_lt","kind":"theorem","docLink":"./Mathlib/Logic/Nontrivial.html#exists_pair_lt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L66-L67","name":"nontrivial_of_lt","kind":"theorem","docLink":"./Mathlib/Logic/Nontrivial.html#nontrivial_of_lt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L61-L62","name":"nontrivial_of_ne","kind":"theorem","docLink":"./Mathlib/Logic/Nontrivial.html#nontrivial_of_ne","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L56-L57","name":"exists_ne","kind":"theorem","docLink":"./Mathlib/Logic/Nontrivial.html#exists_ne","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L47-L52","name":"Decidable.exists_ne","kind":"theorem","docLink":"./Mathlib/Logic/Nontrivial.html#Decidable.exists_ne","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L42-L43","name":"exists_pair_ne","kind":"theorem","docLink":"./Mathlib/Logic/Nontrivial.html#exists_pair_ne","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L38-L39","name":"nontrivial_iff","kind":"theorem","docLink":"./Mathlib/Logic/Nontrivial.html#nontrivial_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L35-L35","name":"Nontrivial.exists_pair_ne","kind":"def","docLink":"./Mathlib/Logic/Nontrivial.html#Nontrivial.exists_pair_ne","doc":"In a nontrivial type, there exists a pair of distinct terms. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L33-L33","name":"Nontrivial.mk","kind":"ctor","docLink":"./Mathlib/Logic/Nontrivial.html#Nontrivial.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Nontrivial.lean#L33-L35","name":"Nontrivial","kind":"class","docLink":"./Mathlib/Logic/Nontrivial.html#Nontrivial","doc":"Predicate typeclass for expressing that a type is not reduced to a single element. In rings,\nthis is equivalent to `0 ≠ 1`. In vector spaces, this is equivalent to positive dimension. "}]}