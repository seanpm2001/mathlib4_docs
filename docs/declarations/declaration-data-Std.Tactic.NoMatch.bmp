{"name":"Std.Tactic.NoMatch","instances":[],"imports":["Init","Std.Tactic.OpenPrivate","Lean.Elab.Match","Lean.Elab.ElabRules"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/NoMatch.lean#L65-L65","name":"Std.Tactic.«tacticIntro.»","kind":"def","docLink":"./Std/Tactic/NoMatch.html#Std.Tactic.«tacticIntro.»","doc":"The tactic `intro.` is shorthand for `exact fun.`: it introduces the assumptions, then performs an\nempty pattern match, closing the goal if the introduced pattern is impossible.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/NoMatch.lean#L58-L59","name":"Std.Tactic.«tacticMatch_,,With.»","kind":"def","docLink":"./Std/Tactic/NoMatch.html#Std.Tactic.«tacticMatch_,,With.»","doc":"The syntax `match x with.` is a variant of `nomatch x` which supports pattern matching on multiple\ndiscriminants, like regular `match`, and simply has no alternatives in the match.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/NoMatch.lean#L56-L56","name":"Std.Tactic.«termλ.»","kind":"def","docLink":"./Std/Tactic/NoMatch.html#Std.Tactic.«termλ.»","doc":"The syntax  `fun.` or `λ.` (dot required) is shorthand for an empty pattern match function,\ni.e. `fun x y z => match x, y, z with.` for an appropriate number of arguments.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/NoMatch.lean#L45-L54","name":"Std.Tactic.noFun","kind":"def","docLink":"./Std/Tactic/NoMatch.html#Std.Tactic.noFun","doc":"The syntax  `fun.` or `λ.` (dot required) is shorthand for an empty pattern match function,\ni.e. `fun x y z => match x, y, z with.` for an appropriate number of arguments.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/NoMatch.lean#L30-L43","name":"Std.Tactic.elabNoMatch'","kind":"def","docLink":"./Std/Tactic/NoMatch.html#Std.Tactic.elabNoMatch'","doc":"Elaborator for `match x with.` "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/NoMatch.lean#L22-L26","name":"Std.Tactic.noMatch","kind":"def","docLink":"./Std/Tactic/NoMatch.html#Std.Tactic.noMatch","doc":"The syntax `match x with.` is a variant of `nomatch x` which supports pattern matching on multiple\ndiscriminants, like regular `match`, and simply has no alternatives in the match.\n"}]}