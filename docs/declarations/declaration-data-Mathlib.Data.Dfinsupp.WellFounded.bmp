{"name":"Mathlib.Data.Dfinsupp.WellFounded","instances":[{"typeNames":["Lex","Dfinsupp","AddMonoid.toZero","AddCommMonoid.toAddMonoid","OrderedAddCommMonoid.toAddCommMonoid","CanonicallyOrderedAddMonoid.toOrderedAddCommMonoid","Dfinsupp.instLTLexDfinsupp","AddMonoid.toZero","AddCommMonoid.toAddMonoid","OrderedAddCommMonoid.toAddCommMonoid","CanonicallyOrderedAddMonoid.toOrderedAddCommMonoid","Preorder.toLT","PartialOrder.toPreorder","OrderedAddCommMonoid.toPartialOrder"],"name":"Dfinsupp.Lex.wellFoundedLT","className":"IsWellFounded"},{"typeNames":["Lex","Pi.instLTLexForAll","Preorder.toLT","PartialOrder.toPreorder","SemilatticeInf.toPartialOrder","Lattice.toSemilatticeInf","DistribLattice.toLattice","instDistribLattice"],"name":"Pi.Lex.wellFoundedLT","className":"IsWellFounded"},{"typeNames":["Lex","Pi.instLTLexForAll","Preorder.toLT","PartialOrder.toPreorder","SemilatticeInf.toPartialOrder","Lattice.toSemilatticeInf","DistribLattice.toLattice","instDistribLattice"],"name":"Function.Lex.wellFoundedLT","className":"IsWellFounded"},{"typeNames":["Lex","Dfinsupp","Dfinsupp.instLTLexDfinsupp","Preorder.toLT","PartialOrder.toPreorder","SemilatticeInf.toPartialOrder","Lattice.toSemilatticeInf","DistribLattice.toLattice","instDistribLattice"],"name":"Dfinsupp.Lex.wellFoundedLT_of_finite","className":"IsWellFounded"},{"typeNames":["Dfinsupp","AddMonoid.toZero","AddCommMonoid.toAddMonoid","OrderedAddCommMonoid.toAddCommMonoid","CanonicallyOrderedAddMonoid.toOrderedAddCommMonoid","Preorder.toLT","Dfinsupp","AddMonoid.toZero","AddCommMonoid.toAddMonoid","OrderedAddCommMonoid.toAddCommMonoid","CanonicallyOrderedAddMonoid.toOrderedAddCommMonoid","Dfinsupp.instPreorderDfinsupp","PartialOrder.toPreorder","OrderedAddCommMonoid.toPartialOrder"],"name":"Dfinsupp.well_founded_lt'","className":"IsWellFounded"},{"typeNames":["Preorder.toLT","Pi.preorder"],"name":"Pi.wellFoundedLT","className":"IsWellFounded"},{"typeNames":["Preorder.toLT","Pi.preorder"],"name":"Function.wellFoundedLT","className":"IsWellFounded"},{"typeNames":["Dfinsupp","Preorder.toLT","Dfinsupp","Dfinsupp.instPreorderDfinsupp"],"name":"Dfinsupp.wellFoundedLT_of_finite","className":"IsWellFounded"}],"imports":["Init","Mathlib.Data.Dfinsupp.Lex","Mathlib.Order.GameAdd","Mathlib.Order.Antisymmetrization","Mathlib.SetTheory.Ordinal.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Dfinsupp/WellFounded.lean#L259-L262","name":"Dfinsupp.wellFoundedLT_of_finite","kind":"instance","docLink":"./Mathlib/Data/Dfinsupp/WellFounded.html#Dfinsupp.wellFoundedLT_of_finite","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Dfinsupp/WellFounded.lean#L254-L256","name":"Function.wellFoundedLT","kind":"instance","docLink":"./Mathlib/Data/Dfinsupp/WellFounded.html#Function.wellFoundedLT","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Dfinsupp/WellFounded.lean#L243-L251","name":"Pi.wellFoundedLT","kind":"instance","docLink":"./Mathlib/Data/Dfinsupp/WellFounded.html#Pi.wellFoundedLT","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Dfinsupp/WellFounded.lean#L238-L240","name":"Dfinsupp.well_founded_lt'","kind":"instance","docLink":"./Mathlib/Data/Dfinsupp/WellFounded.html#Dfinsupp.well_founded_lt'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Dfinsupp/WellFounded.lean#L218-L235","name":"Dfinsupp.wellFoundedLT","kind":"theorem","docLink":"./Mathlib/Data/Dfinsupp/WellFounded.html#Dfinsupp.wellFoundedLT","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Dfinsupp/WellFounded.lean#L213-L215","name":"Dfinsupp.Lex.wellFoundedLT_of_finite","kind":"instance","docLink":"./Mathlib/Data/Dfinsupp/WellFounded.html#Dfinsupp.Lex.wellFoundedLT_of_finite","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Dfinsupp/WellFounded.lean#L207-L210","name":"Dfinsupp.Lex.wellFounded_of_finite","kind":"theorem","docLink":"./Mathlib/Data/Dfinsupp/WellFounded.html#Dfinsupp.Lex.wellFounded_of_finite","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Dfinsupp/WellFounded.lean#L202-L204","name":"Function.Lex.wellFoundedLT","kind":"instance","docLink":"./Mathlib/Data/Dfinsupp/WellFounded.html#Function.Lex.wellFoundedLT","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Dfinsupp/WellFounded.lean#L197-L199","name":"Pi.Lex.wellFoundedLT","kind":"instance","docLink":"./Mathlib/Data/Dfinsupp/WellFounded.html#Pi.Lex.wellFoundedLT","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Dfinsupp/WellFounded.lean#L187-L194","name":"Pi.Lex.wellFounded","kind":"theorem","docLink":"./Mathlib/Data/Dfinsupp/WellFounded.html#Pi.Lex.wellFounded","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Dfinsupp/WellFounded.lean#L175-L178","name":"Dfinsupp.Lex.wellFoundedLT","kind":"instance","docLink":"./Mathlib/Data/Dfinsupp/WellFounded.html#Dfinsupp.Lex.wellFoundedLT","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Dfinsupp/WellFounded.lean#L167-L170","name":"Dfinsupp.Lex.wellFounded'","kind":"theorem","docLink":"./Mathlib/Data/Dfinsupp/WellFounded.html#Dfinsupp.Lex.wellFounded'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Dfinsupp/WellFounded.lean#L163-L164","name":"Dfinsupp.Lex.wellFounded","kind":"theorem","docLink":"./Mathlib/Data/Dfinsupp/WellFounded.html#Dfinsupp.Lex.wellFounded","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Dfinsupp/WellFounded.lean#L158-L160","name":"Dfinsupp.Lex.acc","kind":"theorem","docLink":"./Mathlib/Data/Dfinsupp/WellFounded.html#Dfinsupp.Lex.acc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Dfinsupp/WellFounded.lean#L136-L155","name":"Dfinsupp.Lex.acc_single","kind":"theorem","docLink":"./Mathlib/Data/Dfinsupp/WellFounded.html#Dfinsupp.Lex.acc_single","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Dfinsupp/WellFounded.lean#L120-L131","name":"Dfinsupp.Lex.acc_of_single","kind":"theorem","docLink":"./Mathlib/Data/Dfinsupp/WellFounded.html#Dfinsupp.Lex.acc_of_single","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Dfinsupp/WellFounded.lean#L116-L117","name":"Dfinsupp.Lex.acc_zero","kind":"theorem","docLink":"./Mathlib/Data/Dfinsupp/WellFounded.html#Dfinsupp.Lex.acc_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Dfinsupp/WellFounded.lean#L105-L111","name":"Dfinsupp.Lex.acc_of_single_erase","kind":"theorem","docLink":"./Mathlib/Data/Dfinsupp/WellFounded.html#Dfinsupp.Lex.acc_of_single_erase","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Dfinsupp/WellFounded.lean#L71-L100","name":"Dfinsupp.lex_fibration","kind":"theorem","docLink":"./Mathlib/Data/Dfinsupp/WellFounded.html#Dfinsupp.lex_fibration","doc":"This key lemma says that if a finitely supported dependent function `x₀` is obtained by merging\ntwo such functions `x₁` and `x₂`, and if we evolve `x₀` down the `Dfinsupp.Lex` relation one\nstep and get `x`, we can always evolve one of `x₁` and `x₂` down the `Dfinsupp.Lex` relation\none step while keeping the other unchanged, and merge them back (possibly in a different way)\nto get back `x`. In other words, the two parts evolve essentially independently under\n`Dfinsupp.Lex`. This is used to show that a function `x` is accessible if\n`Dfinsupp.single i (x i)` is accessible for each `i` in the (finite) support of `x`\n(`Dfinsupp.Lex.acc_of_single`). "}]}