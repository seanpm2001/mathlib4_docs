{"name":"Mathlib.CategoryTheory.Bicategory.Coherence","instances":[{"typeNames":["Quiver.Hom","Quiver.Hom","CategoryTheory.FreeBicategory","CategoryTheory.FreeBicategory.quiver","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.FreeBicategory.homCategory"],"name":"CategoryTheory.FreeBicategory.locally_thin","className":"Subsingleton"}],"imports":["Init","Mathlib.CategoryTheory.PathCategory","Mathlib.CategoryTheory.Functor.FullyFaithful","Mathlib.CategoryTheory.Bicategory.Free","Mathlib.CategoryTheory.Bicategory.LocallyDiscrete"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L252-L257","name":"CategoryTheory.FreeBicategory.inclusion","kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.inclusion","doc":"The inclusion pseudofunctor from the locally discrete bicategory on the path category into the\nfree bicategory.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L242-L246","name":"CategoryTheory.FreeBicategory.inclusionMapCompAux","kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.inclusionMapCompAux","doc":"Auxiliary definition for `inclusion`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L236-L238","name":"CategoryTheory.FreeBicategory.locally_thin","kind":"instance","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.locally_thin","doc":"The coherence theorem for bicategories. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L221-L232","name":"CategoryTheory.FreeBicategory.normalizeEquiv","kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeEquiv","doc":"Normalization as an equivalence of categories. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L210-L217","name":"CategoryTheory.FreeBicategory.normalizeUnitIso","kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeUnitIso","doc":"Auxiliary definition for `normalizeEquiv`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L200-L206","name":"CategoryTheory.FreeBicategory.normalize","kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalize","doc":"The normalization pseudofunctor for the free bicategory on a quiver `B`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L191-L196","name":"CategoryTheory.FreeBicategory.normalizeAux_nil_comp","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeAux_nil_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L164-L186","name":"CategoryTheory.FreeBicategory.normalize_naturality","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalize_naturality","doc":"The 2-isomorphism `normalizeIso p f` is natural in `f`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L151-L160","name":"CategoryTheory.FreeBicategory.normalizeAux_congr","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeAux_congr","doc":"Given a 2-morphism between `f` and `g` in the free bicategory, we have the equality\n`normalizeAux p f = normalizeAux p g`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L139-L145","name":"CategoryTheory.FreeBicategory.normalizeIso","kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeIso","doc":"A 2-isomorphism between a partially-normalized 1-morphism in the free bicategory to the\nfully-normalized 1-morphism.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L110-L113","name":"CategoryTheory.FreeBicategory.normalizeAux","kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeAux","doc":"The normalization of the composition of `p : Path a b` and `f : Hom b c`.\n`p` will eventually be taken to be `nil` and we then get the normalization\nof `f` alone, but the auxiliary `p` is necessary for Lean to accept the definition of\n`normalizeIso` and the `whisker_left` case of `normalizeAux_congr` and `normalize_naturality`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L97-L101","name":"CategoryTheory.FreeBicategory.preinclusion_map₂","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.preinclusion_map₂","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L92-L93","name":"CategoryTheory.FreeBicategory.preinclusion_obj","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.preinclusion_obj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L84-L88","name":"CategoryTheory.FreeBicategory.preinclusion","kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.preinclusion","doc":"The inclusion from the locally discrete bicategory on the path category into the free bicategory\nas a prelax functor. This will be promoted to a pseudofunctor after proving the coherence theorem.\nSee `inclusion`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L76-L77","name":"CategoryTheory.FreeBicategory.inclusionPath","kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.inclusionPath","doc":"The discrete category on the paths includes into the category of 1-morphisms in the free\nbicategory.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L70-L71","name":"CategoryTheory.FreeBicategory.homCategory'","kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.homCategory'","doc":"Category structure on `Hom a b`. In this file, we will use `Hom a b` for `a b : B`\n(precisely, `FreeBicategory.Hom a b`) instead of the definitionally equal expression\n`a ⟶ b` for `a b : FreeBicategory B`. The main reason is that we have to annoyingly write\n`@Quiver.Hom (FreeBicategory B) _ a b` to get the latter expression when given `a b : B`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L59-L61","name":"CategoryTheory.FreeBicategory.inclusionPathAux","kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.inclusionPathAux","doc":"Auxiliary definition for `inclusionPath`. "}]}