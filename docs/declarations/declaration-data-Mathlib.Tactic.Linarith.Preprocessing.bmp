{"name":"Mathlib.Tactic.Linarith.Preprocessing","instances":[],"imports":["Init","Mathlib.Tactic.Linarith.Datatypes","Mathlib.Tactic.Zify","Mathlib.Tactic.CancelDenoms","Mathlib.Lean.Exception","Std.Data.RBMap.Basic","Mathlib.Data.HashMap"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L426-L428","name":"Linarith.preprocess","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.preprocess","doc":"`preprocess pps l` takes a list `l` of proofs of propositions.\nIt maps each preprocessor `pp ∈ pps` over this list.\nThe preprocessors are run sequentially: each receives the output of the previous one.\nNote that a preprocessor may produce multiple or no expressions from each input expression,\nso the size of the list may change.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L415-L417","name":"Linarith.defaultPreprocessors","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.defaultPreprocessors","doc":"The default list of preprocessors, in the order they should typically run.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L344-L378","name":"Linarith.nlinarithExtras","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.nlinarithExtras","doc":"`nlinarithExtras` is the preprocessor corresponding to the `nlinarith` tactic.\n\n* For every term `t` such that `t^2` or `t*t` appears in the input, adds a proof of `t^2 ≥ 0`\n  or `t*t ≥ 0`.\n* For every pair of comparisons `t1 R1 0` and `t2 R2 0`, adds a proof of `t1*t2 R 0`.\n\nThis preprocessor is typically run last, after all inputs have been canonized.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L321-L333","name":"Linarith.findSquares","kind":"opaque","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.findSquares","doc":"`findSquares s e` collects all terms of the form `a ^ 2` and `a * a` that appear in `e`\nand adds them to the set `s`.\nA pair `(a, true)` is added to `s` when `a^2` appears in `e`,\nand `(a, false)` is added to `s` when `a*a` appears in `e`.  "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L306-L312","name":"Linarith.cancelDenoms","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.cancelDenoms","doc":"`cancelDenoms pf` assumes `pf` is a proof of `t R 0`. If `t` contains the division symbol `/`,\nit tries to scale `t` to cancel out division by numerals.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L288-L300","name":"Linarith.normalizeDenominatorsLHS","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.normalizeDenominatorsLHS","doc":"`normalizeDenominatorsLHS h lhs` assumes that `h` is a proof of `lhs R 0`.\nIt creates a proof of `lhs' R 0`, where all numeric division in `lhs` has been cancelled.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L282-L282","name":"Linarith.without_one_mul","kind":"theorem","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.without_one_mul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L268-L276","name":"Linarith.compWithZero","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.compWithZero","doc":"`compWithZero h` takes a proof `h` of an equality, inequality, or negation thereof,\nand turns it into a proof of a comparison `_ R 0`, where `R ∈ {=, ≤, <}`.\n "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L237-L262","name":"Linarith.rearrangeComparison.aux","kind":"opaque","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.rearrangeComparison.aux","doc":"Implementation of `rearrangeComparison`, after type inference. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L233-L262","name":"Linarith.rearrangeComparison","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.rearrangeComparison","doc":"`rearrangeComparison e` takes a proof `e` of an equality, inequality, or negation thereof,\nand turns it into a proof of a comparison `_ R 0`, where `R ∈ {=, ≤, <}`.\n "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L217-L223","name":"Linarith.strengthenStrictInt","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.strengthenStrictInt","doc":"`strengthenStrictInt h` turns a proof `h` of a strict integer inequality `t1 < t2`\ninto a proof of `t1 ≤ t2 + 1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L198-L212","name":"Linarith.mkNonstrictIntProof","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.mkNonstrictIntProof","doc":"If `pf` is a proof of a strict inequality `(a : ℤ) < b`,\n`mkNonstrictIntProof pf` returns a proof of `a + 1 ≤ b`,\nand similarly if `pf` proves a negated weak inequality.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L183-L191","name":"Linarith.isStrictIntComparison","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.isStrictIntComparison","doc":"`isStrictIntComparison tp` is true iff `tp` is a strict inequality between integers\nor the negation of a weak inequality between integers.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L150-L173","name":"Linarith.natToInt","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.natToInt","doc":"If `h` is an equality or inequality between natural numbers,\n`natToInt` lifts this inequality to the integers.\nIt also adds the facts that the integers involved are nonnegative.\nTo avoid adding the same nonnegativity facts many times, it is a global preprocessor.\n "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L141-L142","name":"Linarith.Expr.compare","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.Expr.compare","doc":"Ordering on `Expr`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L134-L135","name":"Linarith.mk_coe_nat_nonneg_prf","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.mk_coe_nat_nonneg_prf","doc":"If `e : ℕ`, returns a proof of `0 ≤ (e : ℤ)`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L125-L131","name":"Linarith.getNatComparisons","kind":"opaque","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.getNatComparisons","doc":"`getNatComparisons e` returns a list of all subexpressions of `e` of the form `((t : ℕ) : ℤ)`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L117-L120","name":"Linarith.isNatIntCoe","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.isNatIntCoe","doc":"If `e` is of the form `((n : ℕ) : ℤ)`, `isNatIntCoe e` returns `n : ℕ`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L106-L114","name":"Linarith.isNatProp","kind":"opaque","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.isNatProp","doc":"`isNatProp tp` is true iff `tp` is an inequality or equality between natural numbers\nor the negation thereof.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L86-L94","name":"Linarith.removeNegations","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.removeNegations","doc":"Replaces proofs of negations of comparisons with proofs of the reversed comparisons.\nFor example, a proof of `¬ a < b` will become a proof of `a ≥ b`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L76-L80","name":"Linarith.flipNegatedComparison","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.flipNegatedComparison","doc":"If `prf` is a proof of `¬ e`, where `e` is a comparison,\n`flipNegatedComparison prf e` flips the comparison in `e` and returns a proof.\nFor example, if `prf : ¬ a < b`, ``flipNegatedComparison prf q(a < b)`` returns a proof of `a ≥ b`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L61-L67","name":"Linarith.filterComparisons.aux","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.filterComparisons.aux","doc":"Implementation of the `filterComparisons` preprocessor. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L53-L67","name":"Linarith.filterComparisons","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.filterComparisons","doc":"Removes any expressions that are not proofs of inequalities, equalities, or negations thereof.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L43-L48","name":"Linarith.splitConjunctions.aux","kind":"opaque","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.splitConjunctions.aux","doc":"Implementation of the `splitConjunctions` preprocessor. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Preprocessing.lean#L38-L48","name":"Linarith.splitConjunctions","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Preprocessing.html#Linarith.splitConjunctions","doc":"Processor that recursively replaces `P ∧ Q` hypotheses with the pair `P` and `Q`. "}]}