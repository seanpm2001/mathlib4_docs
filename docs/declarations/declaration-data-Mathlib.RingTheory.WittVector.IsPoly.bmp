{"name":"Mathlib.RingTheory.WittVector.IsPoly","instances":[{"typeNames":["_builtin_typeu","CommRing","id","WittVector"],"name":"WittVector.idIsPoly","className":"WittVector.IsPoly"},{"typeNames":["_builtin_typeu","CommRing","WittVector"],"name":"WittVector.idIsPolyI'","className":"WittVector.IsPoly"},{"typeNames":["WittVector.IsPoly","_builtin_typeu","CommRing","id","WittVector"],"name":"WittVector.IsPoly.instInhabitedIsPolyTypeCommRingIdWittVector","className":"Inhabited"},{"typeNames":["_builtin_typeu","CommRing","Function.comp","WittVector"],"name":"WittVector.IsPoly.comp","className":"WittVector.IsPoly"},{"typeNames":["_builtin_typeu","CommRing","WittVector"],"name":"WittVector.IsPoly‚ÇÇ.comp","className":"WittVector.IsPoly‚ÇÇ"},{"typeNames":["_builtin_typeu","CommRing","WittVector"],"name":"WittVector.IsPoly.comp‚ÇÇ","className":"WittVector.IsPoly‚ÇÇ"},{"typeNames":["_builtin_typeu","CommRing","WittVector"],"name":"WittVector.IsPoly‚ÇÇ.diag","className":"WittVector.IsPoly"},{"typeNames":["_builtin_typeu","CommRing","Neg.neg","WittVector","WittVector.instNegWittVector"],"name":"WittVector.negIsPoly","className":"WittVector.IsPoly"},{"typeNames":["_builtin_typeu","CommRing","WittVector","OfNat.ofNat","Zero.toOfNat0","WittVector.instZeroWittVector"],"name":"WittVector.zeroIsPoly","className":"WittVector.IsPoly"},{"typeNames":["_builtin_typeu","CommRing","WittVector","OfNat.ofNat","One.toOfNat1","WittVector.instOneWittVector"],"name":"WittVector.oneIsPoly","className":"WittVector.IsPoly"},{"typeNames":["_builtin_typeu","CommRing","WittVector","HAdd.hAdd","instHAdd","WittVector.instAddWittVector"],"name":"WittVector.addIsPoly‚ÇÇ","className":"WittVector.IsPoly‚ÇÇ"},{"typeNames":["_builtin_typeu","CommRing","WittVector","HMul.hMul","instHMul","WittVector.instMulWittVector"],"name":"WittVector.mulIsPoly‚ÇÇ","className":"WittVector.IsPoly‚ÇÇ"},{"typeNames":["WittVector.IsPoly‚ÇÇ","_builtin_typeu","CommRing","WittVector","HAdd.hAdd","instHAdd","WittVector.instAddWittVector"],"name":"WittVector.IsPoly‚ÇÇ.instInhabitedIsPoly‚ÇÇTypeCommRingWittVectorHAddInstHAddInstAddWittVector","className":"Inhabited"}],"imports":["Init","Mathlib.Algebra.Ring.ULift","Mathlib.RingTheory.WittVector.Basic","Mathlib.Data.MvPolynomial.Funext","Mathlib.RingTheory.WittVector.WittAttributes"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L474-L498","name":"WittVector.Tactic.ghostCalc","kind":"def","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.Tactic.ghostCalc","doc":"`ghost_calc` is a tactic for proving identities between polynomial functions.\nTypically, when faced with a goal like\n```lean\n‚àÄ (x y : ùïé R), verschiebung (x * frobenius y) = verschiebung x * y\n```\nyou can\n1. call `ghost_calc`\n2. do a small amount of manual work -- maybe nothing, maybe `rintro`, etc\n3. call `ghost_simp`\n\nand this will close the goal.\n\n`ghost_calc` cannot detect whether you are dealing with unary or binary polynomial functions.\nYou must give it arguments to determine this.\nIf you are proving a universally quantified goal like the above,\ncall `ghost_calc _ _`.\nIf the variables are introduced already, call `ghost_calc x y`.\nIn the unary case, use `ghost_calc _` or `ghost_calc x`.\n\n`ghost_calc` is a light wrapper around type class inference.\nAll it does is apply the appropriate extensionality lemma and try to infer the resulting goals.\nThis is subtle and Lean's elaborator doesn't like it because of the HO unification involved,\nso it is easier (and prettier) to put it in a tactic script.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L465-L466","name":"WittVector.Tactic.ghostSimp","kind":"def","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.Tactic.ghostSimp","doc":"A macro for a common simplification when rewriting with ghost component equations. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L435-L448","name":"WittVector.IsPoly‚ÇÇ.map","kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.IsPoly‚ÇÇ.map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L405-L431","name":"WittVector.IsPoly‚ÇÇ.ext","kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.IsPoly‚ÇÇ.ext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L400-L402","name":"WittVector.IsPoly‚ÇÇ.compRight","kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.IsPoly‚ÇÇ.compRight","doc":"The composition of a binary polynomial function\nwith a unary polynomial function in the second argument is polynomial. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L392-L394","name":"WittVector.IsPoly‚ÇÇ.compLeft","kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.IsPoly‚ÇÇ.compLeft","doc":"The composition of a binary polynomial function\nwith a unary polynomial function in the first argument is polynomial. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L386-L387","name":"WittVector.IsPoly‚ÇÇ.instInhabitedIsPoly‚ÇÇTypeCommRingWittVectorHAddInstHAddInstAddWittVector","kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.IsPoly‚ÇÇ.instInhabitedIsPoly‚ÇÇTypeCommRingWittVectorHAddInstHAddInstAddWittVector","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L370-L380","name":"WittVector.IsPoly.map","kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.IsPoly.map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L363-L366","name":"WittVector.mulIsPoly‚ÇÇ","kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.mulIsPoly‚ÇÇ","doc":"Multiplication of Witt vectors is a polynomial function. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L355-L358","name":"WittVector.addIsPoly‚ÇÇ","kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.addIsPoly‚ÇÇ","doc":"Addition of Witt vectors is a polynomial function. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L340-L348","name":"WittVector.oneIsPoly","kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.oneIsPoly","doc":"The function that is constantly one on Witt vectors is a polynomial function. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L324-L336","name":"WittVector.bind‚ÇÅ_onePoly_wittPolynomial","kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.bind‚ÇÅ_onePoly_wittPolynomial","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L319-L320","name":"WittVector.onePoly","kind":"def","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.onePoly","doc":"The coefficients of `1 : ùïé R` as polynomials. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L313-L315","name":"WittVector.bind‚ÇÅ_zero_wittPolynomial","kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.bind‚ÇÅ_zero_wittPolynomial","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L308-L309","name":"WittVector.zeroIsPoly","kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.zeroIsPoly","doc":"The function that is constantly zero on Witt vectors is a polynomial function. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L295-L300","name":"WittVector.negIsPoly","kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.negIsPoly","doc":"The additive negation is a polynomial function on Witt vectors. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L274-L286","name":"WittVector.IsPoly‚ÇÇ.diag","kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.IsPoly‚ÇÇ.diag","doc":"The diagonal `Œª x, f x x` of a polynomial function `f` is polynomial. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L263-L269","name":"WittVector.IsPoly.comp‚ÇÇ","kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.IsPoly.comp‚ÇÇ","doc":"The composition of a polynomial function with a binary polynomial function is polynomial. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L237-L257","name":"WittVector.IsPoly‚ÇÇ.comp","kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.IsPoly‚ÇÇ.comp","doc":"The composition of polynomial functions is polynomial. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L228-L228","name":"WittVector.IsPoly‚ÇÇ.poly","kind":"def","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.IsPoly‚ÇÇ.poly","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L227-L227","name":"WittVector.IsPoly‚ÇÇ.mk'","kind":"ctor","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.IsPoly‚ÇÇ.mk'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L227-L230","name":"WittVector.IsPoly‚ÇÇ","kind":"class","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.IsPoly‚ÇÇ","doc":"A binary function `f : Œ† R, ùïé R ‚Üí ùïé R ‚Üí ùïé R` on Witt vectors\nis said to be *polynomial* if there is a family of polynomials `œÜ‚Çô` over `‚Ñ§` such that the `n`th\ncoefficient of `f x y` is given by evaluating `œÜ‚Çô` at the coefficients of `x` and `y`.\n\nSee also `WittVector.IsPoly` for the unary variant.\n\nThe `ghost_calc` tactic makes use of the `IsPoly` and `IsPoly‚ÇÇ` typeclass and its instances.\n(In Lean 3, there was an `@[is_poly]` attribute to manage these instances,\nbecause typeclass resolution did not play well with function composition.\nThis no longer seems to be an issue, so that such instances can be defined directly.)\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L205-L211","name":"WittVector.IsPoly.comp","kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.IsPoly.comp","doc":"The composition of polynomial functions is polynomial. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L176-L200","name":"WittVector.IsPoly.ext","kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.IsPoly.ext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L171-L172","name":"WittVector.IsPoly.instInhabitedIsPolyTypeCommRingIdWittVector","kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.IsPoly.instInhabitedIsPolyTypeCommRingIdWittVector","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L165-L166","name":"WittVector.idIsPolyI'","kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.idIsPolyI'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L161-L162","name":"WittVector.idIsPoly","kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.idIsPoly","doc":"The identity function on Witt vectors is a polynomial function. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L155-L155","name":"WittVector.IsPoly.poly","kind":"def","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.IsPoly.poly","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L154-L154","name":"WittVector.IsPoly.mk'","kind":"ctor","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.IsPoly.mk'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L154-L157","name":"WittVector.IsPoly","kind":"class","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.IsPoly","doc":"A function `f : Œ† R, ùïé R ‚Üí ùïé R` that maps Witt vectors to Witt vectors over arbitrary base rings\nis said to be *polynomial* if there is a family of polynomials `œÜ‚Çô` over `‚Ñ§` such that the `n`th\ncoefficient of `f x` is given by evaluating `œÜ‚Çô` at the coefficients of `x`.\n\nSee also `WittVector.IsPoly‚ÇÇ` for the binary variant.\n\nThe `ghost_calc` tactic makes use of the `IsPoly` and `IsPoly‚ÇÇ` typeclass and its instances.\n(In Lean 3, there was an `@[is_poly]` attribute to manage these instances,\nbecause typeclass resolution did not play well with function composition.\nThis no longer seems to be an issue, so that such instances can be defined directly.)\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L129-L137","name":"WittVector.poly_eq_of_wittPolynomial_bind_eq","kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.poly_eq_of_wittPolynomial_bind_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/RingTheory/WittVector/IsPoly.lean#L118-L126","name":"WittVector.poly_eq_of_wittPolynomial_bind_eq'","kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.poly_eq_of_wittPolynomial_bind_eq'","doc":""}]}