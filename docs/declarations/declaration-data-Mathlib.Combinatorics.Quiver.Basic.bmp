{"name":"Mathlib.Combinatorics.Quiver.Basic","instances":[{"typeNames":["Prefunctor"],"name":"Prefunctor.instInhabitedPrefunctor","className":"Inhabited"},{"typeNames":["Opposite"],"name":"Quiver.opposite","className":"Quiver"},{"typeNames":["Quiver.Empty"],"name":"Quiver.emptyQuiver","className":"Quiver"}],"imports":["Init","Mathlib.Data.Opposite"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L183-L183","name":"Quiver.IsThin","kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.IsThin","doc":"A quiver is thin if it has no parallel arrows. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L178-L178","name":"Quiver.empty_arrow","kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.empty_arrow","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L174-L174","name":"Quiver.emptyQuiver","kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.emptyQuiver","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L171-L171","name":"Quiver.Empty","kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Empty","doc":"A type synonym for a quiver with no arrows. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L163-L163","name":"Quiver.Hom.unop","kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.unop","doc":"Given an arrow in `V·µí·µñ`, we can take the \"unopposite\" back in `V`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L156-L156","name":"Quiver.Hom.op","kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op","doc":"The opposite of an arrow in `V`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L150-L151","name":"Quiver.opposite","kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.opposite","doc":"`V·µí·µñ` reverses the direction of all arrows of `V`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L142-L143","name":"Prefunctor.¬´termùü≠q¬ª","kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.¬´termùü≠q¬ª","doc":"Notation for the identity prefunctor on a quiver. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L139-L140","name":"Prefunctor.¬´term_‚ãôq_¬ª","kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.¬´term_‚ãôq_¬ª","doc":"Notation for composition of prefunctors. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L136-L137","name":"Prefunctor.¬´term_‚•§q_¬ª","kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.¬´term_‚•§q_¬ª","doc":"Notation for a prefunctor between quivers. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L130-L133","name":"Prefunctor.comp_assoc","kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.comp_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L125-L126","name":"Prefunctor.id_comp","kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.id_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L120-L121","name":"Prefunctor.comp_id","kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.comp_id","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L109-L112","name":"Prefunctor.comp","kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.comp","doc":"Composition of morphisms between quivers. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L108-L108","name":"Prefunctor.comp_obj","kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.comp_obj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L108-L108","name":"Prefunctor.comp_map","kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.comp_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L104-L105","name":"Prefunctor.instInhabitedPrefunctor","kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.instInhabitedPrefunctor","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L97-L99","name":"Prefunctor.id","kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.id","doc":"The identity morphism between quivers. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L96-L96","name":"Prefunctor.id_obj","kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.id_obj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L96-L96","name":"Prefunctor.id_map","kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.id_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L81-L92","name":"Prefunctor.ext","kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.ext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L77-L78","name":"Prefunctor.mk_map","kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.mk_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L76-L76","name":"Prefunctor.mk_obj","kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.mk_obj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L65-L65","name":"Prefunctor.map","kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.map","doc":"The action of a (pre)functor on edges/arrows/morphisms. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L63-L63","name":"Prefunctor.obj","kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.obj","doc":"The action of a (pre)functor on vertices/objects. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L61-L61","name":"Prefunctor.mk","kind":"ctor","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L61-L65","name":"Prefunctor","kind":"structure","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor","doc":"A morphism of quivers. As we will later have categorical functors extend this structure,\nwe call it a `Prefunctor`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L53-L57","name":"¬´term_‚ü∂_¬ª","kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#¬´term_‚ü∂_¬ª","doc":"Notation for the type of edges/arrows/morphisms between a given source and target\nin a quiver or category.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L49-L49","name":"Quiver.Hom","kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom","doc":"The type of edges/arrows/morphisms between a given source and target. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L47-L47","name":"Quiver.mk","kind":"ctor","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Quiver/Basic.lean#L47-L49","name":"Quiver","kind":"class","docLink":"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver","doc":"A quiver `G` on a type `V` of vertices assigns to every pair `a b : V` of vertices\na type `a ‚ü∂ b` of arrows from `a` to `b`.\n\nFor graphs with no repeated edges, one can use `Quiver.{0} V`, which ensures\n`a ‚ü∂ b : Prop`. For multigraphs, one can use `Quiver.{v+1} V`, which ensures\n`a ‚ü∂ b : Type v`.\n\nBecause `Category` will later extend this class, we call the field `hom`.\nExcept when constructing instances, you should rarely see this, and use the `‚ü∂` notation instead.\n"}]}