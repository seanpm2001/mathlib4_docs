{"name":"Mathlib.Tactic.WLOG","instances":[],"imports":["Init","Lean","Mathlib.Tactic.Core"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/WLOG.lean#L111-L128","name":"Mathlib.Tactic.wlog","kind":"def","docLink":"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.wlog","doc":"`wlog h : P` will add an assumption `h : P` to the main goal, and add a side goal that requires\nshowing that the case `h : ¬ P` can be reduced to the case where `P` holds (typically by symmetry).\n\nThe side goal will be at the top of the stack. In this side goal, there will be two additional\nassumptions:\n- `h : ¬ P`: the assumption that `P` does not hold\n- `this`: which is the statement that in the old context `P` suffices to prove the goal.\n  By default, the name `this` is used, but the idiom `with H` can be added to specify the name:\n  `wlog h : P with H`.\n\nTypically, it is useful to use the variant `wlog h : P generalizing x y`,\nto revert certain parts of the context before creating the new goal.\nIn this way, the wlog-claim `this` can be applied to `x` and `y` in different orders\n(exploiting symmetry, which is the typical use case).\n\nBy default, the entire context is reverted. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/WLOG.lean#L64-L109","name":"Lean.MVarId.wlog","kind":"def","docLink":"./Mathlib/Tactic/WLOG.html#Lean.MVarId.wlog","doc":"`wlog goal h P xs H` will return two goals: the `hypothesisGoal`, which adds an assumption\n`h : P` to the context of `goal`, and the `reductionGoal`, which requires showing that the case\n`h : ¬ P` can be reduced to the case where `P` holds (typically by symmetry).\n\nIn `reductionGoal`, there will be two additional assumptions:\n- `h : ¬ P`: the assumption that `P` does not hold\n- `H`: which is the statement that in the old context `P` suffices to prove the goal.\n  If `H` is `none`, the name `this` is used.\n\nIf `xs` is `none`, all hypotheses are reverted to produce the reduction goal's hypothesis `H`.\nOtherwise, the `xs` are elaborated to hypotheses in the context of `goal`, and only those\nhypotheses are reverted (and any that depend on them).\n\nIf `h` is `none`, the hypotheses of types `P` and `¬ P` in both branches will be inaccessible. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/WLOG.lean#L47-L47","name":"Mathlib.Tactic.WLOGResult.revertedFVarIds","kind":"def","docLink":"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult.revertedFVarIds","doc":"The array of `FVarId`s that was reverted to produce the reduction hypothesis `H` in\n`reductionGoal`, which are still present in the context of `reductionGoal` (but not necessarily\n`hypothesisGoal`). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/WLOG.lean#L43-L43","name":"Mathlib.Tactic.WLOGResult.hypothesisFVarId","kind":"def","docLink":"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult.hypothesisFVarId","doc":"The `FVarId` of the hypothesis `h` in `hypothesisGoal` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/WLOG.lean#L41-L41","name":"Mathlib.Tactic.WLOGResult.hypothesisGoal","kind":"def","docLink":"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult.hypothesisGoal","doc":"The original goal with the additional assumption `h : P`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/WLOG.lean#L39-L39","name":"Mathlib.Tactic.WLOGResult.reductionFVarIds","kind":"def","docLink":"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult.reductionFVarIds","doc":"The pair `(HFVarId, negHypFVarId)` of `FVarIds` for `reductionGoal`:\n\n* `HFVarId`: `H`, the statement that in the original context `P` suffices to prove the goal.\n* `negHypFVarId`: `h : ¬ P`, the assumption that `P` does not hold\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/WLOG.lean#L33-L33","name":"Mathlib.Tactic.WLOGResult.reductionGoal","kind":"def","docLink":"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult.reductionGoal","doc":"The `reductionGoal` requires showing that the case `h : ¬ P` can be reduced to the case where\n`P` holds. It has two additional assumptions in its context:\n\n* `h : ¬ P`: the assumption that `P` does not hold\n* `H`: the statement that in the original context `P` suffices to prove the goal.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/WLOG.lean#L26-L47","name":"Mathlib.Tactic.WLOGResult","kind":"structure","docLink":"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult","doc":"The result of running `wlog` on a goal. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/WLOG.lean#L1-L1","name":"Mathlib.Tactic.WLOGResult.mk","kind":"ctor","docLink":"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult.mk","doc":""}]}