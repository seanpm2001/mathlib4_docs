{"name":"Std.Classes.BEq","instances":[],"imports":["Init"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/BEq.lean#L20-L23","name":"beq_eq_false_iff_ne","kind":"theorem","docLink":"./Std/Classes/BEq.html#beq_eq_false_iff_ne","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/BEq.lean#L18-L18","name":"PartialEquivBEq.trans","kind":"def","docLink":"./Std/Classes/BEq.html#PartialEquivBEq.trans","doc":"Transitivity for `BEq`. If `a == b` and `b == c` then `a == c`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/BEq.lean#L16-L16","name":"PartialEquivBEq.symm","kind":"def","docLink":"./Std/Classes/BEq.html#PartialEquivBEq.symm","doc":"Symmetry for `BEq`. If `a == b` then `b == a`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/BEq.lean#L14-L14","name":"PartialEquivBEq.mk","kind":"ctor","docLink":"./Std/Classes/BEq.html#PartialEquivBEq.mk","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/BEq.lean#L14-L18","name":"PartialEquivBEq","kind":"class","docLink":"./Std/Classes/BEq.html#PartialEquivBEq","doc":"`PartialEquivBEq α` says that the `BEq` implementation is a\npartial equivalence relation, that is:\n* it is symmetric: `a == b → b == a`\n* it is transitive: `a == b → b == c → a == c`.\n"}]}