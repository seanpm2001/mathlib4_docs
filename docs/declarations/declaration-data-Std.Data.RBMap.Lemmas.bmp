{"name":"Std.Data.RBMap.Lemmas","instances":[{"typeNames":["Std.RBNode.Ordered"],"name":"Std.RBNode.instDecidableOrdered","className":"Decidable"},{"typeNames":[],"name":"Std.RBNode.instIsStrictCut","className":"Std.RBNode.IsStrictCut"},{"typeNames":["Membership.mem","Std.RBSet","Std.RBSet.instMembershipRBSet"],"name":"Std.RBSet.instDecidableMemRBSetInstMembershipRBSet","className":"Decidable"}],"imports":["Init","Std.Data.RBMap.Alter","Std.Data.Nat.Lemmas","Std.Data.List.Lemmas"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L734-L736","name":"Std.RBSet.find?_insert","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_insert","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L726-L732","name":"Std.RBSet.find?_insert_of_ne","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_insert_of_ne","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L722-L724","name":"Std.RBSet.find?_insert_of_eq","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_insert_of_eq","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L719-L720","name":"Std.RBSet.find?_congr","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_congr","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L711-L717","name":"Std.RBSet.mem_insert","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_insert","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L706-L709","name":"Std.RBSet.mem_toList_insert","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_toList_insert","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L702-L704","name":"Std.RBSet.mem_insert_of_mem","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_insert_of_mem","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L696-L700","name":"Std.RBSet.mem_insert_of_mem_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_insert_of_mem_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L691-L694","name":"Std.RBSet.mem_toList_insert_of_mem","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_toList_insert_of_mem","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L688-L689","name":"Std.RBSet.mem_insert_of_eq","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_insert_of_eq","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L685-L686","name":"Std.RBSet.mem_insert_self","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_insert_self","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L682-L683","name":"Std.RBSet.mem_toList_insert_self","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_toList_insert_self","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L680-L680","name":"Std.RBSet.size_eq","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.size_eq","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L678-L678","name":"Std.RBSet.instDecidableMemRBSetInstMembershipRBSet","kind":"instance","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.instDecidableMemRBSetInstMembershipRBSet","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L675-L676","name":"Std.RBSet.contains_iff","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.contains_iff","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L672-L673","name":"Std.RBSet.mem_iff_find?","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_iff_find?","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L668-L670","name":"Std.RBSet.find?_some","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_some","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L664-L666","name":"Std.RBSet.mem_toList_unique","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_toList_unique","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L661-L662","name":"Std.RBSet.find?_some_mem","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_some_mem","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L658-L659","name":"Std.RBSet.find?_some_mem_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_some_mem_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L655-L656","name":"Std.RBSet.find?_some_eq_eq","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_some_eq_eq","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L652-L653","name":"Std.RBSet.toList_sorted","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.toList_sorted","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L649-L650","name":"Std.RBSet.toStream_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.toStream_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L647-L647","name":"Std.RBSet.toStream_eq","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.toStream_eq","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L644-L645","name":"Std.RBSet.forIn_eq_forIn_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.forIn_eq_forIn_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L641-L642","name":"Std.RBSet.foldlM_eq_foldlM_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.foldlM_eq_foldlM_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L638-L639","name":"Std.RBSet.foldr_eq_foldr_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.foldr_eq_foldr_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L635-L636","name":"Std.RBSet.foldl_eq_foldl_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.foldl_eq_foldl_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L632-L633","name":"Std.RBSet.mem_of_mem_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_of_mem_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L629-L630","name":"Std.RBSet.mem_iff_mem_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_iff_mem_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L626-L627","name":"Std.RBSet.mem_congr","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_congr","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L624-L624","name":"Std.RBSet.mem_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L622-L622","name":"Std.RBSet.single_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.single_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L621-L621","name":"Std.RBSet.empty_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.empty_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L620-L620","name":"Std.RBSet.default_eq","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.default_eq","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L619-L619","name":"Std.RBSet.empty_eq","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.empty_eq","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L618-L618","name":"Std.RBSet.mkRBSet_eq","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mkRBSet_eq","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L616-L616","name":"Std.RBSet.val_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.val_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L590-L610","name":"Std.RBNode.mem_insert","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_insert","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L585-L588","name":"Std.RBNode.find?_insert_self","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.find?_insert_self","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L580-L583","name":"Std.RBNode.exists_find?_insert_self","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.exists_find?_insert_self","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L567-L578","name":"Std.RBNode.mem_insert_of_mem","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_insert_of_mem","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L561-L565","name":"Std.RBNode.mem_insert_self","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_insert_self","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L555-L559","name":"Std.RBNode.exists_insert_toList_zoom_node","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.exists_insert_toList_zoom_node","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L551-L553","name":"Std.RBNode.insert_toList_zoom_node","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.insert_toList_zoom_node","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L546-L549","name":"Std.RBNode.exists_insert_toList_zoom_nil","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.exists_insert_toList_zoom_nil","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L542-L544","name":"Std.RBNode.insert_toList_zoom_nil","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.insert_toList_zoom_nil","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L537-L540","name":"Std.RBNode.insert_toList_zoom","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.insert_toList_zoom","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L531-L533","name":"Std.RBNode.Path.insert_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.insert_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L528-L529","name":"Std.RBNode.Path.insertNew_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.insertNew_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L523-L526","name":"Std.RBNode.Path.ins_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.ins_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L520-L521","name":"Std.RBNode.zoom_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.zoom_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L517-L518","name":"Std.RBNode.Path.fill_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.fill_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L496-L515","name":"Std.RBNode.Path.ordered_iff","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.ordered_iff","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L489-L494","name":"Std.RBNode.Path.rootOrdered_iff","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.rootOrdered_iff","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L487-L487","name":"Std.RBNode.Path.withList","kind":"def","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.withList","doc":"Wraps a list of elements with the left and right elements of the path. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L481-L484","name":"Std.RBNode.Path.listR","kind":"def","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.listR","doc":"The list of elements to the right of the hole.\n(This function is intended for specification purposes only.) "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L474-L477","name":"Std.RBNode.Path.listL","kind":"def","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.listL","doc":"The list of elements to the left of the hole.\n(This function is intended for specification purposes only.) "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L465-L466","name":"Std.RBNode.size_eq","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.size_eq","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L461-L463","name":"Std.RBNode.balRight_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.balRight_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L457-L459","name":"Std.RBNode.balLeft_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.balLeft_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L453-L455","name":"Std.RBNode.balance2_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.balance2_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L449-L451","name":"Std.RBNode.balance1_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.balance1_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L446-L447","name":"Std.RBNode.setRed_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.setRed_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L443-L444","name":"Std.RBNode.setBlack_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.setBlack_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L440-L441","name":"Std.RBNode.Ordered.toList_sorted","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.toList_sorted","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L431-L438","name":"Std.RBNode.ordered_iff","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.ordered_iff","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L427-L429","name":"Std.RBNode.Stream.next?_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Stream.next?_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L424-L425","name":"Std.RBNode.toStream_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.toStream_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L421-L422","name":"Std.RBNode.toStream_toList'","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.toStream_toList'","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L415-L417","name":"Std.RBNode.Stream.forIn_eq_forIn_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Stream.forIn_eq_forIn_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L412-L413","name":"Std.RBNode.Stream.foldl_eq_foldl_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Stream.foldl_eq_foldl_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L409-L410","name":"Std.RBNode.Stream.foldr_eq_foldr_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Stream.foldr_eq_foldr_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L405-L407","name":"Std.RBNode.Stream.toList_cons","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Stream.toList_cons","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L403-L403","name":"Std.RBNode.Stream.toList_nil","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Stream.toList_nil","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L400-L401","name":"Std.RBNode.Stream.foldr_cons","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Stream.foldr_cons","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L390-L392","name":"Std.RBNode.forIn_eq_forIn_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.forIn_eq_forIn_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L386-L388","name":"Std.RBNode.forIn_visit_eq_bindList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.forIn_visit_eq_bindList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L382-L384","name":"Std.RBNode.foldlM_eq_foldlM_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.foldlM_eq_foldlM_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L379-L380","name":"Std.RBNode.forM_eq_forM_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.forM_eq_forM_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L376-L377","name":"Std.RBNode.foldl_eq_foldl_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.foldl_eq_foldl_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L373-L374","name":"Std.RBNode.foldr_eq_foldr_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.foldr_eq_foldr_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L370-L371","name":"Std.RBNode.mem_toList","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_toList","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L367-L368","name":"Std.RBNode.toList_node","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.toList_node","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L365-L365","name":"Std.RBNode.toList_nil","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.toList_nil","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L359-L363","name":"Std.RBNode.foldr_cons","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.foldr_cons","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L346-L353","name":"Std.RBNode.Ordered.lowerBound?_lt","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.lowerBound?_lt","doc":"A stronger version of `lowerBound?_least` that holds when the cut is strict. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L333-L343","name":"Std.RBNode.Ordered.memP_iff_lowerBound?","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.memP_iff_lowerBound?","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L328-L331","name":"Std.RBNode.Ordered.lowerBound?_least","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.lowerBound?_least","doc":"A statement of the least-ness of the result of `lowerBound?`. If `x` is the return value of\n`lowerBound?` and it is strictly less than the cut, then any other `y > x` in the tree is in fact\nstrictly greater than the cut (so there is no exact match, and nothing closer to the cut).\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L301-L321","name":"Std.RBNode.Ordered.lowerBound?_least_lb","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.lowerBound?_least_lb","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L286-L299","name":"Std.RBNode.Ordered.lowerBound?_exists","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.lowerBound?_exists","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L283-L284","name":"Std.RBNode.lowerBound?_of_some","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.lowerBound?_of_some","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L280-L281","name":"Std.RBNode.lowerBound?_mem","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.lowerBound?_mem","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L276-L278","name":"Std.RBNode.lowerBound?_mem_lb","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.lowerBound?_mem_lb","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L273-L274","name":"Std.RBNode.All.lowerBound?","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.All.lowerBound?","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L263-L271","name":"Std.RBNode.All.lowerBound?_lb","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.All.lowerBound?_lb","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L260-L261","name":"Std.RBNode.lowerBound?_le","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.lowerBound?_le","doc":"The value `x` returned by `lowerBound?` is less or equal to the `cut`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L249-L257","name":"Std.RBNode.lowerBound?_le'","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.lowerBound?_le'","doc":"The value `x` returned by `lowerBound?` is less or equal to the `cut`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L238-L242","name":"Std.RBNode.Ordered.find?_some","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.find?_some","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L220-L236","name":"Std.RBNode.Ordered.unique","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.unique","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L196-L218","name":"Std.RBNode.Ordered.memP_iff_find?","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.memP_iff_find?","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L193-L194","name":"Std.RBNode.find?_some_memP","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.find?_some_memP","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L190-L191","name":"Std.RBNode.find?_some_mem","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.find?_some_mem","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L186-L188","name":"Std.RBNode.find?_some_eq_eq","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.find?_some_eq_eq","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L179-L182","name":"Std.RBNode.instIsStrictCut","kind":"instance","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.instIsStrictCut","doc":"A \"representable cut\" is one generated by `cmp a` for some `a`. This is always a valid cut. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L176-L176","name":"Std.RBNode.IsStrictCut.exact","kind":"def","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsStrictCut.exact","doc":"If `cut = x`, then `cut` and `x` have compare the same with respect to other elements. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L174-L174","name":"Std.RBNode.IsStrictCut.mk","kind":"ctor","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsStrictCut.mk","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L174-L176","name":"Std.RBNode.IsStrictCut","kind":"class","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsStrictCut","doc":"`IsStrictCut` upgrades the `IsCut` property to ensure that at most one element of the tree\ncan match the cut, and hence `find?` will return the unique such element if one exists.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L160-L168","name":"Std.RBNode.IsCut.congr","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut.congr","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L156-L158","name":"Std.RBNode.IsCut.gt_trans","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut.gt_trans","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L152-L154","name":"Std.RBNode.IsCut.lt_trans","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut.lt_trans","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L150-L150","name":"Std.RBNode.IsCut.le_gt_trans","kind":"def","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut.le_gt_trans","doc":"The set `{x | cut x = .gt}` is upward-closed. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L148-L148","name":"Std.RBNode.IsCut.le_lt_trans","kind":"def","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut.le_lt_trans","doc":"The set `{x | cut x = .lt}` is downward-closed. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L146-L146","name":"Std.RBNode.IsCut.mk","kind":"ctor","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut.mk","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L146-L150","name":"Std.RBNode.IsCut","kind":"class","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut","doc":"A cut is like a homomorphism of orderings: it is a monotonic predicate with respect to `cmp`,\nbut it can make things that are distinguished by `cmp` equal.\nThis is sufficient for `find?` to locate an element on which `cut` returns `.eq`,\nbut there may be other elements, not returned by `find?`, on which `cut` also returns `.eq`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L138-L138","name":"Std.RBNode.instDecidableOrdered","kind":"instance","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.instDecidableOrdered","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L135-L136","name":"Std.RBNode.isOrdered_iff","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.isOrdered_iff","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L113-L133","name":"Std.RBNode.isOrdered_iff'","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.isOrdered_iff'","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L110-L111","name":"Std.RBNode.mem_congr","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_congr","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L108-L108","name":"Std.RBNode.mem_def","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_def","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L106-L106","name":"Std.RBNode.memP_def","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.memP_def","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L103-L104","name":"Std.RBNode.Any_def","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Any_def","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L100-L101","name":"Std.RBNode.All_def","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.All_def","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L97-L98","name":"Std.RBNode.mem_node","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_node","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L96-L96","name":"Std.RBNode.mem_nil","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_nil","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L91-L92","name":"Std.RBNode.WF.depth_bound","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.WF.depth_bound","doc":"A well formed tree has `t.depth ∈ O(log t.size)`, that is, it is well balanced.\nThis justifies the `O(log n)` bounds on most searching operations of `RBSet`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L83-L85","name":"Std.RBNode.Balanced.depth_bound","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Balanced.depth_bound","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L73-L81","name":"Std.RBNode.Balanced.le_size","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Balanced.le_size","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L67-L71","name":"Std.RBNode.Balanced.depth_le","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Balanced.depth_le","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L63-L65","name":"Std.RBNode.depthUB_le_two_depthLB","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depthUB_le_two_depthLB","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L59-L61","name":"Std.RBNode.depthUB_le","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depthUB_le","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L55-L57","name":"Std.RBNode.depthUB","kind":"def","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depthUB","doc":"`depthUB c n` is the best upper bound on the depth of any balanced red-black tree\nwith root colored `c` and black-height `n`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L47-L49","name":"Std.RBNode.depthLB_le","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depthLB_le","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L43-L45","name":"Std.RBNode.depthLB","kind":"def","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depthLB","doc":"`depthLB c n` is the best upper bound on the depth of any balanced red-black tree\nwith root colored `c` and black-height `n`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L30-L37","name":"Std.RBNode.size_lt_depth","kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.size_lt_depth","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/RBMap/Lemmas.lean#L26-L28","name":"Std.RBNode.depth","kind":"def","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depth","doc":"`O(n)`. `depth t` is the maximum number of nodes on any path to a leaf.\nIt is an upper bound on most tree operations.\n"}]}