{"name":"Mathlib.CategoryTheory.Monad.Limits","instances":[{"typeNames":["CategoryTheory.Monad.Algebra","CategoryTheory.Monad.Algebra.eilenbergMoore","CategoryTheory.Monad.forget"],"name":"CategoryTheory.Monad.forgetCreatesLimits","className":"CategoryTheory.CreatesLimitsOfSize"},{"typeNames":["CategoryTheory.Monad.Algebra","CategoryTheory.Monad.Algebra.eilenbergMoore","CategoryTheory.Monad.forget"],"name":"CategoryTheory.Monad.forgetCreatesColimit","className":"CategoryTheory.CreatesColimit"},{"typeNames":["CategoryTheory.Monad.Algebra","CategoryTheory.Monad.Algebra.eilenbergMoore","CategoryTheory.Monad.forget"],"name":"CategoryTheory.Monad.forgetCreatesColimitsOfShape","className":"CategoryTheory.CreatesColimitsOfShape"},{"typeNames":["CategoryTheory.Monad.Algebra","CategoryTheory.Monad.Algebra.eilenbergMoore","CategoryTheory.Monad.forget"],"name":"CategoryTheory.Monad.forgetCreatesColimits","className":"CategoryTheory.CreatesColimitsOfSize"},{"typeNames":["CategoryTheory.Functor.comp","CategoryTheory.Monad.Algebra","CategoryTheory.Adjunction.toMonad","CategoryTheory.leftAdjoint","CategoryTheory.MonadicRightAdjoint.toIsRightAdjoint","CategoryTheory.Adjunction.ofRightAdjoint","CategoryTheory.Monad.Algebra.eilenbergMoore","CategoryTheory.Functor.comp","CategoryTheory.Monad.comparison","CategoryTheory.Monad.forget"],"name":"CategoryTheory.comp_comparison_forget_hasLimit","className":"CategoryTheory.Limits.HasLimit"},{"typeNames":["CategoryTheory.Monad.Algebra","CategoryTheory.Adjunction.toMonad","CategoryTheory.leftAdjoint","CategoryTheory.MonadicRightAdjoint.toIsRightAdjoint","CategoryTheory.Adjunction.ofRightAdjoint","CategoryTheory.Monad.Algebra.eilenbergMoore","CategoryTheory.Adjunction.toMonad","CategoryTheory.leftAdjoint","CategoryTheory.MonadicRightAdjoint.toIsRightAdjoint","CategoryTheory.Adjunction.ofRightAdjoint","CategoryTheory.Functor.comp","CategoryTheory.Monad.Algebra","CategoryTheory.Adjunction.toMonad","CategoryTheory.leftAdjoint","CategoryTheory.MonadicRightAdjoint.toIsRightAdjoint","CategoryTheory.Adjunction.ofRightAdjoint","CategoryTheory.Monad.Algebra.eilenbergMoore","CategoryTheory.Monad.comparison"],"name":"CategoryTheory.comp_comparison_hasLimit","className":"CategoryTheory.Limits.HasLimit"}],"imports":["Init","Mathlib.CategoryTheory.Monad.Adjunction","Mathlib.CategoryTheory.Adjunction.Limits","Mathlib.CategoryTheory.Limits.Shapes.Terminal"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L396-L411","name":"CategoryTheory.leftAdjointPreservesTerminalOfReflective","kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.leftAdjointPreservesTerminalOfReflective","doc":"The reflector always preserves terminal objects. Note this in general doesn't apply to any other\nlimit.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L388-L390","name":"CategoryTheory.hasColimits_of_reflective","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.hasColimits_of_reflective","doc":"If `C` has colimits then any reflective subcategory has colimits. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L375-L384","name":"CategoryTheory.hasColimitsOfShape_of_reflective","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.hasColimitsOfShape_of_reflective","doc":"If `C` has colimits of shape `J` then any reflective subcategory has colimits of shape `J`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L369-L371","name":"CategoryTheory.hasLimits_of_reflective","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.hasLimits_of_reflective","doc":"If `C` has limits then any reflective subcategory has limits. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L363-L365","name":"CategoryTheory.hasLimitsOfShape_of_reflective","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.hasLimitsOfShape_of_reflective","doc":"If `C` has limits of shape `J` then any reflective subcategory has limits of shape `J`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L356-L359","name":"CategoryTheory.hasLimit_of_reflective","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.hasLimit_of_reflective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L348-L351","name":"CategoryTheory.monadicCreatesColimitsOfPreservesColimits","kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.monadicCreatesColimitsOfPreservesColimits","doc":"A monadic functor creates colimits if it preserves colimits. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L338-L344","name":"CategoryTheory.monadicCreatesColimitsOfShapeOfPreservesColimitsOfShape","kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.monadicCreatesColimitsOfShapeOfPreservesColimitsOfShape","doc":"A monadic functor creates any colimits of shapes it preserves. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L309-L334","name":"CategoryTheory.monadicCreatesColimitOfPreservesColimit","kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.monadicCreatesColimitOfPreservesColimit","doc":"The forgetful functor from the Eilenberg-Moore category for a monad creates any colimit\nwhich the monad itself preserves.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L301-L303","name":"CategoryTheory.monadicCreatesLimits","kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.monadicCreatesLimits","doc":"Any monadic functor creates limits. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L295-L297","name":"CategoryTheory.comp_comparison_hasLimit","kind":"instance","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.comp_comparison_hasLimit","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L288-L292","name":"CategoryTheory.comp_comparison_forget_hasLimit","kind":"instance","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.comp_comparison_forget_hasLimit","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L277-L279","name":"CategoryTheory.Monad.forget_creates_colimits_of_monad_preserves","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.forget_creates_colimits_of_monad_preserves","doc":"For `D : J ⥤ Algebra T`, `D ⋙ forget T` has a colimit, then `D` has a colimit provided colimits\nof shape `J` are preserved by `T`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L270-L271","name":"CategoryTheory.Monad.forgetCreatesColimits","kind":"instance","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.forgetCreatesColimits","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L266-L267","name":"CategoryTheory.Monad.forgetCreatesColimitsOfShape","kind":"instance","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.forgetCreatesColimitsOfShape","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L248-L263","name":"CategoryTheory.Monad.forgetCreatesColimit","kind":"instance","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.forgetCreatesColimit","doc":"The forgetful functor from the Eilenberg-Moore category for a monad creates any colimit\nwhich the monad itself preserves.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L225-L237","name":"CategoryTheory.Monad.ForgetCreatesColimits.liftedCoconeIsColimit","kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesColimits.liftedCoconeIsColimit","doc":"(Impl) Prove that the lifted cocone is colimiting. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L224-L224","name":"CategoryTheory.Monad.ForgetCreatesColimits.liftedCoconeIsColimit_desc_f","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesColimits.liftedCoconeIsColimit_desc_f","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L210-L220","name":"CategoryTheory.Monad.ForgetCreatesColimits.liftedCocone","kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesColimits.liftedCocone","doc":"(Impl) Construct the lifted cocone in `Algebra T` which will be colimiting. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L209-L209","name":"CategoryTheory.Monad.ForgetCreatesColimits.liftedCocone_pt","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesColimits.liftedCocone_pt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L209-L209","name":"CategoryTheory.Monad.ForgetCreatesColimits.liftedCocone_ι_app_f","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesColimits.liftedCocone_ι_app_f","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L189-L205","name":"CategoryTheory.Monad.ForgetCreatesColimits.coconePoint","kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesColimits.coconePoint","doc":"(Impl)\nConstruct the colimiting algebra from the map `λ : TL ⟶ L` given by `lambda`. We are required to\nshow it satisfies the two algebra laws, which follow from the algebra laws for the image of `D` and\nour `commuting` lemma.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L188-L188","name":"CategoryTheory.Monad.ForgetCreatesColimits.coconePoint_a","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesColimits.coconePoint_a","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L188-L188","name":"CategoryTheory.Monad.ForgetCreatesColimits.coconePoint_A","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesColimits.coconePoint_A","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L177-L178","name":"CategoryTheory.Monad.ForgetCreatesColimits.commuting","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesColimits.commuting","doc":"(Impl) The key property defining the map `λ : TL ⟶ L`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L172-L173","name":"CategoryTheory.Monad.ForgetCreatesColimits.lambda","kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesColimits.lambda","doc":"(Impl)\nDefine the map `λ : TL ⟶ L`, which will serve as the structure of the coalgebra on `L`, and\nwe will show is the colimiting object. We use the cocone constructed by `c` and the fact that\n`T` preserves colimits to produce this morphism.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L159-L161","name":"CategoryTheory.Monad.ForgetCreatesColimits.newCocone","kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesColimits.newCocone","doc":"(Impl)\nA cocone for the diagram `(D ⋙ forget T) ⋙ T` found by composing the natural transformation `γ`\nwith the colimiting cocone for `D ⋙ forget T`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L158-L158","name":"CategoryTheory.Monad.ForgetCreatesColimits.newCocone_pt","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesColimits.newCocone_pt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L158-L158","name":"CategoryTheory.Monad.ForgetCreatesColimits.newCocone_ι","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesColimits.newCocone_ι","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L151-L151","name":"CategoryTheory.Monad.ForgetCreatesColimits.γ","kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesColimits.γ","doc":"(Impl)\nThe natural transformation given by the algebra structure maps, used to construct a cocone `c` with\napex `colimit (D ⋙ forget T)`.\n "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L150-L150","name":"CategoryTheory.Monad.ForgetCreatesColimits.γ_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesColimits.γ_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L127-L129","name":"CategoryTheory.Monad.hasLimit_of_comp_forget_hasLimit","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.hasLimit_of_comp_forget_hasLimit","doc":"`D ⋙ forget T` has a limit, then `D` has a limit. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L117-L123","name":"CategoryTheory.Monad.forgetCreatesLimits","kind":"instance","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.forgetCreatesLimits","doc":"The forgetful functor from the Eilenberg-Moore category creates limits. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L97-L110","name":"CategoryTheory.Monad.ForgetCreatesLimits.liftedConeIsLimit","kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesLimits.liftedConeIsLimit","doc":"(Impl) Prove that the lifted cone is limiting. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L96-L96","name":"CategoryTheory.Monad.ForgetCreatesLimits.liftedConeIsLimit_lift_f","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesLimits.liftedConeIsLimit_lift_f","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L84-L92","name":"CategoryTheory.Monad.ForgetCreatesLimits.liftedCone","kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesLimits.liftedCone","doc":"(Impl) Construct the lifted cone in `Algebra T` which will be limiting. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L83-L83","name":"CategoryTheory.Monad.ForgetCreatesLimits.liftedCone_π_app_f","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesLimits.liftedCone_π_app_f","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L83-L83","name":"CategoryTheory.Monad.ForgetCreatesLimits.liftedCone_pt","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesLimits.liftedCone_pt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L65-L79","name":"CategoryTheory.Monad.ForgetCreatesLimits.conePoint","kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesLimits.conePoint","doc":"The algebra structure which will be the apex of the new limit cone for `D`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L64-L64","name":"CategoryTheory.Monad.ForgetCreatesLimits.conePoint_a","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesLimits.conePoint_a","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L64-L64","name":"CategoryTheory.Monad.ForgetCreatesLimits.conePoint_A","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesLimits.conePoint_A","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L58-L60","name":"CategoryTheory.Monad.ForgetCreatesLimits.newCone","kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesLimits.newCone","doc":"(Impl) This new cone is used to construct the algebra structure "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L57-L57","name":"CategoryTheory.Monad.ForgetCreatesLimits.newCone_π_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesLimits.newCone_π_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L53-L53","name":"CategoryTheory.Monad.ForgetCreatesLimits.γ","kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesLimits.γ","doc":"(Impl) The natural transformation used to define the new cone "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Monad/Limits.lean#L52-L52","name":"CategoryTheory.Monad.ForgetCreatesLimits.γ_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Limits.html#CategoryTheory.Monad.ForgetCreatesLimits.γ_app","doc":""}]}