{"name":"Mathlib.Algebra.Field.Defs","instances":[{"typeNames":[],"name":"DivisionRing.toDivisionSemiring","className":"DivisionSemiring"},{"typeNames":["Rat"],"name":"Rat.smulDivisionRing","className":"SMul"},{"typeNames":[],"name":"DivisionRing.toOfScientific","className":"OfScientific"},{"typeNames":[],"name":"Field.toSemifield","className":"Semifield"}],"imports":["Init","Mathlib.Algebra.Ring.Defs","Std.Data.Rat","Mathlib.Data.Rat.Init"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L242-L251","name":"uniq_inv_of_isField","kind":"theorem","docLink":"./Mathlib/Algebra/Field/Defs.html#uniq_inv_of_isField","doc":"For each field, and for each nonzero element of said field, there is a unique inverse.\nSince `IsField` doesn't remember the data of an `inv` function and as such,\na lemma that there is a unique inverse could be useful.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L234-L235","name":"IsField.toField","kind":"def","docLink":"./Mathlib/Algebra/Field/Defs.html#IsField.toField","doc":"Transferring from `IsField` to `Field`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L224-L230","name":"IsField.toSemifield","kind":"def","docLink":"./Mathlib/Algebra/Field/Defs.html#IsField.toSemifield","doc":"Transferring from `IsField` to `Semifield`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L215-L218","name":"not_isField_of_subsingleton","kind":"theorem","docLink":"./Mathlib/Algebra/Field/Defs.html#not_isField_of_subsingleton","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L210-L211","name":"IsField.nontrivial","kind":"theorem","docLink":"./Mathlib/Algebra/Field/Defs.html#IsField.nontrivial","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L205-L206","name":"Field.toIsField","kind":"theorem","docLink":"./Mathlib/Algebra/Field/Defs.html#Field.toIsField","doc":"Transferring from `Field` to `IsField`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L199-L201","name":"Semifield.toIsField","kind":"theorem","docLink":"./Mathlib/Algebra/Field/Defs.html#Semifield.toIsField","doc":"Transferring from `Semifield` to `IsField`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L195-L195","name":"IsField.mul_inv_cancel","kind":"def","docLink":"./Mathlib/Algebra/Field/Defs.html#IsField.mul_inv_cancel","doc":"Nonzero elements have multiplicative inverses. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L193-L193","name":"IsField.mul_comm","kind":"def","docLink":"./Mathlib/Algebra/Field/Defs.html#IsField.mul_comm","doc":"Fields are commutative. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L191-L191","name":"IsField.exists_pair_ne","kind":"def","docLink":"./Mathlib/Algebra/Field/Defs.html#IsField.exists_pair_ne","doc":"For a semiring to be a field, it must have two distinct elements. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L189-L189","name":"IsField.mk","kind":"ctor","docLink":"./Mathlib/Algebra/Field/Defs.html#IsField.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L189-L195","name":"IsField","kind":"structure","docLink":"./Mathlib/Algebra/Field/Defs.html#IsField","doc":"A predicate to express that a (semi)ring is a (semi)field.\n\nThis is mainly useful because such a predicate does not contain data,\nand can therefore be easily transported along ring isomorphisms.\nAdditionally, this is useful when trying to prove that\na particular ring structure extends to a (semi)field. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L175-L176","name":"Field.toSemifield","kind":"instance","docLink":"./Mathlib/Algebra/Field/Defs.html#Field.toSemifield","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L165-L166","name":"DivisionRing.toOfScientific","kind":"instance","docLink":"./Mathlib/Algebra/Field/Defs.html#DivisionRing.toOfScientific","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L155-L156","name":"Rat.smul_one_eq_coe","kind":"theorem","docLink":"./Mathlib/Algebra/Field/Defs.html#Rat.smul_one_eq_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L150-L151","name":"Rat.smul_def","kind":"theorem","docLink":"./Mathlib/Algebra/Field/Defs.html#Rat.smul_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L146-L147","name":"Rat.smulDivisionRing","kind":"instance","docLink":"./Mathlib/Algebra/Field/Defs.html#Rat.smulDivisionRing","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L142-L143","name":"Rat.cast_def","kind":"theorem","docLink":"./Mathlib/Algebra/Field/Defs.html#Rat.cast_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L138-L139","name":"Rat.cast_mk'","kind":"theorem","docLink":"./Mathlib/Algebra/Field/Defs.html#Rat.cast_mk'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L129-L129","name":"Field.mk","kind":"ctor","docLink":"./Mathlib/Algebra/Field/Defs.html#Field.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L129-L129","name":"Field","kind":"class","docLink":"./Mathlib/Algebra/Field/Defs.html#Field","doc":"A `Field` is a `CommRing` with multiplicative inverses for nonzero elements.\n\nAn instance of `Field K` includes maps `ratCast : ℚ → K` and `qsmul : ℚ → K → K`.\nIf the field has positive characteristic p, we define `ratCast (1 / p) = 1 / 0 = 0`\nfor consistency with our division by zero convention.\nThe fields `ratCast` and `qsmul` are needed to implement the\n`algebraRat [DivisionRing K] : Algebra ℚ K` instance, since we need to control the specific\ndefinitions for some special cases of `K` (in particular `K = ℚ` itself).\nSee also Note [forgetful inheritance].\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L116-L116","name":"Semifield.mk","kind":"ctor","docLink":"./Mathlib/Algebra/Field/Defs.html#Semifield.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L116-L116","name":"Semifield","kind":"class","docLink":"./Mathlib/Algebra/Field/Defs.html#Semifield","doc":"A `Semifield` is a `CommSemiring` with multiplicative inverses for nonzero elements. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L111-L112","name":"DivisionRing.toDivisionSemiring","kind":"instance","docLink":"./Mathlib/Algebra/Field/Defs.html#DivisionRing.toDivisionSemiring","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L104-L104","name":"DivisionRing.qsmul_eq_mul'","kind":"def","docLink":"./Mathlib/Algebra/Field/Defs.html#DivisionRing.qsmul_eq_mul'","doc":"However `qsmul` is defined,\npropositionally it must be equal to multiplication by `ratCast`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L101-L101","name":"DivisionRing.qsmul","kind":"def","docLink":"./Mathlib/Algebra/Field/Defs.html#DivisionRing.qsmul","doc":"Multiplication by a rational number. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L97-L97","name":"DivisionRing.ratCast_mk","kind":"def","docLink":"./Mathlib/Algebra/Field/Defs.html#DivisionRing.ratCast_mk","doc":"However `ratCast` is defined, propositionally it must be equal to `a * b⁻¹`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L94-L94","name":"DivisionRing.inv_zero","kind":"def","docLink":"./Mathlib/Algebra/Field/Defs.html#DivisionRing.inv_zero","doc":"We define the inverse of `0` to be `0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L92-L92","name":"DivisionRing.mul_inv_cancel","kind":"def","docLink":"./Mathlib/Algebra/Field/Defs.html#DivisionRing.mul_inv_cancel","doc":"For a nonzero `a`, `a⁻¹` is a right multiplicative inverse. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L90-L90","name":"DivisionRing.mk","kind":"ctor","docLink":"./Mathlib/Algebra/Field/Defs.html#DivisionRing.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L90-L106","name":"DivisionRing","kind":"class","docLink":"./Mathlib/Algebra/Field/Defs.html#DivisionRing","doc":"A `DivisionRing` is a `Ring` with multiplicative inverses for nonzero elements.\n\nAn instance of `DivisionRing K` includes maps `ratCast : ℚ → K` and `qsmul : ℚ → K → K`.\nIf the division ring has positive characteristic p, we define `ratCast (1 / p) = 1 / 0 = 0`\nfor consistency with our division by zero convention.\nThe fields `ratCast` and `qsmul` are needed to implement the\n`algebraRat [DivisionRing K] : Algebra ℚ K` instance, since we need to control the specific\ndefinitions for some special cases of `K` (in particular `K = ℚ` itself).\nSee also Note [forgetful inheritance].\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L77-L77","name":"DivisionSemiring.mk","kind":"ctor","docLink":"./Mathlib/Algebra/Field/Defs.html#DivisionSemiring.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L77-L77","name":"DivisionSemiring","kind":"class","docLink":"./Mathlib/Algebra/Field/Defs.html#DivisionSemiring","doc":"A `DivisionSemiring` is a `Semiring` with multiplicative inverses for nonzero elements. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L72-L73","name":"qsmulRec","kind":"def","docLink":"./Mathlib/Algebra/Field/Defs.html#qsmulRec","doc":"The default definition of the scalar multiplication `(a : ℚ) • (x : K)` for a division ring `K`\nis given by `a • x = (↑ a) * x`.\nUse `(a : ℚ) • (x : K)` instead of `qsmulRec` for better definitional behaviour.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Field/Defs.lean#L64-L65","name":"Rat.castRec","kind":"def","docLink":"./Mathlib/Algebra/Field/Defs.html#Rat.castRec","doc":"The default definition of the coercion `(↑(a : ℚ) : K)` for a division ring `K`\nis defined as `(a / b : K) = (a : K) * (b : K)⁻¹`.\nUse `coe` instead of `Rat.castRec` for better definitional behaviour.\n"}]}