{"name":"Mathlib.CategoryTheory.Category.PartialFun","instances":[{"typeNames":["PartialFun","_builtin_typeu"],"name":"PartialFun.instCoeSortPartialFunType","className":"CoeSort"},{"typeNames":["PartialFun"],"name":"PartialFun.instInhabitedPartialFun","className":"Inhabited"},{"typeNames":["PartialFun"],"name":"PartialFun.largeCategory","className":"CategoryTheory.Category"},{"typeNames":["_builtin_typeu","CategoryTheory.types","PartialFun","PartialFun.largeCategory","typeToPartialFun"],"name":"instFaithfulTypeTypesPartialFunLargeCategoryTypeToPartialFun","className":"CategoryTheory.Faithful"}],"imports":["Init","Mathlib.CategoryTheory.Category.Pointed","Mathlib.Data.PFun"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L197-L209","name":"typeToPartialFunIsoPartialFunToPointed","kind":"def","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#typeToPartialFunIsoPartialFunToPointed","doc":"Forgetting that maps are total and making them total again by adding a point is the same as just\nadding a point. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L196-L196","name":"typeToPartialFunIsoPartialFunToPointed_inv_app_toFun","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#typeToPartialFunIsoPartialFunToPointed_inv_app_toFun","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L196-L196","name":"typeToPartialFunIsoPartialFunToPointed_hom_app_toFun","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#typeToPartialFunIsoPartialFunToPointed_hom_app_toFun","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L137-L191","name":"partialFunEquivPointed","kind":"def","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed","doc":"The equivalence induced by `PartialFunToPointed` and `PointedToPartialFun`.\n`Part.equivOption` made functorial. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L136-L136","name":"partialFunEquivPointed_counitIso_inv_app_toFun","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_counitIso_inv_app_toFun","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L136-L136","name":"partialFunEquivPointed_counitIso_hom_app_toFun","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_counitIso_hom_app_toFun","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L136-L136","name":"partialFunEquivPointed_functor_obj_X","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_functor_obj_X","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L136-L136","name":"partialFunEquivPointed_functor_obj_point","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_functor_obj_point","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L136-L136","name":"partialFunEquivPointed_inverse_map_Dom","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_inverse_map_Dom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L136-L136","name":"partialFunEquivPointed_inverse_obj","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_inverse_obj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L136-L136","name":"partialFunEquivPointed_inverse_map_get_coe","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_inverse_map_get_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L136-L136","name":"partialFunEquivPointed_functor_map_toFun","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_functor_map_toFun","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L136-L136","name":"partialFunEquivPointed_unitIso_inv_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_unitIso_inv_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L136-L136","name":"partialFunEquivPointed_unitIso_hom_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunEquivPointed_unitIso_hom_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L121-L131","name":"partialFunToPointed","kind":"def","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunToPointed","doc":"The functor which maps undefined values to a new point. This makes the maps total and creates\npointed types. This the noncomputable part of the equivalence `PartialFunEquivPointed`. It can't\nbe computable because `= Option.none` is decidable while the domain of a general `part` isn't. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L120-L120","name":"partialFunToPointed_map","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#partialFunToPointed_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L101-L114","name":"pointedToPartialFun","kind":"def","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#pointedToPartialFun","doc":"The functor which deletes the point of a pointed type. In return, this makes the maps partial.\nThis the computable part of the equivalence `PartialFunEquivPointed`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L100-L100","name":"pointedToPartialFun_map","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#pointedToPartialFun_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L95-L96","name":"instFaithfulTypeTypesPartialFunLargeCategoryTypeToPartialFun","kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#instFaithfulTypeTypesPartialFunLargeCategoryTypeToPartialFun","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L89-L92","name":"typeToPartialFun","kind":"def","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#typeToPartialFun","doc":"The forgetful functor from `Type` to `PartialFun` which forgets that the maps are total. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L75-L83","name":"PartialFun.Iso.mk","kind":"def","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.Iso.mk","doc":"Constructs a partial function isomorphism between types from an equivalence between them. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L74-L74","name":"PartialFun.Iso.mk_inv","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.Iso.mk_inv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L74-L74","name":"PartialFun.Iso.mk_hom","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.Iso.mk_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L64-L70","name":"PartialFun.largeCategory","kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.largeCategory","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L61-L62","name":"PartialFun.instInhabitedPartialFun","kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.instInhabitedPartialFun","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L54-L55","name":"PartialFun.of","kind":"def","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.of","doc":"Turns a type into a `PartialFun`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L49-L50","name":"PartialFun.instCoeSortPartialFunType","kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun.instCoeSortPartialFunType","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Category/PartialFun.lean#L42-L43","name":"PartialFun","kind":"def","docLink":"./Mathlib/CategoryTheory/Category/PartialFun.html#PartialFun","doc":"The category of types equipped with partial functions. "}]}