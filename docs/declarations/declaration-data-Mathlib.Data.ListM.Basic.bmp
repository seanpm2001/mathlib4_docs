{"name":"Mathlib.Data.ListM.Basic","instances":[{"typeNames":["_private.Mathlib.Data.ListM.Basic.0.ListMApi"],"name":"instNonemptyListMApi","className":"Nonempty"},{"typeNames":["ListM"],"name":"ListM.instEmptyCollectionListM","className":"EmptyCollection"},{"typeNames":["ListM"],"name":"ListM.instInhabitedListM","className":"Inhabited"},{"typeNames":["ListM"],"name":"ListM.instForInListM","className":"ForIn"},{"typeNames":["ListM"],"name":"ListM.instMonadListM","className":"Monad"},{"typeNames":["ListM"],"name":"ListM.instAlternativeListM","className":"Alternative"},{"typeNames":["ListM"],"name":"ListM.instMonadLiftListM","className":"MonadLift"}],"imports":["Init","Mathlib.Data.Option.Defs","Mathlib.Control.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L442-L443","name":"ListM.instMonadLiftListM","kind":"instance","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.instMonadLiftListM","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L438-L440","name":"ListM.instAlternativeListM","kind":"instance","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.instAlternativeListM","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L433-L436","name":"ListM.instMonadListM","kind":"instance","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.instMonadListM","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L428-L429","name":"ListM.first","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.first","doc":"Return the first value on which a predicate returns true. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L423-L424","name":"ListM.firstM","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.firstM","doc":"Apply a function returning values inside the monad to a monadic lazy list,\nreturning only the first successful result.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L414-L416","name":"ListM.head","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.head","doc":"Return the head of a monadic lazy list, as a value in the monad.\nFails if the list is empty.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L404-L405","name":"ListM.fold","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.fold","doc":"Folds a binary function across a monadic lazy list, from an initial starting value.\nThis will run forever if the list is infinite. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L399-L400","name":"ListM.foldM","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.foldM","doc":"Folds a binary function across a monadic lazy list, from an initial starting value.\nThis will run forever if the list is infinite. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L394-L395","name":"ListM.getLast!","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.getLast!","doc":"Gets the last element of a monadic lazy list, or the default value if the list is empty.\nThis will run forever if the list is infinite. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L387-L390","name":"ListM.getLast?.aux","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.getLast?.aux","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L383-L390","name":"ListM.getLast?","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.getLast?","doc":"Gets the last element of a monadic lazy list, as an option in the monad.\nThis will run forever if the list is infinite. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L378-L379","name":"ListM.takeUpToFirst","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.takeUpToFirst","doc":"Take the initial segment of the lazy list,\nup to and including the first place where `f` gives `true`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L372-L374","name":"ListM.takeUpToFirstM","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.takeUpToFirstM","doc":"Take the initial segment of the lazy list,\nup to and including the first place where `f` gives `true`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L367-L368","name":"ListM.head?","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.head?","doc":"Return the head of a monadic lazy list if it exists, as an `Option` in the monad. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L363-L364","name":"ListM.runState'","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.runState'","doc":"Given a lazy list in a state monad, run it on some initial state. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L357-L360","name":"ListM.runState","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.runState","doc":"Given a lazy list in a state monad, run it on some initial state, recording the states. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L351-L354","name":"ListM.liftM","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.liftM","doc":"Lift the monad of a lazy list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L346-L347","name":"ListM.monadLift","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.monadLift","doc":"Convert any value in the monad to the singleton monadic lazy list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L341-L342","name":"ListM.bind","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.bind","doc":"Apply a function returning a monadic lazy list to each element of a monadic lazy list,\njoining the results. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L334-L337","name":"ListM.zip","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.zip","doc":"Take the product of two monadic lazy lists. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L329-L330","name":"ListM.concat","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.concat","doc":"Add one element to the end of a monadic lazy list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L321-L326","name":"ListM.chunk.go","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.chunk.go","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L318-L326","name":"ListM.chunk","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.chunk","doc":"Group the elements of a lazy list into chunks of a given size.\nIf the lazy list is finite, the last chunk may be smaller (possibly even length 0). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L313-L314","name":"ListM.ofArray","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.ofArray","doc":"Convert an array to a monadic lazy list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L307-L310","name":"ListM.fin","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.fin","doc":"Iterate through the elements of `Fin n`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L302-L303","name":"ListM.range","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.range","doc":"The infinite monadic lazy list of natural numbers."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L297-L298","name":"ListM.enum","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.enum","doc":"Enumerate the elements of a monadic lazy list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L292-L293","name":"ListM.enum_from","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.enum_from","doc":"Enumerate the elements of a monadic lazy list, starting at a specified offset. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L287-L288","name":"ListM.join","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.join","doc":"Join a monadic lazy list of monadic lazy lists into a single monadic lazy list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L282-L283","name":"ListM.append","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.append","doc":"Concatenate two monadic lazy lists. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L278-L279","name":"ListM.takeWhile","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.takeWhile","doc":"Take the initial segment of the lazy list, until the function `f` first returns `false`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L273-L275","name":"ListM.takeWhileM","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.takeWhileM","doc":"Take the initial segment of the lazy list, until the function `f` first returns `false`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L268-L269","name":"ListM.filterMap","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.filterMap","doc":"Filter and transform a `ListM` using an `Option` valued function. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L263-L264","name":"ListM.filterMapM","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.filterMapM","doc":"Filter and transform a `ListM` using a function that returns values inside the monad. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L256-L257","name":"ListM.filter","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.filter","doc":"Filter a `ListM`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L250-L252","name":"ListM.filterM","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.filterM","doc":"Filter a `ListM` using a monadic function. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L245-L246","name":"ListM.map","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.map","doc":"Apply a function to every element of a `ListM`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L240-L241","name":"ListM.mapM","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.mapM","doc":"Apply a function which returns values in the monad to every element of a `ListM`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L235-L237","name":"ListM.drop","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.drop","doc":"Drop the first `n` elements. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L230-L232","name":"ListM.take","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.take","doc":"Take the first `n` elements. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L222-L227","name":"ListM.takeAsArray.go","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.takeAsArray.go","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L219-L227","name":"ListM.takeAsArray","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.takeAsArray","doc":"Take the first `n` elements, as an array inside the monad. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L210-L215","name":"ListM.takeAsList.go","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.takeAsList.go","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L207-L215","name":"ListM.takeAsList","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.takeAsList","doc":"Take the first `n` elements, as a list inside the monad. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L203-L204","name":"ListM.folds","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.folds","doc":"Gives the monadic lazy list consisting all of folds of a function on a given initial element.\nThus `[a₀, a₁, ...].foldsM f b` will give `[b, f b a₀, f (f b a₀) a₁, ...]`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L196-L199","name":"ListM.foldsM","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.foldsM","doc":"Gives the monadic lazy list consisting all of folds of a function on a given initial element.\nThus `[a₀, a₁, ...].foldsM f b` will give `[b, ← f b a₀, ← f (← f b a₀) a₁, ...]`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L189-L192","name":"ListM.cases'","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.cases'","doc":"Performs a case distinction on a `ListM` when the motive is a `ListM` as well.\n(We need to be in a monadic context to distinguish a nil from a cons.)\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L178-L182","name":"ListM.asArray","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.asArray","doc":"Extract an array inside the monad from a `ListM`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L171-L174","name":"ListM.force","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.force","doc":"Extract a list inside the monad from a `ListM`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L165-L167","name":"ListM.ofListM","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.ofListM","doc":"Convert a `List` of values inside the monad into a `ListM`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L162-L162","name":"ListM.empty","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.empty","doc":"The empty `ListM`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L156-L158","name":"ListM.ofList","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.ofList","doc":"Convert a `List` to a `ListM`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L151-L152","name":"ListM.isEmpty","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.isEmpty","doc":"Compute, inside the monad, whether a `ListM` is empty. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L146-L147","name":"ListM.fixl","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.fixl","doc":"Repeatedly apply a function `f : α → m (α × List β)` to an initial `a : α`,\naccumulating the elements of the resulting `List β` as a single monadic lazy list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L135-L141","name":"ListM.fixl_with","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.fixl_with","doc":"Repeatedly apply a function `f : α → m (α × List β)` to an initial `a : α`,\naccumulating the elements of the resulting `List β` as a single monadic lazy list.\n\n(This variant allows starting with a specified `List β` of elements, as well. )"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L128-L129","name":"ListM.iterate","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.iterate","doc":"Construct a `ListM` by iteration. (`m` must be a stateful monad for this to be useful.) "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L119-L123","name":"ListM.fix?","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.fix?","doc":"Construct a `ListM` recursively. If `f` returns `none` the list will terminate. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L114-L115","name":"ListM.fix","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.fix","doc":"Construct a `ListM` recursively. Failures from `f` will result in `uncons` failing.  "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L110-L111","name":"ListM.instForInListM","kind":"instance","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.instForInListM","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L102-L108","name":"ListM.forIn","kind":"opaque","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.forIn","doc":"The implementation of `ForIn`, which enables `for a in L do ...` notation. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L96-L96","name":"ListM.instInhabitedListM","kind":"instance","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.instInhabitedListM","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L95-L95","name":"ListM.instEmptyCollectionListM","kind":"instance","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.instEmptyCollectionListM","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L92-L92","name":"ListM.uncons","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.uncons","doc":"Deconstruct a `ListM`, returning inside the monad an optional pair `α × ListM m α`\nrepresenting the head and tail of the list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L84-L87","name":"ListM.cons","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.cons","doc":"Constructs a `ListM` by providing a monadic value computing both the head and tail of the list.\nThe head is an `Option`, when `none` it is skipped and the list is only the tail.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L76-L76","name":"ListM.squash","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.squash","doc":"Lift a monadic lazy list inside the monad to a monadic lazy list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L73-L73","name":"ListM.cons'","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.cons'","doc":"Constructs a `ListM` from head and tail.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L68-L68","name":"ListM.nil","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM.nil","doc":"The empty `ListM`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L60-L60","name":"ListM","kind":"def","docLink":"./Mathlib/Data/ListM/Basic.html#ListM","doc":"A monadic lazy list, controlled by an arbitrary monad. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/ListM/Basic.lean#L29-L35","name":"instNonemptyListMApi","kind":"instance","docLink":"./Mathlib/Data/ListM/Basic.html#instNonemptyListMApi","doc":""}]}