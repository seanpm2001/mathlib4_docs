{"name":"Mathlib.Data.Fintype.Option","instances":[{"typeNames":["Option"],"name":"instFintypeOption","className":"Fintype"}],"imports":["Init","Mathlib.Data.Fintype.Card","Mathlib.Data.Finset.Option"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Fintype/Option.lean#L115-L120","name":"Finite.induction_empty_option","kind":"theorem","docLink":"./Mathlib/Data/Fintype/Option.html#Finite.induction_empty_option","doc":"An induction principle for finite types, analogous to `Nat.rec`. It effectively says\nthat every `Fintype` is either `Empty` or `Option α`, up to an `Equiv`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Fintype/Option.lean#L95-L107","name":"Fintype.induction_empty_option","kind":"theorem","docLink":"./Mathlib/Data/Fintype/Option.html#Fintype.induction_empty_option","doc":"An induction principle for finite types, analogous to `Nat.rec`. It effectively says\nthat every `Fintype` is either `Empty` or `Option α`, up to an `Equiv`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Fintype/Option.lean#L71-L86","name":"Fintype.truncRecEmptyOption.ind","kind":"def","docLink":"./Mathlib/Data/Fintype/Option.html#Fintype.truncRecEmptyOption.ind","doc":"Internal induction hypothesis "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Fintype/Option.lean#L58-L86","name":"Fintype.truncRecEmptyOption","kind":"def","docLink":"./Mathlib/Data/Fintype/Option.html#Fintype.truncRecEmptyOption","doc":"A recursor principle for finite types, analogous to `Nat.rec`. It effectively says\nthat every `Fintype` is either `Empty` or `Option α`, up to an `Equiv`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Fintype/Option.lean#L49-L51","name":"fintypeOfOptionEquiv","kind":"def","docLink":"./Mathlib/Data/Fintype/Option.html#fintypeOfOptionEquiv","doc":"A type is a `Fintype` if its successor (using `Option`) is a `Fintype`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Fintype/Option.lean#L43-L45","name":"fintypeOfOption","kind":"def","docLink":"./Mathlib/Data/Fintype/Option.html#fintypeOfOption","doc":"If `Option α` is a `Fintype` then so is `α` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Fintype/Option.lean#L37-L39","name":"Fintype.card_option","kind":"theorem","docLink":"./Mathlib/Data/Fintype/Option.html#Fintype.card_option","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Fintype/Option.lean#L32-L33","name":"univ_option","kind":"theorem","docLink":"./Mathlib/Data/Fintype/Option.html#univ_option","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Fintype/Option.lean#L29-L30","name":"instFintypeOption","kind":"instance","docLink":"./Mathlib/Data/Fintype/Option.html#instFintypeOption","doc":""}]}