{"name":"Std.Classes.LawfulMonad","instances":[{"typeNames":["Except","Except.instMonadExcept"],"name":"instLawfulMonadExceptInstMonadExcept","className":"LawfulMonad"},{"typeNames":["Except","Monad.toApplicative","Except","Except.instMonadExcept"],"name":"instLawfulApplicativeExceptToApplicativeInstMonadExcept","className":"LawfulApplicative"},{"typeNames":["Except","Applicative.toFunctor","Except","Monad.toApplicative","Except.instMonadExcept"],"name":"instLawfulFunctorExceptToFunctorToApplicativeInstMonadExcept","className":"LawfulFunctor"},{"typeNames":["Option","instMonadOption"],"name":"instLawfulMonadOptionInstMonadOption","className":"LawfulMonad"},{"typeNames":["Option","Alternative.toApplicative","Option","instAlternativeOption"],"name":"instLawfulApplicativeOptionToApplicativeInstAlternativeOption","className":"LawfulApplicative"},{"typeNames":["Option","instFunctorOption"],"name":"instLawfulFunctorOptionInstFunctorOption","className":"LawfulFunctor"}],"imports":["Init","Std.Logic"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L210-L216","name":"SatisfiesM_ExceptT_eq","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM_ExceptT_eq","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L202-L208","name":"SatisfiesM_StateT_eq","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM_StateT_eq","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L199-L200","name":"SatisfiesM_StateRefT_eq","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM_StateRefT_eq","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L195-L197","name":"SatisfiesM_ReaderT_eq","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM_ReaderT_eq","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L191-L193","name":"SatisfiesM_Except_eq","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM_Except_eq","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L187-L189","name":"SatisfiesM_Option_eq","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM_Option_eq","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L184-L185","name":"SatisfiesM_Id_eq","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM_Id_eq","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L178-L180","name":"SatisfiesM.bind_pre","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM.bind_pre","doc":"`SatisfiesM` distributes over `>>=`, weakest precondition version. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L169-L175","name":"SatisfiesM.bind","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM.bind","doc":"`SatisfiesM` distributes over `>>=`, general version. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L163-L166","name":"SatisfiesM.seqRight","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM.seqRight","doc":"`SatisfiesM` distributes over `*>`, general version. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L157-L160","name":"SatisfiesM.seqLeft","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM.seqLeft","doc":"`SatisfiesM` distributes over `<*`, general version. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L151-L154","name":"SatisfiesM.seq_pre'","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM.seq_pre'","doc":"`SatisfiesM` distributes over `<*>`, weakest precondition version 2.\n(Use this when `f` and the goal are known and `x` is a subgoal.)\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L142-L145","name":"SatisfiesM.seq_pre","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM.seq_pre","doc":"`SatisfiesM` distributes over `<*>`, weakest precondition version 1.\n(Use this when `x` and the goal are known and `f` is a subgoal.)\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L133-L136","name":"SatisfiesM.seq_post","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM.seq_post","doc":"`SatisfiesM` distributes over `<*>`, strongest postcondition version. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L124-L130","name":"SatisfiesM.seq","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM.seq","doc":"`SatisfiesM` distributes over `<*>`, general version. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L120-L121","name":"SatisfiesM.pure","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM.pure","doc":"`SatisfiesM` distributes over `pure`, general version / weakest precondition version. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L115-L117","name":"SatisfiesM.mapConst","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM.mapConst","doc":"`SatisfiesM` distributes over `mapConst`, general version. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L110-L112","name":"SatisfiesM.map_pre","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM.map_pre","doc":"`SatisfiesM` distributes over `<$>`, weakest precondition version.\n(Use this for reasoning backward from the goal.)\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L102-L104","name":"SatisfiesM.map_post","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM.map_post","doc":"`SatisfiesM` distributes over `<$>`, strongest postcondition version.\n(Use this for reasoning forward from assumptions.)\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L92-L96","name":"SatisfiesM.map","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM.map","doc":"`SatisfiesM` distributes over `<$>`, general version. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L87-L89","name":"SatisfiesM.imp","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM.imp","doc":"The `SatisfiesM p x` predicate is monotonic in `p`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L83-L84","name":"SatisfiesM.trivial","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM.trivial","doc":"If `p` is always true, then every `x` satisfies it.\n(This is the strongest postcondition version of `of_true`.)\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L75-L77","name":"SatisfiesM.of_true","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM.of_true","doc":"If `p` is always true, then every `x` satisfies it. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L69-L70","name":"SatisfiesM","kind":"def","docLink":"./Std/Classes/LawfulMonad.html#SatisfiesM","doc":"`SatisfiesM p (x : m Î±)` lifts propositions over a monad. It asserts that `x` may as well\nhave the type `x : m {a // p a}`, because there exists some `m {a // p a}` whose image is `x`.\nSo `p` is the postcondition of the monadic value.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L53-L53","name":"instLawfulFunctorOptionInstFunctorOption","kind":"instance","docLink":"./Std/Classes/LawfulMonad.html#instLawfulFunctorOptionInstFunctorOption","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L52-L52","name":"instLawfulApplicativeOptionToApplicativeInstAlternativeOption","kind":"instance","docLink":"./Std/Classes/LawfulMonad.html#instLawfulApplicativeOptionToApplicativeInstAlternativeOption","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L46-L50","name":"instLawfulMonadOptionInstMonadOption","kind":"instance","docLink":"./Std/Classes/LawfulMonad.html#instLawfulMonadOptionInstMonadOption","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L44-L44","name":"instLawfulFunctorExceptToFunctorToApplicativeInstMonadExcept","kind":"instance","docLink":"./Std/Classes/LawfulMonad.html#instLawfulFunctorExceptToFunctorToApplicativeInstMonadExcept","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L43-L43","name":"instLawfulApplicativeExceptToApplicativeInstMonadExcept","kind":"instance","docLink":"./Std/Classes/LawfulMonad.html#instLawfulApplicativeExceptToApplicativeInstMonadExcept","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L38-L41","name":"instLawfulMonadExceptInstMonadExcept","kind":"instance","docLink":"./Std/Classes/LawfulMonad.html#instLawfulMonadExceptInstMonadExcept","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/LawfulMonad.lean#L12-L36","name":"LawfulMonad.mk'","kind":"theorem","docLink":"./Std/Classes/LawfulMonad.html#LawfulMonad.mk'","doc":"An alternative constructor for `LawfulMonad` which has more\ndefaultable fields in the common case.\n"}]}