{"name":"Mathlib.Tactic.PermuteGoals","instances":[],"imports":["Init","Lean","Std.Data.List.Basic","Mathlib.Init.Data.Nat.Notation"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PermuteGoals.lean#L47-L61","name":"Mathlib.Tactic.«tacticOn_goal-_=>_»","kind":"def","docLink":"./Mathlib/Tactic/PermuteGoals.html#Mathlib.Tactic.«tacticOn_goal-_=>_»","doc":"`on_goal n => tacSeq` creates a block scope for the `n`-th goal and tries the sequence\nof tactics `tacSeq` on it.\n\n`on_goal -n => tacSeq` does the same, but the `n`-th goal is chosen by counting from the\nbottom.\n\nThe goal is not required to be solved and any resulting subgoals are inserted back into the\nlist of goals, replacing the chosen goal.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PermuteGoals.lean#L45-L45","name":"Mathlib.Tactic.tacticSwap","kind":"def","docLink":"./Mathlib/Tactic/PermuteGoals.html#Mathlib.Tactic.tacticSwap","doc":"`swap` is a shortcut for `pick_goal 2`, which interchanges the 1st and 2nd goals. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PermuteGoals.lean#L33-L42","name":"Mathlib.Tactic.«tacticPick_goal-_»","kind":"def","docLink":"./Mathlib/Tactic/PermuteGoals.html#Mathlib.Tactic.«tacticPick_goal-_»","doc":"`pick_goal n` will move the `n`-th goal to the front.\n\n`pick_goal -n` will move the `n`-th goal (counting from the bottom) to the front.\n\nSee also `Tactic.rotate_goals`, which moves goals from the front to the back and vice-versa.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PermuteGoals.lean#L23-L31","name":"Mathlib.Tactic.splitGoalsAndGetNth","kind":"def","docLink":"./Mathlib/Tactic/PermuteGoals.html#Mathlib.Tactic.splitGoalsAndGetNth","doc":"If the current goals are `g₁ ⋯ gᵢ ⋯ gₙ`, `splitGoalsAndGetNth i` returns\n`(gᵢ, [g₁, ⋯, gᵢ₋₁], [gᵢ₊₁, ⋯, gₙ])`.\n\nIf `reverse` is passed as `true`, the `i`-th goal is picked by counting backwards.\nFor instance, `splitGoalsAndGetNth 1 true` puts the last goal in the first component\nof the returned term.\n"}]}