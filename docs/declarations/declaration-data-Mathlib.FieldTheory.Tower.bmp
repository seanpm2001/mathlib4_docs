{"name":"Mathlib.FieldTheory.Tower","instances":[{"typeNames":["LinearMap","DivisionSemiring.toSemiring","Semifield.toDivisionSemiring","Field.toSemifield","RingHom.id","Semiring.toNonAssocSemiring","AddCommGroup.toAddCommMonoid","NonUnitalNonAssocSemiring.toAddCommMonoid","NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring","NonAssocRing.toNonUnitalNonAssocRing","Ring.toNonAssocRing","DivisionRing.toRing","Field.toDivisionRing","Algebra.toModule","Semifield.toCommSemiring","DivisionSemiring.toSemiring","Semifield.toDivisionSemiring","Field.toSemifield","Field.toDivisionRing","LinearMap.addCommGroup","DivisionSemiring.toSemiring","Semifield.toDivisionSemiring","Field.toSemifield","AddCommGroup.toAddCommMonoid","Ring.toAddCommGroup","DivisionRing.toRing","Field.toDivisionRing","Algebra.toModule","Semifield.toCommSemiring","DivisionSemiring.toSemiring","Semifield.toDivisionSemiring","Field.toSemifield","RingHom.id","Semiring.toNonAssocSemiring","LinearMap.module","DivisionSemiring.toSemiring","Semifield.toDivisionSemiring","Field.toSemifield","AddCommGroup.toAddCommMonoid","NonUnitalNonAssocSemiring.toAddCommMonoid","NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring","NonAssocRing.toNonUnitalNonAssocRing","Ring.toNonAssocRing","DivisionRing.toRing","Field.toDivisionRing","Algebra.toModule","Semifield.toCommSemiring","DivisionSemiring.toSemiring","Semifield.toDivisionSemiring","Field.toSemifield","RingHom.id","Semiring.toNonAssocSemiring","DivisionRing.toDivisionSemiring","Semiring.toModule","Algebra.to_smulCommClass"],"name":"LinearMap.finite_dimensional''","className":"Module.Finite"}],"imports":["Init","Mathlib.Data.Nat.Prime","Mathlib.RingTheory.AlgebraTower","Mathlib.LinearAlgebra.FiniteDimensional","Mathlib.LinearAlgebra.FreeModule.Finite.Matrix"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/FieldTheory/Tower.lean#L160-L167","name":"FiniteDimensional.finrank_linear_map'","kind":"theorem","docLink":"./Mathlib/FieldTheory/Tower.html#FiniteDimensional.finrank_linear_map'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/FieldTheory/Tower.lean#L154-L157","name":"LinearMap.finite_dimensional''","kind":"instance","docLink":"./Mathlib/FieldTheory/Tower.html#LinearMap.finite_dimensional''","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/FieldTheory/Tower.lean#L136-L147","name":"FiniteDimensional.Subalgebra.isSimpleOrder_of_finrank_prime","kind":"theorem","docLink":"./Mathlib/FieldTheory/Tower.html#FiniteDimensional.Subalgebra.isSimpleOrder_of_finrank_prime","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/FieldTheory/Tower.lean#L128-L133","name":"FiniteDimensional.finrank_mul_finrank","kind":"theorem","docLink":"./Mathlib/FieldTheory/Tower.html#FiniteDimensional.finrank_mul_finrank","doc":"Tower law: if `A` is a `K`-vector space and `K` is a field extension of `F` then\n`dim_F(A) = dim_F(K) * dim_K(A)`.\n\nThis is `FiniteDimensional.finrank_mul_finrank'` with one fewer finiteness assumption. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/FieldTheory/Tower.lean#L117-L121","name":"FiniteDimensional.right","kind":"theorem","docLink":"./Mathlib/FieldTheory/Tower.html#FiniteDimensional.right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/FieldTheory/Tower.lean#L112-L114","name":"FiniteDimensional.left","kind":"theorem","docLink":"./Mathlib/FieldTheory/Tower.html#FiniteDimensional.left","doc":"In a tower of field extensions `L / K / F`, if `L / F` is finite, so is `K / F`.\n\n(In fact, it suffices that `L` is a nontrivial ring.)\n\nNote this cannot be an instance as Lean cannot infer `L`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/FieldTheory/Tower.lean#L102-L103","name":"FiniteDimensional.trans","kind":"theorem","docLink":"./Mathlib/FieldTheory/Tower.html#FiniteDimensional.trans","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/FieldTheory/Tower.lean#L81-L87","name":"FiniteDimensional.finrank_mul_finrank'","kind":"theorem","docLink":"./Mathlib/FieldTheory/Tower.html#FiniteDimensional.finrank_mul_finrank'","doc":"Tower law: if `A` is a `K`-module and `K` is an extension of `F` then\n$\\operatorname{rank}_F(A) = \\operatorname{rank}_F(K) * \\operatorname{rank}_K(A)$. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/FieldTheory/Tower.lean#L72-L76","name":"rank_mul_rank","kind":"theorem","docLink":"./Mathlib/FieldTheory/Tower.html#rank_mul_rank","doc":"Tower law: if `A` is a `K`-module and `K` is an extension of `F` then\n$\\operatorname{rank}_F(A) = \\operatorname{rank}_F(K) * \\operatorname{rank}_K(A)$.\n\nThis is a simpler version of `lift_rank_mul_lift_rank` with `K` and `A` in the same universe. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/FieldTheory/Tower.lean#L56-L65","name":"lift_rank_mul_lift_rank","kind":"theorem","docLink":"./Mathlib/FieldTheory/Tower.html#lift_rank_mul_lift_rank","doc":"Tower law: if `A` is a `K`-module and `K` is an extension of `F` then\n$\\operatorname{rank}_F(A) = \\operatorname{rank}_F(K) * \\operatorname{rank}_K(A)$. "}]}