{"name":"Std.Tactic.Unreachable","instances":[],"imports":["Init","Lean.Elab.ElabRules"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Unreachable.lean#L28-L29","name":"Std.Tactic.unreachableConv","kind":"def","docLink":"./Std/Tactic/Unreachable.html#Std.Tactic.unreachableConv","doc":"This tactic causes a panic when run (at compile time).\n(This is distinct from `exact unreachable!`, which inserts code which will panic at run time.)\n\nIt is intended for tests to assert that a tactic will never be executed, which is otherwise an\nunusual thing to do (and the `unreachableTactic` linter will give a warning if you do).\n\nThe `unreachableTactic` linter has a special exception for uses of `unreachable!`.\n```\nexample : True := by trivial <;> unreachable!\n```\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Unreachable.lean#L10-L26","name":"Std.Tactic.unreachable","kind":"def","docLink":"./Std/Tactic/Unreachable.html#Std.Tactic.unreachable","doc":"This tactic causes a panic when run (at compile time).\n(This is distinct from `exact unreachable!`, which inserts code which will panic at run time.)\n\nIt is intended for tests to assert that a tactic will never be executed, which is otherwise an\nunusual thing to do (and the `unreachableTactic` linter will give a warning if you do).\n\nThe `unreachableTactic` linter has a special exception for uses of `unreachable!`.\n```\nexample : True := by trivial <;> unreachable!\n```\n"}]}