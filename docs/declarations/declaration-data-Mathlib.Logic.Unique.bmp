{"name":"Mathlib.Logic.Unique","instances":[{"typeNames":["PUnit"],"name":"PUnit.unique","className":"Unique"},{"typeNames":["True"],"name":"instUniqueTrue","className":"Unique"},{"typeNames":["Fin","Nat.succ"],"name":"instInhabitedFinSucc","className":"Inhabited"},{"typeNames":["Fin","HAdd.hAdd","Nat","instHAdd","instAddNat","OfNat.ofNat","instOfNatNat"],"name":"inhabitedFinOneAdd","className":"Inhabited"},{"typeNames":["Fin","OfNat.ofNat","Nat","instOfNatNat"],"name":"Fin.unique","className":"Unique"},{"typeNames":[],"name":"Unique.instInhabited","className":"Inhabited"},{"typeNames":[],"name":"Unique.instSubsingleton","className":"Subsingleton"},{"typeNames":["Unique"],"name":"Unique.subsingleton_unique","className":"Subsingleton"},{"typeNames":[],"name":"Pi.unique","className":"Unique"},{"typeNames":[],"name":"Pi.uniqueOfIsEmpty","className":"Unique"},{"typeNames":["Option"],"name":"Option.instUniqueOption","className":"Unique"},{"typeNames":["Subtype","Eq"],"name":"Unique.subtypeEq","className":"Unique"},{"typeNames":["Subtype","Eq"],"name":"Unique.subtypeEq'","className":"Unique"}],"imports":["Init","Mathlib.Logic.IsEmpty","Mathlib.Init.Logic","Mathlib.Init.Data.Fin.Basic","Mathlib.Tactic.Common"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L283-L285","name":"Unique.subtypeEq'","kind":"instance","docLink":"./Mathlib/Logic/Unique.html#Unique.subtypeEq'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L279-L281","name":"Unique.subtypeEq","kind":"instance","docLink":"./Mathlib/Logic/Unique.html#Unique.subtypeEq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L271-L272","name":"Option.instUniqueOption","kind":"instance","docLink":"./Mathlib/Logic/Unique.html#Option.instUniqueOption","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L265-L268","name":"Option.subsingleton_iff_isEmpty","kind":"theorem","docLink":"./Mathlib/Logic/Unique.html#Option.subsingleton_iff_isEmpty","doc":"`Option α` is a `Subsingleton` if and only if `α` is empty. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L257-L259","name":"Unique.bijective","kind":"theorem","docLink":"./Mathlib/Logic/Unique.html#Unique.bijective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L248-L250","name":"Function.Surjective.uniqueOfSurjectiveConst","kind":"def","docLink":"./Mathlib/Logic/Unique.html#Function.Surjective.uniqueOfSurjectiveConst","doc":"If a constant function is surjective, then the codomain is a singleton. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L243-L244","name":"Function.Injective.unique","kind":"def","docLink":"./Mathlib/Logic/Unique.html#Function.Injective.unique","doc":"If `α` is inhabited and admits an injective map to a subsingleton type, then `α` is `Unique`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L238-L239","name":"Function.Surjective.unique","kind":"def","docLink":"./Mathlib/Logic/Unique.html#Function.Surjective.unique","doc":"If the domain of a surjective function is a singleton,\nthen the codomain is a singleton as well. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L232-L233","name":"Function.Surjective.subsingleton","kind":"theorem","docLink":"./Mathlib/Logic/Unique.html#Function.Surjective.subsingleton","doc":"If the domain of a surjective function is a subsingleton, then the codomain is a subsingleton as\nwell. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L226-L227","name":"Function.Injective.subsingleton","kind":"theorem","docLink":"./Mathlib/Logic/Unique.html#Function.Injective.subsingleton","doc":"If the codomain of an injective function is a subsingleton, then the domain\nis a subsingleton as well. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L215-L217","name":"heq_const_of_unique","kind":"theorem","docLink":"./Mathlib/Logic/Unique.html#heq_const_of_unique","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L209-L212","name":"eq_const_of_unique","kind":"theorem","docLink":"./Mathlib/Logic/Unique.html#eq_const_of_unique","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L205-L207","name":"Pi.uniqueOfIsEmpty","kind":"instance","docLink":"./Mathlib/Logic/Unique.html#Pi.uniqueOfIsEmpty","doc":"There is a unique function on an empty domain. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L201-L202","name":"Pi.unique","kind":"instance","docLink":"./Mathlib/Logic/Unique.html#Pi.unique","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L196-L198","name":"Pi.default_apply","kind":"theorem","docLink":"./Mathlib/Logic/Unique.html#Pi.default_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L191-L193","name":"Pi.default_def","kind":"theorem","docLink":"./Mathlib/Logic/Unique.html#Pi.default_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L184-L187","name":"unique_iff_subsingleton_and_nonempty","kind":"theorem","docLink":"./Mathlib/Logic/Unique.html#unique_iff_subsingleton_and_nonempty","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L178-L179","name":"Unique.mk'","kind":"def","docLink":"./Mathlib/Logic/Unique.html#Unique.mk'","doc":"Construct `Unique` from `Inhabited` and `Subsingleton`. Making this an instance would create\na loop in the class inheritance graph. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L172-L173","name":"Unique.subsingleton_unique","kind":"instance","docLink":"./Mathlib/Logic/Unique.html#Unique.subsingleton_unique","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L168-L169","name":"Unique.subsingleton_unique'","kind":"theorem","docLink":"./Mathlib/Logic/Unique.html#Unique.subsingleton_unique'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L161-L162","name":"Unique.exists_iff","kind":"theorem","docLink":"./Mathlib/Logic/Unique.html#Unique.exists_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L157-L158","name":"Unique.forall_iff","kind":"theorem","docLink":"./Mathlib/Logic/Unique.html#Unique.forall_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L154-L155","name":"Unique.instSubsingleton","kind":"instance","docLink":"./Mathlib/Logic/Unique.html#Unique.instSubsingleton","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L149-L150","name":"Unique.default_eq","kind":"theorem","docLink":"./Mathlib/Logic/Unique.html#Unique.default_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L145-L146","name":"Unique.eq_default","kind":"theorem","docLink":"./Mathlib/Logic/Unique.html#Unique.eq_default","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L142-L143","name":"Unique.instInhabited","kind":"instance","docLink":"./Mathlib/Logic/Unique.html#Unique.instInhabited","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L130-L131","name":"Fin.unique","kind":"instance","docLink":"./Mathlib/Logic/Unique.html#Fin.unique","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L126-L127","name":"Fin.default_eq_zero","kind":"theorem","docLink":"./Mathlib/Logic/Unique.html#Fin.default_eq_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L122-L123","name":"inhabitedFinOneAdd","kind":"instance","docLink":"./Mathlib/Logic/Unique.html#inhabitedFinOneAdd","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L119-L120","name":"instInhabitedFinSucc","kind":"instance","docLink":"./Mathlib/Logic/Unique.html#instInhabitedFinSucc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L115-L116","name":"Fin.eq_zero","kind":"theorem","docLink":"./Mathlib/Logic/Unique.html#Fin.eq_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L112-L113","name":"instUniqueTrue","kind":"instance","docLink":"./Mathlib/Logic/Unique.html#instUniqueTrue","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L107-L109","name":"uniqueProp","kind":"def","docLink":"./Mathlib/Logic/Unique.html#uniqueProp","doc":"Every provable proposition is unique, as all proofs are equal. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L102-L103","name":"PUnit.default_eq_unit","kind":"theorem","docLink":"./Mathlib/Logic/Unique.html#PUnit.default_eq_unit","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L93-L95","name":"PUnit.unique","kind":"instance","docLink":"./Mathlib/Logic/Unique.html#PUnit.unique","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L88-L90","name":"uniqueOfSubsingleton","kind":"def","docLink":"./Mathlib/Logic/Unique.html#uniqueOfSubsingleton","doc":"Given an explicit `a : α` with `Subsingleton α`, we can construct\na `Unique α` instance. This is a def because the typeclass search cannot\narbitrarily invent the `a : α` term. Nevertheless, these instances are all\nequivalent by `Unique.Subsingleton.unique`.\n\nSee note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L73-L78","name":"unique_subtype_iff_exists_unique","kind":"theorem","docLink":"./Mathlib/Logic/Unique.html#unique_subtype_iff_exists_unique","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L68-L70","name":"unique_iff_exists_unique","kind":"theorem","docLink":"./Mathlib/Logic/Unique.html#unique_iff_exists_unique","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L59-L59","name":"Unique.uniq","kind":"def","docLink":"./Mathlib/Logic/Unique.html#Unique.uniq","doc":"In a `Unique` type, every term is equal to the default element (from `Inhabited`). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L57-L57","name":"Unique.mk","kind":"ctor","docLink":"./Mathlib/Logic/Unique.html#Unique.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L57-L59","name":"Unique","kind":"class","docLink":"./Mathlib/Logic/Unique.html#Unique","doc":"`Unique α` expresses that `α` is a type with a unique term `default`.\n\nThis is implemented as a type, rather than a `Prop`-valued predicate,\nfor good definitional properties of the default term. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L56-L56","name":"Unique.ext_iff","kind":"theorem","docLink":"./Mathlib/Logic/Unique.html#Unique.ext_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Unique.lean#L56-L56","name":"Unique.ext","kind":"theorem","docLink":"./Mathlib/Logic/Unique.html#Unique.ext","doc":""}]}