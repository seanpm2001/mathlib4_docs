{"name":"Init.Data.String.Extra","instances":[],"imports":["Init.Control.Except","Init.Data.ByteArray","Init.SimpLemmas","Init.Data.Nat.Linear","Init.Util","Init.WFTactics"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/a44dd71ad62a1760e32b0e8a12449e560ddcf492/src/Init/Data/String/Extra.lean#L56-L62","name":"String.Iterator.foldUntil","kind":"def","docLink":"./Init/Data/String/Extra.html#String.Iterator.foldUntil","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/a44dd71ad62a1760e32b0e8a12449e560ddcf492/src/Init/Data/String/Extra.lean#L51-L54","name":"String.Iterator.find","kind":"def","docLink":"./Init/Data/String/Extra.html#String.Iterator.find","doc":"Advance the given iterator until the predicate returns true or the end of the string is reached. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/a44dd71ad62a1760e32b0e8a12449e560ddcf492/src/Init/Data/String/Extra.lean#L42-L44","name":"String.Iterator.sizeOf_next_lt_of_atEnd","kind":"theorem","docLink":"./Init/Data/String/Extra.html#String.Iterator.sizeOf_next_lt_of_atEnd","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/a44dd71ad62a1760e32b0e8a12449e560ddcf492/src/Init/Data/String/Extra.lean#L36-L38","name":"String.Iterator.sizeOf_next_lt_of_hasNext","kind":"theorem","docLink":"./Init/Data/String/Extra.html#String.Iterator.sizeOf_next_lt_of_hasNext","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/a44dd71ad62a1760e32b0e8a12449e560ddcf492/src/Init/Data/String/Extra.lean#L34-L34","name":"String.toUTF8","kind":"opaque","docLink":"./Init/Data/String/Extra.html#String.toUTF8","doc":"Convert the given `String` to a [UTF-8](https://en.wikipedia.org/wiki/UTF-8) encoded byte array. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/a44dd71ad62a1760e32b0e8a12449e560ddcf492/src/Init/Data/String/Extra.lean#L30-L30","name":"String.fromUTF8Unchecked","kind":"opaque","docLink":"./Init/Data/String/Extra.html#String.fromUTF8Unchecked","doc":"Convert a [UTF-8](https://en.wikipedia.org/wiki/UTF-8) encoded `ByteArray` string to `String`.\nThe result is unspecified if `a` is not properly UTF-8 encoded.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/a44dd71ad62a1760e32b0e8a12449e560ddcf492/src/Init/Data/String/Extra.lean#L19-L23","name":"String.toNat!","kind":"def","docLink":"./Init/Data/String/Extra.html#String.toNat!","doc":"Interpret the string as the decimal representation of a natural number.\n\nPanics if the string is not a string of digits. "}]}