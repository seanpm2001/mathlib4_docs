{"name":"Mathlib.Combinatorics.Young.SemistandardTableau","instances":[{"typeNames":["Ssyt","Nat","Nat"],"name":"Ssyt.funLike","className":"FunLike"},{"typeNames":["Ssyt","Ssyt","Nat"],"name":"Ssyt.instCoeFunSsytForAllNat","className":"CoeFun"},{"typeNames":["Ssyt"],"name":"Ssyt.instInhabitedSsyt","className":"Inhabited"}],"imports":["Init","Mathlib.Combinatorics.Young.YoungDiagram"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L160-L161","name":"Ssyt.instInhabitedSsyt","kind":"instance","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.instInhabitedSsyt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L155-L157","name":"Ssyt.highestWeight_apply","kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.highestWeight_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L143-L151","name":"Ssyt.highestWeight","kind":"def","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.highestWeight","doc":"The \"highest weight\" SSYT of a given shape has all i's in row i, for each i. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L135-L139","name":"Ssyt.col_weak","kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.col_weak","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L128-L132","name":"Ssyt.row_weak_of_le","kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.row_weak_of_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L124-L125","name":"Ssyt.zeros","kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.zeros","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L119-L121","name":"Ssyt.col_strict","kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.col_strict","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L114-L116","name":"Ssyt.row_weak","kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.row_weak","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L109-L111","name":"Ssyt.copy_eq","kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.copy_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L104-L106","name":"Ssyt.coe_copy","kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.coe_copy","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L95-L100","name":"Ssyt.copy","kind":"def","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.copy","doc":"Copy of an `Ssyt μ` with a new `entry` equal to the old one. Useful to fix definitional\nequalities. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L87-L90","name":"Ssyt.ext","kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.ext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L82-L83","name":"Ssyt.to_fun_eq_coe","kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.to_fun_eq_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L78-L79","name":"Ssyt.instCoeFunSsytForAllNat","kind":"instance","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.instCoeFunSsytForAllNat","doc":"Helper instance for when there's too many metavariables to apply `CoeFun.coe` directly. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L69-L74","name":"Ssyt.funLike","kind":"instance","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.funLike","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L64-L64","name":"Ssyt.zeros'","kind":"def","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.zeros'","doc":"`entry` is required to be zero for all pairs `(i, j) ∉ μ`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L62-L62","name":"Ssyt.col_strict'","kind":"def","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.col_strict'","doc":"The entries in each column are strictly increasing (top to bottom). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L60-L60","name":"Ssyt.row_weak'","kind":"def","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.row_weak'","doc":"The entries in each row are weakly increasing (left to right). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L58-L58","name":"Ssyt.entry","kind":"def","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.entry","doc":"`entry i j` is value of the `(i, j)` entry of the SSYT `μ`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L56-L56","name":"Ssyt.mk","kind":"ctor","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L56-L64","name":"Ssyt","kind":"structure","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt","doc":"A semistandard Young tableau (SSYT) is a filling of the cells of a Young diagram by natural\nnumbers, such that the entries in each row are weakly increasing (left to right), and the entries\nin each column are strictly increasing (top to bottom).\n\nHere, an SSYT is represented as an unrestricted function `ℕ → ℕ → ℕ` that, for reasons\nof extensionality, is required to vanish outside `μ`. "}]}