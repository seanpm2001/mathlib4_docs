{"name":"Mathlib.Data.Subtype","instances":[{"typeNames":["Subtype"],"name":"Subtype.instHasEquivSubtype","className":"HasEquiv"},{"typeNames":["Subtype"],"name":"Subtype.instSetoidSubtype","className":"Setoid"}],"imports":["Init","Mathlib.Logic.Function.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L269-L270","name":"Subtype.val_prop","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.val_prop","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L265-L266","name":"Subtype.coe_prop","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.coe_prop","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L254-L255","name":"Subtype.instSetoidSubtype","kind":"instance","docLink":"./Mathlib/Data/Subtype.html#Subtype.instSetoidSubtype","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L250-L251","name":"Subtype.equivalence","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.equivalence","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L246-L247","name":"Subtype.trans","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.trans","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L242-L243","name":"Subtype.symm","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.symm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L238-L239","name":"Subtype.refl","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.refl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L232-L233","name":"Subtype.equiv_iff","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.equiv_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L229-L230","name":"Subtype.instHasEquivSubtype","kind":"instance","docLink":"./Mathlib/Data/Subtype.html#Subtype.instHasEquivSubtype","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L224-L226","name":"Subtype.map_involutive","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.map_involutive","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L219-L221","name":"Subtype.map_injective","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.map_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L215-L216","name":"Subtype.map_id","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.map_id","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L209-L212","name":"Subtype.map_comp","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.map_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L203-L205","name":"Subtype.map","kind":"def","docLink":"./Mathlib/Data/Subtype.html#Subtype.map","doc":"Restriction of a function to a function on subtypes. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L202-L202","name":"Subtype.map_coe","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.map_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L196-L198","name":"Subtype.coind_bijective","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.coind_bijective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L190-L193","name":"Subtype.coind_surjective","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.coind_surjective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L186-L187","name":"Subtype.coind_injective","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.coind_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L182-L182","name":"Subtype.coind","kind":"def","docLink":"./Mathlib/Data/Subtype.html#Subtype.coind","doc":"Defining a map into a subtype, this can be seen as a \"coinduction principle\" of `Subtype`"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L181-L181","name":"Subtype.coind_coe","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.coind_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L172-L177","name":"Subtype.surjective_restrict","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.surjective_restrict","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L167-L169","name":"Subtype.restrict_injective","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.restrict_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L163-L164","name":"Subtype.restrict_def","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.restrict_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L158-L160","name":"Subtype.restrict_apply","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.restrict_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L154-L155","name":"Subtype.restrict","kind":"def","docLink":"./Mathlib/Data/Subtype.html#Subtype.restrict","doc":"Restrict a (dependent) function to a subtype "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L148-L150","name":"exists_subtype_mk_eq_iff","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#exists_subtype_mk_eq_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L140-L142","name":"exists_eq_subtype_mk_iff","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#exists_eq_subtype_mk_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L133-L134","name":"Subtype.val_inj","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.val_inj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L129-L130","name":"Subtype.coe_inj","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.coe_inj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L125-L126","name":"Subtype.val_injective","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.val_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L122-L122","name":"Subtype.coe_injective","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.coe_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L118-L119","name":"Subtype.coe_eq_iff","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.coe_eq_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L114-L115","name":"Subtype.coe_eq_of_eq_mk","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.coe_eq_of_eq_mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L110-L111","name":"Subtype.mk_eq_mk","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.mk_eq_mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L102-L103","name":"Subtype.coe_mk","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.coe_mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L98-L99","name":"Subtype.coe_eta","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.coe_eta","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L93-L94","name":"Subtype.ext_iff_val","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.ext_iff_val","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L89-L90","name":"Subtype.ext_val","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.ext_val","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L82-L86","name":"Subtype.heq_iff_coe_heq","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.heq_iff_coe_heq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L76-L79","name":"Subtype.heq_iff_coe_eq","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.heq_iff_coe_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L72-L73","name":"Subtype.ext_iff","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.ext_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L68-L69","name":"Subtype.ext","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.ext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L63-L64","name":"Subtype.exists'","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.exists'","doc":"An alternative version of `Subtype.exists`. This one is useful if Lean cannot figure out `q`\nwhen using `Subtype.exists` from right to left. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L57-L58","name":"Subtype.exists","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.exists","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L52-L53","name":"Subtype.forall'","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.forall'","doc":"An alternative version of `Subtype.forall`. This one is useful if Lean cannot figure out `q`\nwhen using `Subtype.forall` from right to left. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L46-L47","name":"Subtype.forall","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.forall","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Subtype.lean#L41-L42","name":"Subtype.prop","kind":"theorem","docLink":"./Mathlib/Data/Subtype.html#Subtype.prop","doc":"A version of `x.property` or `x.2` where `p` is syntactically applied to the coercion of `x`\ninstead of `x.1`. A similar result is `Subtype.mem` in `Data.Set.Basic`. "}]}