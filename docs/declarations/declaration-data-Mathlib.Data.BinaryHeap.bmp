{"name":"Mathlib.Data.BinaryHeap","instances":[{"typeNames":["BinaryHeap"],"name":"BinaryHeap.instInhabitedBinaryHeap","className":"Inhabited"},{"typeNames":["BinaryHeap"],"name":"BinaryHeap.instEmptyCollectionBinaryHeap","className":"EmptyCollection"}],"imports":["Init","Mathlib.Data.Fin.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L166-L172","name":"Array.heapSort.loop","kind":"def","docLink":"./Mathlib/Data/BinaryHeap.html#Array.heapSort.loop","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L164-L175","name":"Array.heapSort","kind":"def","docLink":"./Mathlib/Data/BinaryHeap.html#Array.heapSort","doc":"`O(n log n)`. Sort an array using a `BinaryHeap`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L160-L161","name":"Array.toBinaryHeap","kind":"def","docLink":"./Mathlib/Data/BinaryHeap.html#Array.toBinaryHeap","doc":"`O(n)`. Convert an unsorted array to a `BinaryHeap`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L154-L155","name":"BinaryHeap.increaseKey","kind":"def","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.increaseKey","doc":"`O(log n)`. Replace the value at index `i` by `x`. Assumes that `self.get i ≤ x`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L150-L151","name":"BinaryHeap.decreaseKey","kind":"def","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.decreaseKey","doc":"`O(log n)`. Replace the value at index `i` by `x`. Assumes that `x ≤ self.get i`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L142-L147","name":"BinaryHeap.replaceMax","kind":"def","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.replaceMax","doc":"`O(log n)`. Equivalent to `(self.max, self.popMax.insert x)`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L132-L139","name":"BinaryHeap.insertExtractMax","kind":"def","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.insertExtractMax","doc":"`O(log n)`. Equivalent to `extractMax (self.insert x)`, except that extraction cannot fail. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L128-L129","name":"BinaryHeap.size_pos_of_max","kind":"theorem","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.size_pos_of_max","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L125-L126","name":"BinaryHeap.extractMax","kind":"def","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.extractMax","doc":"`O(log n)`. Return and remove the maximum element from a `BinaryHeap`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L121-L122","name":"BinaryHeap.size_popMax","kind":"theorem","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.size_popMax","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L119-L119","name":"BinaryHeap.popMax","kind":"def","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.popMax","doc":"`O(log n)`. Remove the maximum element from a `BinaryHeap`.\nCall `max` first to actually retrieve the maximum element. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L104-L115","name":"BinaryHeap.popMaxAux","kind":"def","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.popMaxAux","doc":"Auxiliary for `popMax`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L101-L101","name":"BinaryHeap.max","kind":"def","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.max","doc":"`O(1)`. Get the maximum element in a `BinaryHeap`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L96-L98","name":"BinaryHeap.size_insert","kind":"theorem","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.size_insert","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L92-L94","name":"BinaryHeap.insert","kind":"def","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.insert","doc":"`O(log n)`. Insert an element into a `BinaryHeap`, preserving the max-heap property. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L89-L89","name":"BinaryHeap.get","kind":"def","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.get","doc":"`O(1)`. Get an element in the heap by index. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L86-L86","name":"BinaryHeap.size","kind":"def","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.size","doc":"`O(1)`. Get the number of elements in a `BinaryHeap`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L83-L83","name":"BinaryHeap.singleton","kind":"def","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.singleton","doc":"`O(1)`. Build a one-element heap. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L80-L80","name":"BinaryHeap.instEmptyCollectionBinaryHeap","kind":"instance","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.instEmptyCollectionBinaryHeap","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L79-L79","name":"BinaryHeap.instInhabitedBinaryHeap","kind":"instance","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.instInhabitedBinaryHeap","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L77-L77","name":"BinaryHeap.empty","kind":"def","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.empty","doc":"`O(1)`. Build a new empty heap. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L73-L74","name":"BinaryHeap.size_heapifyUp","kind":"theorem","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.size_heapifyUp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L59-L71","name":"BinaryHeap.heapifyUp","kind":"def","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.heapifyUp","doc":"Core operation for binary heaps, expressed directly on arrays.\nGiven an array which is a max-heap, push item `i` up to restore the max-heap property. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L54-L55","name":"BinaryHeap.size_mkHeap","kind":"theorem","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.size_mkHeap","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L45-L51","name":"BinaryHeap.mkHeap.loop","kind":"def","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.mkHeap.loop","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L44-L52","name":"BinaryHeap.mkHeap","kind":"def","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.mkHeap","doc":"Core operation for binary heaps, expressed directly on arrays.\nConstruct a heap from an unsorted array, by heapifying all the elements. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L39-L40","name":"BinaryHeap.size_heapifyDown","kind":"theorem","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.size_heapifyDown","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L16-L37","name":"BinaryHeap.heapifyDown","kind":"def","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.heapifyDown","doc":"Core operation for binary heaps, expressed directly on arrays.\nGiven an array which is a max-heap, push item `i` down to restore the max-heap property. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L10-L10","name":"BinaryHeap.arr","kind":"def","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.arr","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L9-L9","name":"BinaryHeap.mk","kind":"ctor","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/BinaryHeap.lean#L9-L10","name":"BinaryHeap","kind":"structure","docLink":"./Mathlib/Data/BinaryHeap.html#BinaryHeap","doc":"A max-heap data structure. "}]}