{"name":"Std.Linter.UnreachableTactic","instances":[],"imports":["Init","Lean.Elab.Command","Lean.Linter.Util","Std.Tactic.Unreachable"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Linter/UnreachableTactic.lean#L87-L107","name":"Std.Linter.UnreachableTactic.unreachableTacticLinter","kind":"def","docLink":"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.unreachableTacticLinter","doc":"The main entry point to the unreachable tactic linter. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Linter/UnreachableTactic.lean#L75-L82","name":"Std.Linter.UnreachableTactic.eraseUsedTactics","kind":"opaque","docLink":"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.eraseUsedTactics","doc":"Search for tactic executions in the info tree and remove executed tactic syntaxes. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Linter/UnreachableTactic.lean#L71-L72","name":"Std.Linter.UnreachableTactic.eraseUsedTacticsList","kind":"opaque","docLink":"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.eraseUsedTacticsList","doc":"Search for tactic executions in the info tree and remove executed tactic syntaxes. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Linter/UnreachableTactic.lean#L60-L66","name":"Std.Linter.UnreachableTactic.getTactics","kind":"opaque","docLink":"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.getTactics","doc":"Accumulates the set of tactic syntaxes that should be evaluated at least once. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Linter/UnreachableTactic.lean#L55-L56","name":"Std.Linter.UnreachableTactic.addIgnoreTacticKind","kind":"def","docLink":"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.addIgnoreTacticKind","doc":"Adds a new syntax kind whose children will be ignored by the `unreachableTactic` linter.\nThis should be called from an `initialize` block.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Linter/UnreachableTactic.lean#L46-L49","name":"Std.Linter.UnreachableTactic.isIgnoreTacticKind","kind":"def","docLink":"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.isIgnoreTacticKind","doc":"Is this a syntax kind that contains intentionally unevaluated tactic subterms? "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Linter/UnreachableTactic.lean#L34-L43","name":"Std.Linter.UnreachableTactic.ignoreTacticKindsRef","kind":"opaque","docLink":"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.ignoreTacticKindsRef","doc":"A list of blacklisted syntax kinds, which are expected to have subterms that contain\nunevaluated tactics.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Linter/UnreachableTactic.lean#L32-L32","name":"Std.Linter.UnreachableTactic.M","kind":"def","docLink":"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.M","doc":"The monad for collecting used tactic syntaxes. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Linter/UnreachableTactic.lean#L29-L29","name":"Std.Linter.UnreachableTactic.getLinterUnreachableTactic","kind":"def","docLink":"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.getLinterUnreachableTactic","doc":"Gets the value of the `linter.unreachableTactic` option. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Linter/UnreachableTactic.lean#L13-L25","name":"Std.Linter.linter.unreachableTactic","kind":"opaque","docLink":"./Std/Linter/UnreachableTactic.html#Std.Linter.linter.unreachableTactic","doc":"Enables the 'unreachable tactic' linter. This will warn on any tactics that are never executed.\nFor example, in `example : True := by trivial <;> done`, the tactic `done` is never executed\nbecause `trivial` produces no subgoals; you could put `sorry` or `apply I_don't_exist`\nor anything else there and no error would result.\n\nA common source of such things is `simp <;> tac` in the case that `simp` improves and\ncloses a subgoal that was previously being closed by `tac`.\n"}]}