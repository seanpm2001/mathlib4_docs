{"name":"Mathlib.Algebra.Module.Basic","instances":[{"typeNames":["Semiring.toMonoidWithZero","AddMonoid.toZero","AddCommMonoid.toAddMonoid"],"name":"Module.toMulActionWithZero","className":"MulActionWithZero"},{"typeNames":["Nat","Nat.semiring"],"name":"AddCommMonoid.natModule","className":"Module"},{"typeNames":["Int","Int.instSemiringInt","AddCommGroup.toAddCommMonoid"],"name":"AddCommGroup.intModule","className":"Module"},{"typeNames":["NonUnitalNonAssocSemiring.toAddCommMonoid","NonAssocSemiring.toNonUnitalNonAssocSemiring","Semiring.toNonAssocSemiring"],"name":"Semiring.toModule","className":"Module"},{"typeNames":["MulOpposite","MulOpposite.semiring","NonUnitalNonAssocSemiring.toAddCommMonoid","NonAssocSemiring.toNonUnitalNonAssocSemiring","Semiring.toNonAssocSemiring"],"name":"Semiring.toOppositeModule","className":"Module"},{"typeNames":["RingHom","Semiring.toNonAssocSemiring","RingHom.instMonoidRingHom","Semiring.toNonAssocSemiring","AddMonoidWithOne.toAddMonoid","AddCommMonoidWithOne.toAddMonoidWithOne","NonAssocSemiring.toAddCommMonoidWithOne","Semiring.toNonAssocSemiring"],"name":"RingHom.applyDistribMulAction","className":"DistribMulAction"},{"typeNames":["RingHom","Semiring.toNonAssocSemiring","SMulZeroClass.toSMul","RingHom","Semiring.toNonAssocSemiring","MonoidWithZero.toZero","Semiring.toMonoidWithZero","DistribSMul.toSMulZeroClass","AddMonoid.toAddZeroClass","AddMonoidWithOne.toAddMonoid","AddCommMonoidWithOne.toAddMonoidWithOne","NonAssocSemiring.toAddCommMonoidWithOne","DistribMulAction.toDistribSMul","RingHom.instMonoidRingHom","RingHom.applyDistribMulAction"],"name":"RingHom.applyFaithfulSMul","className":"FaithfulSMul"},{"typeNames":["Nat","AddMonoid.SMul","AddMonoidWithOne.toAddMonoid","AddCommMonoidWithOne.toAddMonoidWithOne","NonAssocSemiring.toAddCommMonoidWithOne","Semiring.toNonAssocSemiring","SMulZeroClass.toSMul","AddMonoid.toZero","AddCommMonoid.toAddMonoid","SMulWithZero.toSMulZeroClass","MonoidWithZero.toZero","Semiring.toMonoidWithZero","MulActionWithZero.toSMulWithZero","Module.toMulActionWithZero","AddMonoid.SMul","AddCommMonoid.toAddMonoid"],"name":"AddCommMonoid.nat_isScalarTower","className":"IsScalarTower"},{"typeNames":["Module","Rat","Rat.semiring","AddCommGroup.toAddCommMonoid"],"name":"subsingleton_rat_module","className":"Subsingleton"},{"typeNames":["Int","SubNegMonoid.SMulInt","AddGroup.toSubNegMonoid","AddGroupWithOne.toAddGroup","Ring.toAddGroupWithOne","SMulZeroClass.toSMul","NegZeroClass.toZero","SubNegZeroMonoid.toNegZeroClass","SubtractionMonoid.toSubNegZeroMonoid","SubtractionCommMonoid.toSubtractionMonoid","AddCommGroup.toDivisionAddCommMonoid","SMulWithZero.toSMulZeroClass","MonoidWithZero.toZero","Semiring.toMonoidWithZero","Ring.toSemiring","MulActionWithZero.toSMulWithZero","Module.toMulActionWithZero","AddCommGroup.toAddCommMonoid","SubNegMonoid.SMulInt","AddGroup.toSubNegMonoid","AddCommGroup.toAddGroup"],"name":"AddCommGroup.intIsScalarTower","className":"IsScalarTower"},{"typeNames":["Rat","SMulZeroClass.toSMul","Rat","MonoidWithZero.toZero","Semiring.toMonoidWithZero","Ring.toSemiring","SMulWithZero.toSMulZeroClass","CommMonoidWithZero.toZero","CommGroupWithZero.toCommMonoidWithZero","Rat.commGroupWithZero","MulActionWithZero.toSMulWithZero","Semiring.toMonoidWithZero","Rat.semiring","Module.toMulActionWithZero","NonUnitalNonAssocSemiring.toAddCommMonoid","NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring","NonAssocRing.toNonUnitalNonAssocRing","Ring.toNonAssocRing","SMulZeroClass.toSMul","NegZeroClass.toZero","SubNegZeroMonoid.toNegZeroClass","SubtractionMonoid.toSubNegZeroMonoid","SubtractionCommMonoid.toSubtractionMonoid","AddCommGroup.toDivisionAddCommMonoid","SMulWithZero.toSMulZeroClass","MonoidWithZero.toZero","Semiring.toMonoidWithZero","Ring.toSemiring","MulActionWithZero.toSMulWithZero","Module.toMulActionWithZero","AddCommGroup.toAddCommMonoid","SMulZeroClass.toSMul","Rat","NegZeroClass.toZero","SubNegZeroMonoid.toNegZeroClass","SubtractionMonoid.toSubNegZeroMonoid","SubtractionCommMonoid.toSubtractionMonoid","AddCommGroup.toDivisionAddCommMonoid","SMulWithZero.toSMulZeroClass","CommMonoidWithZero.toZero","CommGroupWithZero.toCommMonoidWithZero","Rat.commGroupWithZero","MulActionWithZero.toSMulWithZero","Semiring.toMonoidWithZero","Rat.semiring","Module.toMulActionWithZero","AddCommGroup.toAddCommMonoid"],"name":"IsScalarTower.rat","className":"IsScalarTower"},{"typeNames":["Rat","SMulZeroClass.toSMul","Rat","NegZeroClass.toZero","SubNegZeroMonoid.toNegZeroClass","SubtractionMonoid.toSubNegZeroMonoid","SubtractionCommMonoid.toSubtractionMonoid","AddCommGroup.toDivisionAddCommMonoid","SMulWithZero.toSMulZeroClass","CommMonoidWithZero.toZero","CommGroupWithZero.toCommMonoidWithZero","Rat.commGroupWithZero","MulActionWithZero.toSMulWithZero","Semiring.toMonoidWithZero","Rat.semiring","Module.toMulActionWithZero","AddCommGroup.toAddCommMonoid","SMulZeroClass.toSMul","NegZeroClass.toZero","SubNegZeroMonoid.toNegZeroClass","SubtractionMonoid.toSubNegZeroMonoid","SubtractionCommMonoid.toSubtractionMonoid","AddCommGroup.toDivisionAddCommMonoid","SMulWithZero.toSMulZeroClass","MonoidWithZero.toZero","Semiring.toMonoidWithZero","MulActionWithZero.toSMulWithZero","Module.toMulActionWithZero","AddCommGroup.toAddCommMonoid"],"name":"SMulCommClass.rat","className":"SMulCommClass"},{"typeNames":["Rat","SMulZeroClass.toSMul","NegZeroClass.toZero","SubNegZeroMonoid.toNegZeroClass","SubtractionMonoid.toSubNegZeroMonoid","SubtractionCommMonoid.toSubtractionMonoid","AddCommGroup.toDivisionAddCommMonoid","SMulWithZero.toSMulZeroClass","MonoidWithZero.toZero","Semiring.toMonoidWithZero","MulActionWithZero.toSMulWithZero","Module.toMulActionWithZero","AddCommGroup.toAddCommMonoid","SMulZeroClass.toSMul","Rat","NegZeroClass.toZero","SubNegZeroMonoid.toNegZeroClass","SubtractionMonoid.toSubNegZeroMonoid","SubtractionCommMonoid.toSubtractionMonoid","AddCommGroup.toDivisionAddCommMonoid","SMulWithZero.toSMulZeroClass","CommMonoidWithZero.toZero","CommGroupWithZero.toCommMonoidWithZero","Rat.commGroupWithZero","MulActionWithZero.toSMulWithZero","Semiring.toMonoidWithZero","Rat.semiring","Module.toMulActionWithZero","AddCommGroup.toAddCommMonoid"],"name":"SMulCommClass.rat'","className":"SMulCommClass"},{"typeNames":["Mul.toSMul"],"name":"NoZeroDivisors.toNoZeroSMulDivisors","className":"NoZeroSMulDivisors"},{"typeNames":["MonoidWithZero.toZero","GroupWithZero.toMonoidWithZero","AddMonoid.toZero","SMulZeroClass.toSMul","AddMonoid.toZero","DistribSMul.toSMulZeroClass","AddMonoid.toAddZeroClass","DistribMulAction.toDistribSMul","MonoidWithZero.toMonoid","GroupWithZero.toMonoidWithZero"],"name":"GroupWithZero.toNoZeroSMulDivisors","className":"NoZeroSMulDivisors"},{"typeNames":["Int","CommMonoidWithZero.toZero","Int","CancelCommMonoidWithZero.toCommMonoidWithZero","IsDomain.toCancelCommMonoidWithZero","Int.instCommSemiringInt","LinearOrderedRing.isDomain","LinearOrderedCommRing.toLinearOrderedRing","Int.linearOrderedCommRing","NegZeroClass.toZero","SubNegZeroMonoid.toNegZeroClass","SubtractionMonoid.toSubNegZeroMonoid","SubtractionCommMonoid.toSubtractionMonoid","AddCommGroup.toDivisionAddCommMonoid","SubNegMonoid.SMulInt","AddGroup.toSubNegMonoid","AddCommGroup.toAddGroup"],"name":"RatModule.noZeroSMulDivisors","className":"NoZeroSMulDivisors"}],"imports":["Init","Mathlib.Algebra.SMulWithZero","Mathlib.Algebra.Field.Defs","Mathlib.Data.Rat.Defs","Mathlib.Data.Rat.Basic","Mathlib.GroupTheory.GroupAction.Group","Mathlib.Tactic.Abel"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L766-L767","name":"Int.smul_one_eq_coe","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#Int.smul_one_eq_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L760-L761","name":"Nat.smul_one_eq_coe","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#Nat.smul_one_eq_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L748-L751","name":"RatModule.noZeroSMulDivisors","kind":"instance","docLink":"./Mathlib/Algebra/Module/Basic.html#RatModule.noZeroSMulDivisors","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L741-L742","name":"GroupWithZero.toNoZeroSMulDivisors","kind":"instance","docLink":"./Mathlib/Algebra/Module/Basic.html#GroupWithZero.toNoZeroSMulDivisors","doc":"This instance applies to `DivisionSemiring`s, in particular `NNReal` and `NNRat`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L720-L728","name":"smul_left_injective","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#smul_left_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L704-L705","name":"neg_ne_self","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#neg_ne_self","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L700-L701","name":"self_ne_neg","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#self_ne_neg","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L697-L697","name":"neg_eq_self","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#neg_eq_self","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L693-L694","name":"self_eq_neg","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#self_eq_neg","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L680-L682","name":"smul_right_inj","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#smul_right_inj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L673-L675","name":"smul_right_injective","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#smul_right_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L657-L659","name":"CharZero.of_module","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#CharZero.of_module","doc":"If `M` is an `R`-module with one and `M` has characteristic zero, then `R` has characteristic\nzero as well. Usually `M` is an `R`-algebra. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L646-L648","name":"two_nsmul_eq_zero","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#two_nsmul_eq_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L637-L641","name":"Nat.noZeroSMulDivisors","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#Nat.noZeroSMulDivisors","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L621-L621","name":"smul_ne_zero_iff","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#smul_ne_zero_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L616-L618","name":"smul_eq_zero","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#smul_eq_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L606-L608","name":"smul_ne_zero","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#smul_ne_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L601-L603","name":"NoZeroDivisors.toNoZeroSMulDivisors","kind":"instance","docLink":"./Mathlib/Algebra/Module/Basic.html#NoZeroDivisors.toNoZeroSMulDivisors","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L593-L597","name":"Function.Injective.noZeroSMulDivisors","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#Function.Injective.noZeroSMulDivisors","doc":"Pullback a `NoZeroSMulDivisors` instance along an injective function. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L587-L587","name":"NoZeroSMulDivisors.eq_zero_or_eq_zero_of_smul_eq_zero","kind":"def","docLink":"./Mathlib/Algebra/Module/Basic.html#NoZeroSMulDivisors.eq_zero_or_eq_zero_of_smul_eq_zero","doc":"If scalar multiplication yields zero, either the scalar or the vector was zero. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L585-L585","name":"NoZeroSMulDivisors.mk","kind":"ctor","docLink":"./Mathlib/Algebra/Module/Basic.html#NoZeroSMulDivisors.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L585-L587","name":"NoZeroSMulDivisors","kind":"class","docLink":"./Mathlib/Algebra/Module/Basic.html#NoZeroSMulDivisors","doc":"`NoZeroSMulDivisors R M` states that a scalar multiple is `0` only if either argument is `0`.\nThis a version of saying that `M` is torsion free, without assuming `R` is zero-divisor free.\n\nThe main application of `NoZeroSMulDivisors R M`, when `M` is a module,\nis the result `smul_eq_zero`: a scalar multiple is `0` iff either argument is `0`.\n\nIt is a generalization of the `NoZeroDivisors` class to heterogeneous multiplication.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L563-L565","name":"SMulCommClass.rat'","kind":"instance","docLink":"./Mathlib/Algebra/Module/Basic.html#SMulCommClass.rat'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L558-L560","name":"SMulCommClass.rat","kind":"instance","docLink":"./Mathlib/Algebra/Module/Basic.html#SMulCommClass.rat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L553-L555","name":"IsScalarTower.rat","kind":"instance","docLink":"./Mathlib/Algebra/Module/Basic.html#IsScalarTower.rat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L548-L550","name":"AddCommGroup.intIsScalarTower","kind":"instance","docLink":"./Mathlib/Algebra/Module/Basic.html#AddCommGroup.intIsScalarTower","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L543-L545","name":"rat_cast_smul_eq","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#rat_cast_smul_eq","doc":"If `E` is a vector space over two division rings `R` and `S`, then scalar multiplications\nagree on rational numbers in `R` and `S`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L535-L538","name":"inv_int_cast_smul_comm","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#inv_int_cast_smul_comm","doc":"If `E` is a vector space over a division ring `R` and has a monoid action by `α`, then that\naction commutes by scalar multiplication of inverses of integers in `R` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L527-L530","name":"inv_nat_cast_smul_comm","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#inv_nat_cast_smul_comm","doc":"If `E` is a vector space over a division semiring `R` and has a monoid action by `α`, then that\naction commutes by scalar multiplication of inverses of natural numbers in `R`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L520-L522","name":"inv_int_cast_smul_eq","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#inv_int_cast_smul_eq","doc":"If `E` is a vector space over two division rings `R` and `S`, then scalar multiplications\nagree on inverses of integer numbers in `R` and `S`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L512-L515","name":"inv_nat_cast_smul_eq","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#inv_nat_cast_smul_eq","doc":"If `E` is a vector space over two division semirings `R` and `S`, then scalar multiplications\nagree on inverses of natural numbers in `R` and `S`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L506-L507","name":"subsingleton_rat_module","kind":"instance","docLink":"./Mathlib/Algebra/Module/Basic.html#subsingleton_rat_module","doc":"There can be at most one `Module ℚ E` structure on an additive commutative group. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L500-L502","name":"map_rat_smul","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#map_rat_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L493-L497","name":"map_rat_cast_smul","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#map_rat_cast_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L484-L490","name":"map_inv_int_cast_smul","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#map_inv_int_cast_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L466-L481","name":"map_inv_nat_cast_smul","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#map_inv_nat_cast_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L460-L463","name":"map_nat_cast_smul","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#map_nat_cast_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L455-L457","name":"map_int_cast_smul","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#map_int_cast_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L448-L450","name":"AddCommGroup.intModule.unique","kind":"def","docLink":"./Mathlib/Algebra/Module/Basic.html#AddCommGroup.intModule.unique","doc":"All `ℤ`-module structures are equal. Not an instance since in mathlib all `AddCommGroup`\nshould normally have exactly one `ℤ`-module structure by design. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L442-L443","name":"int_smul_eq_zsmul","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#int_smul_eq_zsmul","doc":"Convert back any exotic `ℤ`-smul to the canonical instance. This should not be needed since in\nmathlib all `AddCommGroup`s should normally have exactly one `ℤ`-module structure by design. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L431-L435","name":"zsmul_eq_smul_cast","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#zsmul_eq_smul_cast","doc":"`zsmul` is equal to any other module structure via a cast. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L414-L417","name":"AddCommMonoid.nat_isScalarTower","kind":"instance","docLink":"./Mathlib/Algebra/Module/Basic.html#AddCommMonoid.nat_isScalarTower","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L409-L411","name":"AddCommMonoid.natModule.unique","kind":"def","docLink":"./Mathlib/Algebra/Module/Basic.html#AddCommMonoid.natModule.unique","doc":"All `ℕ`-module structures are equal. Not an instance since in mathlib all `AddCommMonoid`\nshould normally have exactly one `ℕ`-module structure by design. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L403-L404","name":"nat_smul_eq_nsmul","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#nat_smul_eq_nsmul","doc":"Convert back any exotic `ℕ`-smul to the canonical instance. This should not be needed since in\nmathlib all `AddCommMonoid`s should normally have exactly one `ℕ`-module structure by design.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L392-L395","name":"nsmul_eq_smul_cast","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#nsmul_eq_smul_cast","doc":"`nsmul` is equal to any other module structure via a cast. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L379-L380","name":"RingHom.applyFaithfulSMul","kind":"instance","docLink":"./Mathlib/Algebra/Module/Basic.html#RingHom.applyFaithfulSMul","doc":"`RingHom.applyDistribMulAction` is faithful. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L374-L375","name":"RingHom.smul_def","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#RingHom.smul_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L365-L370","name":"RingHom.applyDistribMulAction","kind":"instance","docLink":"./Mathlib/Algebra/Module/Basic.html#RingHom.applyDistribMulAction","doc":"The tautological action by `R →+* R` on `R`.\n\nThis generalizes `Function.End.applyMulAction`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L358-L359","name":"RingHom.toModule","kind":"def","docLink":"./Mathlib/Algebra/Module/Basic.html#RingHom.toModule","doc":"A ring homomorphism `f : R →+* M` defines a module structure by `r • x = f r * x`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L351-L354","name":"Semiring.toOppositeModule","kind":"instance","docLink":"./Mathlib/Algebra/Module/Basic.html#Semiring.toOppositeModule","doc":"Like `Semiring.toModule`, but multiplies on the right. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L342-L346","name":"Semiring.toModule","kind":"instance","docLink":"./Mathlib/Algebra/Module/Basic.html#Semiring.toModule","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L336-L338","name":"Module.nontrivial","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#Module.nontrivial","doc":"A semiring is `Nontrivial` provided that there exists a nontrivial module over this semiring. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L330-L332","name":"Module.subsingleton","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#Module.subsingleton","doc":"A module over a `Subsingleton` semiring is a `Subsingleton`. We cannot register this\nas an instance because Lean has no way to guess `R`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L322-L323","name":"sub_smul","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#sub_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L317-L317","name":"neg_one_smul","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#neg_one_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L311-L312","name":"Units.neg_smul","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#Units.neg_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L307-L307","name":"neg_smul_neg","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#neg_smul_neg","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L301-L302","name":"neg_smul","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#neg_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L289-L293","name":"Module.ext'","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#Module.ext'","doc":"A variant of `Module.ext` that's convenient for term-mode. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L278-L282","name":"Convex.combo_eq_smul_sub_add","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#Convex.combo_eq_smul_sub_add","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L270-L275","name":"Module.ofCore","kind":"def","docLink":"./Mathlib/Algebra/Module/Basic.html#Module.ofCore","doc":"Define `Module` without proving `zero_smul` and `smul_zero` by using an auxiliary\nstructure `Module.Core`, when the underlying space is an `AddCommGroup`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L263-L263","name":"Module.Core.one_smul","kind":"def","docLink":"./Mathlib/Algebra/Module/Basic.html#Module.Core.one_smul","doc":"Scalar multiplication by one is the identity. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L261-L261","name":"Module.Core.mul_smul","kind":"def","docLink":"./Mathlib/Algebra/Module/Basic.html#Module.Core.mul_smul","doc":"Scalar multiplication distributes over multiplication from the right. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L259-L259","name":"Module.Core.add_smul","kind":"def","docLink":"./Mathlib/Algebra/Module/Basic.html#Module.Core.add_smul","doc":"Scalar multiplication distributes over addition from the right. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L257-L257","name":"Module.Core.smul_add","kind":"def","docLink":"./Mathlib/Algebra/Module/Basic.html#Module.Core.smul_add","doc":"Scalar multiplication distributes over addition from the left. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L255-L263","name":"Module.Core","kind":"structure","docLink":"./Mathlib/Algebra/Module/Basic.html#Module.Core","doc":"A structure containing most informations as in a module, except the fields `zero_smul`\nand `smul_zero`. As these fields can be deduced from the other ones when `M` is an `AddCommGroup`,\nthis provides a way to construct a module structure by checking less properties, in\n`Module.ofCore`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L245-L247","name":"AddMonoid.End.int_cast_def","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#AddMonoid.End.int_cast_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L236-L242","name":"AddCommGroup.intModule","kind":"instance","docLink":"./Mathlib/Algebra/Module/Basic.html#AddCommGroup.intModule","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L221-L227","name":"Module.addCommMonoidToAddCommGroup","kind":"def","docLink":"./Mathlib/Algebra/Module/Basic.html#Module.addCommMonoidToAddCommGroup","doc":"An `AddCommMonoid` that is a `Module` over a `Ring` carries a natural `AddCommGroup`\nstructure.\nSee note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L209-L210","name":"smul_add_one_sub_smul","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#smul_add_one_sub_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L204-L205","name":"Module.eq_zero_of_zero_eq_one","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#Module.eq_zero_of_zero_eq_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L200-L201","name":"smulAddHom_apply","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#smulAddHom_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L193-L194","name":"smulAddHom","kind":"def","docLink":"./Mathlib/Algebra/Module/Basic.html#smulAddHom","doc":"A convenience alias for `Module.toAddMonoidEnd` as an `AddMonoidHom`, usually to allow the\nuse of `AddMonoidHom.flip`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L179-L187","name":"Module.toAddMonoidEnd","kind":"def","docLink":"./Mathlib/Algebra/Module/Basic.html#Module.toAddMonoidEnd","doc":"`(•)` as an `AddMonoidHom`.\n\nThis is a stronger version of `DistribMulAction.toAddMonoidEnd` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L178-L178","name":"Module.toAddMonoidEnd_apply_apply","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#Module.toAddMonoidEnd_apply_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L163-L170","name":"Module.compHom","kind":"def","docLink":"./Mathlib/Algebra/Module/Basic.html#Module.compHom","doc":"Compose a `Module` with a `RingHom`, with action `f s • m`.\n\nSee note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L148-L154","name":"Function.Surjective.moduleLeft","kind":"def","docLink":"./Mathlib/Algebra/Module/Basic.html#Function.Surjective.moduleLeft","doc":"Push forward the action of `R` on `M` along a compatible surjective map `f : R →+* S`.\n\nSee also `Function.Surjective.mulActionLeft` and `Function.Surjective.distribMulActionLeft`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L131-L140","name":"Function.Surjective.module","kind":"def","docLink":"./Mathlib/Algebra/Module/Basic.html#Function.Surjective.module","doc":"Pushforward a `Module` structure along a surjective additive monoid homomorphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L122-L127","name":"Function.Injective.module","kind":"def","docLink":"./Mathlib/Algebra/Module/Basic.html#Function.Injective.module","doc":"Pullback a `Module` structure along an injective additive monoid homomorphism.\nSee note [reducible non-instances]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L114-L116","name":"invOf_two_smul_add_invOf_two_smul","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#invOf_two_smul_add_invOf_two_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L109-L110","name":"two_smul'","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#two_smul'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L105-L105","name":"two_smul","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#two_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L98-L99","name":"Convex.combo_self","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#Convex.combo_self","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L94-L95","name":"add_smul","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#add_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L89-L91","name":"AddMonoid.End.nat_cast_def","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#AddMonoid.End.nat_cast_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L80-L86","name":"AddCommMonoid.natModule","kind":"instance","docLink":"./Mathlib/Algebra/Module/Basic.html#AddCommMonoid.natModule","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L74-L77","name":"Module.toMulActionWithZero","kind":"instance","docLink":"./Mathlib/Algebra/Module/Basic.html#Module.toMulActionWithZero","doc":"A module over a semiring automatically inherits a `MulActionWithZero` structure. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L63-L63","name":"Module.zero_smul","kind":"def","docLink":"./Mathlib/Algebra/Module/Basic.html#Module.zero_smul","doc":"Scalar multiplication by zero gives zero. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L61-L61","name":"Module.add_smul","kind":"def","docLink":"./Mathlib/Algebra/Module/Basic.html#Module.add_smul","doc":"Scalar multiplication distributes over addition from the right. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L58-L58","name":"Module.mk","kind":"ctor","docLink":"./Mathlib/Algebra/Module/Basic.html#Module.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L58-L63","name":"Module","kind":"class","docLink":"./Mathlib/Algebra/Module/Basic.html#Module","doc":"A module is a generalization of vector spaces to a scalar semiring.\nIt consists of a scalar semiring `R` and an additive monoid of \"vectors\" `M`,\nconnected by a \"scalar multiplication\" operation `r • x : M`\n(where `r : R` and `x : M`) with some natural associativity and\ndistributivity axioms similar to those on a ring. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L57-L57","name":"Module.ext_iff","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#Module.ext_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L57-L57","name":"Module.ext","kind":"theorem","docLink":"./Mathlib/Algebra/Module/Basic.html#Module.ext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Module/Basic.lean#L1-L1","name":"Module.Core.mk","kind":"ctor","docLink":"./Mathlib/Algebra/Module/Basic.html#Module.Core.mk","doc":""}]}