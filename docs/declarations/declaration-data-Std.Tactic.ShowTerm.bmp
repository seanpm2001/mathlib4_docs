{"name":"Std.Tactic.ShowTerm","instances":[],"imports":["Init","Lean.Elab.ElabRules","Std.Tactic.TryThis"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/ShowTerm.lean#L34-L38","name":"Std.Tactic.by?","kind":"def","docLink":"./Std/Tactic/ShowTerm.html#Std.Tactic.by?","doc":"The command `by?` will print a suggestion for replacing the proof block with a proof term\nusing `show_term`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/ShowTerm.lean#L23-L32","name":"Std.Tactic.showTerm","kind":"def","docLink":"./Std/Tactic/ShowTerm.html#Std.Tactic.showTerm","doc":"`show_term e` elaborates `e`, then prints the generated term.\n\n(For some tactics, the printed term will not be human readable.)\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/ShowTerm.lean#L12-L21","name":"Std.Tactic.showTermTac","kind":"def","docLink":"./Std/Tactic/ShowTerm.html#Std.Tactic.showTermTac","doc":"`show_term tac` runs `tac`, then prints the generated term in the form\n\"exact X Y Z\" or \"refine X ?_ Z\" if there are remaining subgoals.\n\n(For some tactics, the printed term will not be human readable.)\n"}]}