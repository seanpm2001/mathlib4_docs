{"name":"Mathlib.Algebra.Algebra.RestrictScalars","instances":[{"typeNames":["RestrictScalars"],"name":"instInhabitedRestrictScalars","className":"Inhabited"},{"typeNames":["RestrictScalars"],"name":"instAddCommMonoidRestrictScalars","className":"AddCommMonoid"},{"typeNames":["RestrictScalars"],"name":"instAddCommGroupRestrictScalars","className":"AddCommGroup"},{"typeNames":["RestrictScalars","CommSemiring.toSemiring","instAddCommMonoidRestrictScalars"],"name":"RestrictScalars.module","className":"Module"},{"typeNames":["RestrictScalars","Algebra.toSMul","SMulZeroClass.toSMul","RestrictScalars","AddMonoid.toZero","AddCommMonoid.toAddMonoid","instAddCommMonoidRestrictScalars","SMulWithZero.toSMulZeroClass","MonoidWithZero.toZero","Semiring.toMonoidWithZero","MulActionWithZero.toSMulWithZero","Module.toMulActionWithZero","RestrictScalars.moduleOrig","SMulZeroClass.toSMul","RestrictScalars","AddMonoid.toZero","AddCommMonoid.toAddMonoid","instAddCommMonoidRestrictScalars","SMulWithZero.toSMulZeroClass","CommMonoidWithZero.toZero","CommSemiring.toCommMonoidWithZero","MulActionWithZero.toSMulWithZero","Semiring.toMonoidWithZero","CommSemiring.toSemiring","Module.toMulActionWithZero","RestrictScalars.module"],"name":"RestrictScalars.isScalarTower","className":"IsScalarTower"},{"typeNames":["MulOpposite","RestrictScalars","MulOpposite.semiring","CommSemiring.toSemiring","instAddCommMonoidRestrictScalars"],"name":"RestrictScalars.opModule","className":"Module"},{"typeNames":["RestrictScalars","SMulZeroClass.toSMul","RestrictScalars","AddMonoid.toZero","AddCommMonoid.toAddMonoid","instAddCommMonoidRestrictScalars","SMulWithZero.toSMulZeroClass","CommMonoidWithZero.toZero","CommSemiring.toCommMonoidWithZero","MulActionWithZero.toSMulWithZero","Semiring.toMonoidWithZero","CommSemiring.toSemiring","Module.toMulActionWithZero","RestrictScalars.module","SMulZeroClass.toSMul","MulOpposite","RestrictScalars","AddMonoid.toZero","AddCommMonoid.toAddMonoid","instAddCommMonoidRestrictScalars","SMulWithZero.toSMulZeroClass","MulOpposite.zero","CommMonoidWithZero.toZero","CommSemiring.toCommMonoidWithZero","MulActionWithZero.toSMulWithZero","MulOpposite.monoidWithZero","Semiring.toMonoidWithZero","CommSemiring.toSemiring","Module.toMulActionWithZero","MulOpposite.semiring","RestrictScalars.opModule"],"name":"RestrictScalars.isCentralScalar","className":"IsCentralScalar"},{"typeNames":["RestrictScalars"],"name":"instSemiringRestrictScalars","className":"Semiring"},{"typeNames":["RestrictScalars"],"name":"instRingRestrictScalars","className":"Ring"},{"typeNames":["RestrictScalars"],"name":"instCommSemiringRestrictScalars","className":"CommSemiring"},{"typeNames":["RestrictScalars"],"name":"instCommRingRestrictScalars","className":"CommRing"},{"typeNames":["RestrictScalars","instSemiringRestrictScalars"],"name":"instAlgebraRestrictScalarsInstSemiringRestrictScalars","className":"Algebra"}],"imports":["Init","Mathlib.Algebra.Algebra.Tower"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L227-L230","name":"RestrictScalars.ringEquiv_algebraMap","kind":"theorem","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#RestrictScalars.ringEquiv_algebraMap","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L220-L224","name":"instAlgebraRestrictScalarsInstSemiringRestrictScalars","kind":"instance","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#instAlgebraRestrictScalarsInstSemiringRestrictScalars","doc":"`R ⟶ S` induces `S-Alg ⥤ R-Alg` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L213-L216","name":"RestrictScalars.ringEquiv_map_smul","kind":"theorem","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#RestrictScalars.ringEquiv_map_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L206-L207","name":"RestrictScalars.ringEquiv","kind":"def","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#RestrictScalars.ringEquiv","doc":"Tautological ring isomorphism `RestrictScalars R S A ≃+* A`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L201-L201","name":"instCommRingRestrictScalars","kind":"instance","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#instCommRingRestrictScalars","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L199-L199","name":"instCommSemiringRestrictScalars","kind":"instance","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#instCommSemiringRestrictScalars","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L197-L197","name":"instRingRestrictScalars","kind":"instance","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#instRingRestrictScalars","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L195-L195","name":"instSemiringRestrictScalars","kind":"instance","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#instSemiringRestrictScalars","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L185-L188","name":"RestrictScalars.lsmul_apply_apply","kind":"theorem","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#RestrictScalars.lsmul_apply_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L178-L182","name":"RestrictScalars.addEquiv_symm_map_smul_smul","kind":"theorem","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#RestrictScalars.addEquiv_symm_map_smul_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L172-L175","name":"RestrictScalars.addEquiv_symm_map_algebraMap_smul","kind":"theorem","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#RestrictScalars.addEquiv_symm_map_algebraMap_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L167-L169","name":"RestrictScalars.addEquiv_map_smul","kind":"theorem","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#RestrictScalars.addEquiv_map_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L160-L163","name":"RestrictScalars.smul_def","kind":"theorem","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#RestrictScalars.smul_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L154-L155","name":"RestrictScalars.addEquiv","kind":"def","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#RestrictScalars.addEquiv","doc":"`RestrictScalars.addEquiv` is the additive equivalence with the original module. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L142-L146","name":"RestrictScalars.lsmul","kind":"def","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#RestrictScalars.lsmul","doc":"The `R`-algebra homomorphism from the original coefficient algebra `S` to endomorphisms\nof `RestrictScalars R S M`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L134-L136","name":"RestrictScalars.isCentralScalar","kind":"instance","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#RestrictScalars.isCentralScalar","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L129-L131","name":"RestrictScalars.opModule","kind":"instance","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#RestrictScalars.opModule","doc":"When `M` is a right-module over a ring `S`, and `S` is an algebra over `R`, then `M` inherits a\nright-module structure over `R`.\nThe preferred way of setting this up is\n`[Module Rᵐᵒᵖ M] [Module Sᵐᵒᵖ M] [IsScalarTower Rᵐᵒᵖ Sᵐᵒᵖ M]`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L116-L119","name":"RestrictScalars.isScalarTower","kind":"instance","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#RestrictScalars.isScalarTower","doc":"This instance is only relevant when `RestrictScalars.moduleOrig` is available as an instance.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L111-L112","name":"RestrictScalars.module","kind":"instance","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#RestrictScalars.module","doc":"When `M` is a module over a ring `S`, and `S` is an algebra over `R`, then `M` inherits a\nmodule structure over `R`.\n\nThe preferred way of setting this up is `[Module R M] [Module S M] [IsScalarTower R S M]`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L97-L97","name":"RestrictScalars.moduleOrig","kind":"def","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#RestrictScalars.moduleOrig","doc":"We temporarily install an action of the original ring on `RestrictScalars R S M`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L88-L88","name":"instAddCommGroupRestrictScalars","kind":"instance","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#instAddCommGroupRestrictScalars","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L86-L86","name":"instAddCommMonoidRestrictScalars","kind":"instance","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#instAddCommMonoidRestrictScalars","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L84-L84","name":"instInhabitedRestrictScalars","kind":"instance","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#instInhabitedRestrictScalars","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Algebra/Algebra/RestrictScalars.lean#L81-L81","name":"RestrictScalars","kind":"def","docLink":"./Mathlib/Algebra/Algebra/RestrictScalars.html#RestrictScalars","doc":"If we put an `R`-algebra structure on a semiring `S`, we get a natural equivalence from the\ncategory of `S`-modules to the category of representations of the algebra `S` (over `R`). The type\nsynonym `RestrictScalars` is essentially this equivalence.\n\nWarning: use this type synonym judiciously! Consider an example where we want to construct an\n`R`-linear map from `M` to `S`, given:\n```lean\nvariable (R S M : Type _)\nvariable [CommSemiring R] [Semiring S] [Algebra R S] [AddCommMonoid M] [Module S M]\n```\nWith the assumptions above we can't directly state our map as we have no `Module R M` structure, but\n`RestrictScalars` permits it to be written as:\n```lean\n-- an `R`-module structure on `M` is provided by `RestrictScalars` which is compatible\nexample : RestrictScalars R S M →ₗ[R] S := sorry\n```\nHowever, it is usually better just to add this extra structure as an argument:\n```lean\n-- an `R`-module structure on `M` and proof of its compatibility is provided by the user\nexample [Module R M] [IsScalarTower R S M] : M →ₗ[R] S := sorry\n```\nThe advantage of the second approach is that it defers the duty of providing the missing typeclasses\n`[Module R M] [IsScalarTower R S M]`. If some concrete `M` naturally carries these (as is often\nthe case) then we have avoided `RestrictScalars` entirely. If not, we can pass\n`RestrictScalars R S M` later on instead of `M`.\n\nNote that this means we almost always want to state definitions and lemmas in the language of\n`IsScalarTower` rather than `RestrictScalars`.\n\nAn example of when one might want to use `RestrictScalars` would be if one has a vector space\nover a field of characteristic zero and wishes to make use of the `ℚ`-algebra structure. "}]}