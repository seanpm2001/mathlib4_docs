{"name":"Mathlib.Tactic.Polyrith","instances":[{"typeNames":["Mathlib.Tactic.Polyrith.Poly"],"name":"Mathlib.Tactic.Polyrith.instBEqPoly","className":"BEq"},{"typeNames":["Mathlib.Tactic.Polyrith.Poly"],"name":"Mathlib.Tactic.Polyrith.instReprPoly","className":"Repr"},{"typeNames":["Mathlib.Tactic.Polyrith.Poly"],"name":"Mathlib.Tactic.Polyrith.instToFormatPoly","className":"Std.ToFormat"},{"typeNames":["Mathlib.Tactic.Polyrith.Poly"],"name":"Mathlib.Tactic.Polyrith.instToStringPoly","className":"ToString"},{"typeNames":["Mathlib.Tactic.Polyrith.Poly"],"name":"Mathlib.Tactic.Polyrith.instReprPoly_1","className":"Repr"},{"typeNames":["Mathlib.Tactic.Polyrith.Poly"],"name":"Mathlib.Tactic.Polyrith.instInhabitedPoly","className":"Inhabited"},{"typeNames":["Int","Lean.Name.mkStr1"],"name":"Mathlib.Tactic.Polyrith.instQuoteIntMkStr1","className":"Lean.Quote"},{"typeNames":["Rat","Lean.Name.mkStr1"],"name":"Mathlib.Tactic.Polyrith.instQuoteRatMkStr1","className":"Lean.Quote"},{"typeNames":["Mathlib.Tactic.Polyrith.Poly"],"name":"Mathlib.Tactic.Polyrith.instFromJsonPoly","className":"Lean.FromJson"},{"typeNames":["Mathlib.Tactic.Polyrith.SageSuccess"],"name":"Mathlib.Tactic.Polyrith.instFromJsonSageSuccess","className":"Lean.FromJson"},{"typeNames":["Mathlib.Tactic.Polyrith.SageSuccess"],"name":"Mathlib.Tactic.Polyrith.instReprSageSuccess","className":"Repr"},{"typeNames":["Mathlib.Tactic.Polyrith.SageError"],"name":"Mathlib.Tactic.Polyrith.instFromJsonSageError","className":"Lean.FromJson"},{"typeNames":["Mathlib.Tactic.Polyrith.SageResult"],"name":"Mathlib.Tactic.Polyrith.instFromJsonSageResult","className":"Lean.FromJson"}],"imports":["Init","Mathlib.Data.Rat.Basic","Mathlib.Tactic.LinearCombination"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L360-L399","name":"Mathlib.Tactic.Polyrith.«tacticPolyrithOnly[_]»","kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.«tacticPolyrithOnly[_]»","doc":"Attempts to prove polynomial equality goals through polynomial arithmetic\non the hypotheses (and additional proof terms if the user specifies them).\nIt proves the goal by generating an appropriate call to the tactic\n`linear_combination`. If this call succeeds, the call to `linear_combination`\nis suggested to the user.\n\n* `polyrith` will use all relevant hypotheses in the local context.\n* `polyrith [t1, t2, t3]` will add proof terms t1, t2, t3 to the local context.\n* `polyrith only [h1, h2, h3, t1, t2, t3]` will use only local hypotheses\n  `h1`, `h2`, `h3`, and proofs `t1`, `t2`, `t3`. It will ignore the rest of the local context.\n\nNotes:\n* This tactic only works with a working internet connection, since it calls Sage\n  using the SageCell web API at <https://sagecell.sagemath.org/>.\n  Many thanks to the Sage team and organization for allowing this use.\n* This tactic assumes that the user has `python3` installed and available on the path.\n  (Test by opening a terminal and executing `python3 --version`.)\n  It also assumes that the `requests` library is installed: `python3 -m pip install requests`.\n\nExamples:\n\n```lean\nexample (x y : ℚ) (h1 : x*y + 2*x = 1) (h2 : x = y) :\n  x*y = -2*y + 1 :=\nby polyrith\n-- Try this: linear_combination h1 - 2 * h2\n\nexample (x y z w : ℚ) (hzw : z = w) : x*z + 2*y*z = x*w + 2*y*w :=\nby polyrith\n-- Try this: linear_combination (2 * y + x) * hzw\n\nconstant scary : ∀ a b : ℚ, a + b = 0\n\nexample (a b c d : ℚ) (h : a + b = 0) (h2: b + c = 0) : a + b + c + d = 0 :=\nby polyrith only [scary c d, h]\n-- Try this: linear_combination scary c d + h\n```\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L324-L329","name":"Mathlib.Tactic.Polyrith.polyrith.byRing","kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.polyrith.byRing","doc":"Try to prove the goal by `ring` and fail with the given message otherwise. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L317-L358","name":"Mathlib.Tactic.Polyrith.polyrith","kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.polyrith","doc":"This is the main body of the `polyrith` tactic. It takes in the following inputs:\n* `only : Bool` - This represents whether the user used the key word \"only\"\n* `hyps : Array Expr` - the hypotheses/proof terms selected by the user\n* `traceOnly : Bool` - If enabled, the returned syntax will be `.missing`\n\nFirst, the tactic converts the target into a `Poly`, and finds out what type it\nis an equality of. (It also fills up a list of `Expr`s with its atoms). Then, it\ncollects all the relevant hypotheses/proof terms from the context, and from those\nselected by the user, taking into account whether `only` is true. (The list of atoms is\nupdated accordingly as well).\n\nThis information is used to create a list of args that get used in a call to\nthe appropriate python file that executes a grobner basis computation. The\noutput of this computation is a `String` representing the certificate. This\nstring is parsed into a list of `Poly` objects that are then converted into\n`Expr`s (using the updated list of atoms).\n\nthe names of the hypotheses, along with the corresponding coefficients are\ngiven to `linear_combination`. If that tactic succeeds, the user is prompted\nto replace the call to `polyrith` with the appropriate call to\n`linear_combination`.\n\nReturns `.error g` if this was a \"dry run\" attempt that does not actually invoke sage.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L283-L290","name":"Mathlib.Tactic.Polyrith.sageOutput","kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.sageOutput","doc":"This tactic calls python from the command line with the args in `arg_list`.\nThe output printed to the console is parsed as a `Json`.\nIt assumes that `python3` is available on the path.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L272-L276","name":"Mathlib.Tactic.Polyrith.instFromJsonSageResult","kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instFromJsonSageResult","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L270-L270","name":"Mathlib.Tactic.Polyrith.SageResult","kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageResult","doc":"The result of a sage call. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L267-L267","name":"Mathlib.Tactic.Polyrith.instFromJsonSageError","kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instFromJsonSageError","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L266-L266","name":"Mathlib.Tactic.Polyrith.SageError.value","kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageError.value","doc":"The error message "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L264-L264","name":"Mathlib.Tactic.Polyrith.SageError.name","kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageError.name","doc":"The error kind "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L262-L267","name":"Mathlib.Tactic.Polyrith.SageError","kind":"structure","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageError","doc":"The result of a sage call in the failure case. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L259-L259","name":"Mathlib.Tactic.Polyrith.instReprSageSuccess","kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instReprSageSuccess","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L259-L259","name":"Mathlib.Tactic.Polyrith.instFromJsonSageSuccess","kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instFromJsonSageSuccess","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L258-L258","name":"Mathlib.Tactic.Polyrith.SageSuccess.data","kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageSuccess.data","doc":"The main result of the function call is an array of polynomials\nparallel to the input list of hypotheses. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L255-L255","name":"Mathlib.Tactic.Polyrith.SageSuccess.trace","kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageSuccess.trace","doc":"The script returns a string containing python script to be sent to the remote server,\nwhen the tracing option is set. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L252-L259","name":"Mathlib.Tactic.Polyrith.SageSuccess","kind":"structure","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageSuccess","doc":"The result of a sage call in the success case. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L243-L249","name":"Mathlib.Tactic.Polyrith.instFromJsonPoly","kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instFromJsonPoly","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L240-L241","name":"Mathlib.Tactic.Polyrith.Poly.sumM","kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.sumM","doc":"Constructs a sum from a monadic function supplying the monomials. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L234-L237","name":"Mathlib.Tactic.Polyrith.Poly.pow'","kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.pow'","doc":"Constructs a power expression `v_i ^ j`, performing some simplifications in trivial cases. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L227-L231","name":"Mathlib.Tactic.Polyrith.Poly.unDiv?","kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.unDiv?","doc":"Extracts the divisor `c : ℕ` from a polynomial of the form `1/c * b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L220-L224","name":"Mathlib.Tactic.Polyrith.Poly.mul'","kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.mul'","doc":"Multiplies two polynomials, performing some simple simplifications for presentation like\n`1 * a = a`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L209-L216","name":"Mathlib.Tactic.Polyrith.Poly.add'","kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.add'","doc":"Adds two polynomials, performing some simple simplifications for presentation like\n`a + -b = a - b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L201-L205","name":"Mathlib.Tactic.Polyrith.Poly.unNeg?","kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.unNeg?","doc":"Removes an initial `-` sign from a polynomial with negative leading coefficient. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L196-L198","name":"Mathlib.Tactic.Polyrith.instFromJsonRat","kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instFromJsonRat","doc":"A JSON parser for `ℚ` specific to the return value of `polyrith_sage.py`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L190-L193","name":"Mathlib.Tactic.Polyrith.createSageArgs","kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.createSageArgs","doc":"Constructs the list of arguments to pass to the external sage script `polyrith_sage.py`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L176-L180","name":"Mathlib.Tactic.Polyrith.parseContext.processHyp","kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.parseContext.processHyp","doc":"Parses a hypothesis and adds it to the `out` list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L163-L187","name":"Mathlib.Tactic.Polyrith.parseContext","kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.parseContext","doc":"The first half of `polyrith` produces a list of arguments to be sent to Sage. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L159-L160","name":"Mathlib.Tactic.Polyrith.Source.fvar","kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Source.fvar","doc":"`fvar h` refers to hypothesis `h` from the local context. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L157-L158","name":"Mathlib.Tactic.Polyrith.Source.input","kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Source.input","doc":"`input n` refers to the `n`'th input `ai` in `polyrith [a1, ..., an]`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L156-L160","name":"Mathlib.Tactic.Polyrith.Source","kind":"inductive","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Source","doc":"The possible hypothesis sources for a polyrith proof. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L127-L153","name":"Mathlib.Tactic.Polyrith.parse","kind":"opaque","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.parse","doc":"Reifies a ring expression of type `α` as a `Poly`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L115-L124","name":"Mathlib.Tactic.Polyrith.Poly.toSyntax","kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.toSyntax","doc":"Converts a `Poly` expression into a `Syntax` suitable as an input to `linear_combination`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L108-L111","name":"Mathlib.Tactic.Polyrith.instQuoteRatMkStr1","kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instQuoteRatMkStr1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L104-L106","name":"Mathlib.Tactic.Polyrith.instQuoteIntMkStr1","kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instQuoteIntMkStr1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L102-L102","name":"Mathlib.Tactic.Polyrith.instInhabitedPoly","kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instInhabitedPoly","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L101-L101","name":"Mathlib.Tactic.Polyrith.instReprPoly_1","kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instReprPoly_1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L100-L100","name":"Mathlib.Tactic.Polyrith.instToStringPoly","kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instToStringPoly","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L99-L99","name":"Mathlib.Tactic.Polyrith.instToFormatPoly","kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instToFormatPoly","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L88-L97","name":"Mathlib.Tactic.Polyrith.Poly.format","kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.format","doc":"This converts a poly object into a string representing it. The string\nmaintains the semantic structure of the poly object.\n\nThe output of this function must be valid Python syntax, and it assumes the variables `varN` from\n`scripts/polyrith.py.`\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L79-L79","name":"Mathlib.Tactic.Polyrith.instReprPoly","kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instReprPoly","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L79-L79","name":"Mathlib.Tactic.Polyrith.instBEqPoly","kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instBEqPoly","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L78-L78","name":"Mathlib.Tactic.Polyrith.Poly.neg","kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.neg","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L77-L77","name":"Mathlib.Tactic.Polyrith.Poly.pow","kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.pow","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L76-L76","name":"Mathlib.Tactic.Polyrith.Poly.div","kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.div","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L75-L75","name":"Mathlib.Tactic.Polyrith.Poly.mul","kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.mul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L74-L74","name":"Mathlib.Tactic.Polyrith.Poly.sub","kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.sub","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L73-L73","name":"Mathlib.Tactic.Polyrith.Poly.add","kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.add","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L72-L72","name":"Mathlib.Tactic.Polyrith.Poly.hyp","kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.hyp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L71-L71","name":"Mathlib.Tactic.Polyrith.Poly.var","kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.var","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L70-L70","name":"Mathlib.Tactic.Polyrith.Poly.const","kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.const","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L69-L79","name":"Mathlib.Tactic.Polyrith.Poly","kind":"inductive","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly","doc":"A datatype representing the semantics of multivariable polynomials.\nEach `poly` can be converted into a string.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L1-L1","name":"Mathlib.Tactic.Polyrith.SageSuccess.mk","kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageSuccess.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Polyrith.lean#L1-L1","name":"Mathlib.Tactic.Polyrith.SageError.mk","kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageError.mk","doc":""}]}