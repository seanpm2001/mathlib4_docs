{"name":"Mathlib.Data.Opposite","instances":[{"typeNames":["Opposite"],"name":"Opposite.instInhabitedOpposite","className":"Inhabited"}],"imports":["Init","Mathlib.Logic.Equiv.Defs"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Opposite.lean#L120-L120","name":"Opposite.rec'","kind":"def","docLink":"./Mathlib/Data/Opposite.html#Opposite.rec'","doc":"A recursor for `Opposite`.\nThe `@[eliminator]` attribute makes it the default induction principle for `Opposite`\nso you don't need to use `induction x using Opposite.rec'`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Opposite.lean#L113-L114","name":"Opposite.instInhabitedOpposite","kind":"instance","docLink":"./Mathlib/Data/Opposite.html#Opposite.instInhabitedOpposite","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Opposite.lean#L109-L110","name":"Opposite.unop_eq_iff_eq_op","kind":"theorem","docLink":"./Mathlib/Data/Opposite.html#Opposite.unop_eq_iff_eq_op","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Opposite.lean#L105-L106","name":"Opposite.op_eq_iff_eq_unop","kind":"theorem","docLink":"./Mathlib/Data/Opposite.html#Opposite.op_eq_iff_eq_unop","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Opposite.lean#L101-L102","name":"Opposite.equivToOpposite_symm_coe","kind":"theorem","docLink":"./Mathlib/Data/Opposite.html#Opposite.equivToOpposite_symm_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Opposite.lean#L96-L97","name":"Opposite.equivToOpposite_coe","kind":"theorem","docLink":"./Mathlib/Data/Opposite.html#Opposite.equivToOpposite_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Opposite.lean#L88-L92","name":"Opposite.equivToOpposite","kind":"def","docLink":"./Mathlib/Data/Opposite.html#Opposite.equivToOpposite","doc":"The type-level equivalence between a type and its opposite. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Opposite.lean#L83-L84","name":"Opposite.unop_inj_iff","kind":"theorem","docLink":"./Mathlib/Data/Opposite.html#Opposite.unop_inj_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Opposite.lean#L78-L79","name":"Opposite.op_inj_iff","kind":"theorem","docLink":"./Mathlib/Data/Opposite.html#Opposite.op_inj_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Opposite.lean#L71-L72","name":"Opposite.unop_op","kind":"theorem","docLink":"./Mathlib/Data/Opposite.html#Opposite.unop_op","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Opposite.lean#L66-L67","name":"Opposite.op_unop","kind":"theorem","docLink":"./Mathlib/Data/Opposite.html#Opposite.op_unop","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Opposite.lean#L62-L62","name":"Opposite.unop_injective","kind":"theorem","docLink":"./Mathlib/Data/Opposite.html#Opposite.unop_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Opposite.lean#L59-L59","name":"Opposite.op_injective","kind":"theorem","docLink":"./Mathlib/Data/Opposite.html#Opposite.op_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Opposite.lean#L56-L56","name":"Opposite.op","kind":"def","docLink":"./Mathlib/Data/Opposite.html#Opposite.op","doc":"The canonical map `α → αᵒᵖ`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Opposite.lean#L44-L47","name":"«term_ᵒᵖ»","kind":"def","docLink":"./Mathlib/Data/Opposite.html#«term_ᵒᵖ»","doc":"The type of objects of the opposite of `α`; used to define the opposite category.\n\nNow that Lean 4 supports definitional eta equality for records,\nboth `unop (op X) = X` and `op (unop X) = X` are definitional equalities.\n\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Opposite.lean#L40-L40","name":"Opposite.unop","kind":"def","docLink":"./Mathlib/Data/Opposite.html#Opposite.unop","doc":"The canonical map `αᵒᵖ → α`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Opposite.lean#L38-L40","name":"Opposite","kind":"structure","docLink":"./Mathlib/Data/Opposite.html#Opposite","doc":"The type of objects of the opposite of `α`; used to define the opposite category.\n\nNow that Lean 4 supports definitional eta equality for records,\nboth `unop (op X) = X` and `op (unop X) = X` are definitional equalities.\n\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Opposite.lean#L1-L1","name":"Opposite.mk","kind":"ctor","docLink":"./Mathlib/Data/Opposite.html#Opposite.mk","doc":""}]}