{"name":"Mathlib.CategoryTheory.Preadditive.Projective","instances":[{"typeNames":["OfNat.ofNat","Zero.toOfNat0","CategoryTheory.Limits.HasZeroObject.zero'"],"name":"CategoryTheory.Projective.zero_projective","className":"CategoryTheory.Projective"},{"typeNames":["_builtin_typeu","CategoryTheory.types"],"name":"CategoryTheory.Projective.instProjectiveTypeTypes","className":"CategoryTheory.Projective"},{"typeNames":["_builtin_typeu","CategoryTheory.types"],"name":"CategoryTheory.Projective.Type.enoughProjectives","className":"CategoryTheory.EnoughProjectives"},{"typeNames":["CategoryTheory.Limits.coprod"],"name":"CategoryTheory.Projective.instProjectiveCoprod","className":"CategoryTheory.Projective"},{"typeNames":["CategoryTheory.Limits.sigmaObj"],"name":"CategoryTheory.Projective.instProjectiveSigmaObj","className":"CategoryTheory.Projective"},{"typeNames":["CategoryTheory.Limits.biprod"],"name":"CategoryTheory.Projective.instProjectiveBiprod","className":"CategoryTheory.Projective"},{"typeNames":["CategoryTheory.Limits.biproduct"],"name":"CategoryTheory.Projective.instProjectiveBiproduct","className":"CategoryTheory.Projective"},{"typeNames":["CategoryTheory.Projective.over"],"name":"CategoryTheory.Projective.projective_over","className":"CategoryTheory.Projective"},{"typeNames":["CategoryTheory.Projective.over","CategoryTheory.Projective.π"],"name":"CategoryTheory.Projective.π_epi","className":"CategoryTheory.Epi"},{"typeNames":["CategoryTheory.Projective.syzygies"],"name":"CategoryTheory.Projective.instProjectiveSyzygies","className":"CategoryTheory.Projective"}],"imports":["Init","Mathlib.Algebra.Homology.Exact","Mathlib.CategoryTheory.Limits.Shapes.Biproducts","Mathlib.CategoryTheory.Adjunction.Limits","Mathlib.CategoryTheory.Limits.Preserves.Finite"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L283-L293","name":"CategoryTheory.Exact.lift_comp","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Exact.lift_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L274-L279","name":"CategoryTheory.Exact.lift","kind":"def","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Exact.lift","doc":"Given a projective object `P` mapping via `h` into\nthe middle object `R` of a pair of exact morphisms `f : Q ⟶ R` and `g : R ⟶ S`,\nsuch that `h ≫ g = 0`, there is a lift of `h` to `Q`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L253-L259","name":"CategoryTheory.Equivalence.enoughProjectives_iff","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Equivalence.enoughProjectives_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L245-L250","name":"CategoryTheory.Equivalence.projectivePresentationOfMapProjectivePresentation","kind":"def","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Equivalence.projectivePresentationOfMapProjectivePresentation","doc":"Given an equivalence of categories `F`, a projective presentation of `F(X)` induces a\nprojective presentation of `X.` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L229-L234","name":"CategoryTheory.Adjunction.mapProjectivePresentation","kind":"def","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Adjunction.mapProjectivePresentation","doc":"Given an adjunction `F ⊣ G` such that `G` preserves epis, `F` maps a projective presentation of\n`X` to a projective presentation of `F(X)`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L217-L224","name":"CategoryTheory.Adjunction.projective_of_map_projective","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Adjunction.projective_of_map_projective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L208-L214","name":"CategoryTheory.Adjunction.map_projective","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Adjunction.map_projective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L194-L195","name":"CategoryTheory.Projective.d","kind":"def","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective.d","doc":"When `C` has enough projectives,\n`projective.d f : projective.syzygies f ⟶ X` is the composition\n`π (kernel f) ≫ kernel.ι f`.\n\n(When `C` is abelian, we have `exact (projective.d f) f`.)\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L186-L186","name":"CategoryTheory.Projective.instProjectiveSyzygies","kind":"instance","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective.instProjectiveSyzygies","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L183-L183","name":"CategoryTheory.Projective.syzygies","kind":"def","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective.syzygies","doc":"When `C` has enough projectives, the object `projective.syzygies f` is\nan arbitrarily chosen projective object over `kernel f`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L172-L173","name":"CategoryTheory.Projective.π_epi","kind":"instance","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective.π_epi","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L168-L169","name":"CategoryTheory.Projective.π","kind":"def","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective.π","doc":"The epimorphism `projective.π : projective.over X ⟶ X`\nfrom the arbitrarily chosen projective object over `X`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L161-L162","name":"CategoryTheory.Projective.projective_over","kind":"instance","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective.projective_over","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L157-L158","name":"CategoryTheory.Projective.over","kind":"def","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective.over","doc":"`Projective.over X` provides an arbitrarily chosen projective object equipped with\nan epimorphism `Projective.π : Projective.over X ⟶ X`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L138-L147","name":"CategoryTheory.Projective.projective_iff_preservesEpimorphisms_coyoneda_obj","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective.projective_iff_preservesEpimorphisms_coyoneda_obj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L134-L136","name":"CategoryTheory.Projective.instProjectiveBiproduct","kind":"instance","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective.instProjectiveBiproduct","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L129-L132","name":"CategoryTheory.Projective.instProjectiveBiprod","kind":"instance","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective.instProjectiveBiprod","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L126-L127","name":"CategoryTheory.Projective.instProjectiveSigmaObj","kind":"instance","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective.instProjectiveSigmaObj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L122-L124","name":"CategoryTheory.Projective.instProjectiveCoprod","kind":"instance","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective.instProjectiveCoprod","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L118-L119","name":"CategoryTheory.Projective.Type.enoughProjectives","kind":"instance","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective.Type.enoughProjectives","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L113-L116","name":"CategoryTheory.Projective.instProjectiveTypeTypes","kind":"instance","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective.instProjectiveTypeTypes","doc":"The axiom of choice says that every type is a projective object in `Type`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L108-L109","name":"CategoryTheory.Projective.iso_iff","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective.iso_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L102-L105","name":"CategoryTheory.Projective.of_iso","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective.of_iso","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L96-L97","name":"CategoryTheory.Projective.zero_projective","kind":"instance","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective.zero_projective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L87-L89","name":"CategoryTheory.Projective.factorThru_comp","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective.factorThru_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L82-L83","name":"CategoryTheory.Projective.factorThru","kind":"def","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective.factorThru","doc":"An arbitrarily chosen factorisation of a morphism out of a projective object through an epimorphism.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L72-L72","name":"CategoryTheory.EnoughProjectives.presentation","kind":"def","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.EnoughProjectives.presentation","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L71-L72","name":"CategoryTheory.EnoughProjectives","kind":"class","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.EnoughProjectives","doc":"A category \"has enough projectives\" if for every object `X` there is a projective object `P` and\nan epimorphism `P ↠ X`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L62-L62","name":"CategoryTheory.ProjectivePresentation.epi","kind":"def","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.ProjectivePresentation.epi","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L61-L61","name":"CategoryTheory.ProjectivePresentation.f","kind":"def","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.ProjectivePresentation.f","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L60-L60","name":"CategoryTheory.ProjectivePresentation.projective","kind":"def","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.ProjectivePresentation.projective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L59-L59","name":"CategoryTheory.ProjectivePresentation.p","kind":"def","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.ProjectivePresentation.p","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L58-L58","name":"CategoryTheory.ProjectivePresentation.mk","kind":"ctor","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.ProjectivePresentation.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L58-L62","name":"CategoryTheory.ProjectivePresentation","kind":"structure","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.ProjectivePresentation","doc":"A projective presentation of an object `X` consists of an epimorphism `f : P ⟶ X`\nfrom some projective object `P`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L49-L49","name":"CategoryTheory.Projective.factors","kind":"def","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective.factors","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L48-L48","name":"CategoryTheory.Projective.mk","kind":"ctor","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L48-L49","name":"CategoryTheory.Projective","kind":"class","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective","doc":"An object `P` is called *projective* if every morphism out of `P` factors through every epimorphism.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Preadditive/Projective.lean#L1-L1","name":"CategoryTheory.EnoughProjectives.mk","kind":"ctor","docLink":"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.EnoughProjectives.mk","doc":""}]}