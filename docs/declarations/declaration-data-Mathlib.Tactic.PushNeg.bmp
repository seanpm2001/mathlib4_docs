{"name":"Mathlib.Tactic.PushNeg","instances":[],"imports":["Init","Lean","Mathlib.Lean.Expr","Mathlib.Logic.Basic","Mathlib.Init.Algebra.Order","Mathlib.Tactic.Conv"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L165-L193","name":"Mathlib.Tactic.PushNeg.tacticPush_neg_","kind":"def","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.tacticPush_neg_","doc":"Push negations into the conclusion of a hypothesis.\nFor instance, a hypothesis `h : ¬ ∀ x, ∃ y, x ≤ y` will be transformed by `push_neg at h` into\n`h : ∃ x, ∀ y, y < x`. Variable names are conserved.\nThis tactic pushes negations inside expressions. For instance, given a hypothesis\n```lean\nh : ¬ ∀ ε > 0, ∃ δ > 0, ∀ x, |x - x₀| ≤ δ → |f x - y₀| ≤ ε)\n```\nwriting `push_neg at h` will turn `h` into\n```lean\nh : ∃ ε, ε > 0 ∧ ∀ δ, δ > 0 → (∃ x, |x - x₀| ≤ δ ∧ ε < |f x - y₀|),\n```\n(The pretty printer does *not* use the abbreviations `∀ δ > 0` and `∃ ε > 0` but this issue\nhas nothing to do with `push_neg`).\n\nNote that names are conserved by this tactic, contrary to what would happen with `simp`\nusing the relevant lemmas. One can also use this tactic at the goal using `push_neg`,\nat every hypothesis and the goal using `push_neg at *` or at selected hypotheses and the goal\nusing say `push_neg at h h' ⊢` as usual.\n\nThis tactic has two modes: in standard mode, it transforms `¬(p ∧ q)` into `p → ¬q`, whereas in\ndistrib mode it produces `¬p ∨ ¬q`. To use distrib mode, use `set_option push_neg.use_distrib true`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L156-L163","name":"Mathlib.Tactic.PushNeg.pushNegLocalDecl","kind":"def","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.pushNegLocalDecl","doc":"Execute main loop of `push_neg` at a local hypothesis. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L150-L153","name":"Mathlib.Tactic.PushNeg.pushNegTarget","kind":"def","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.pushNegTarget","doc":"Execute main loop of `push_neg` at the main goal. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L147-L147","name":"Mathlib.Tactic.PushNeg.pushNeg","kind":"def","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.pushNeg","doc":"The syntax is `#push_neg e`, where `e` is an expression,\nwhich will print the `push_neg` form of `e`.\n\n`#push_neg` understands local variables, so you can use them to introduce parameters.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L138-L139","name":"Mathlib.Tactic.PushNeg.elabPushNegConv","kind":"def","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.elabPushNegConv","doc":"Execute `push_neg` as a conv tactic. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L114-L135","name":"Mathlib.Tactic.PushNeg.pushNegConv","kind":"def","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.pushNegConv","doc":"Push negations into the conclusion of an expression.\nFor instance, an expression `¬ ∀ x, ∃ y, x ≤ y` will be transformed by `push_neg` into\n`∃ x, ∀ y, y < x`. Variable names are conserved.\nThis tactic pushes negations inside expressions. For instance, given a hypothesis\n```lean\n| ¬ ∀ ε > 0, ∃ δ > 0, ∀ x, |x - x₀| ≤ δ → |f x - y₀| ≤ ε)\n```\nwriting `push_neg` will turn the target into\n```lean\n| ∃ ε, ε > 0 ∧ ∀ δ, δ > 0 → (∃ x, |x - x₀| ≤ δ ∧ ε < |f x - y₀|),\n```\n(The pretty printer does *not* use the abbreviations `∀ δ > 0` and `∃ ε > 0` but this issue\nhas nothing to do with `push_neg`).\n\nNote that names are conserved by this tactic, contrary to what would happen with `simp`\nusing the relevant lemmas.\n\nThis tactic has two modes: in standard mode, it transforms `¬(p ∧ q)` into `p → ¬q`, whereas in\ndistrib mode it produces `¬p ∨ ¬q`. To use distrib mode, use `set_option push_neg.use_distrib true`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L107-L112","name":"Mathlib.Tactic.PushNeg.pushNegCore","kind":"def","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.pushNegCore","doc":"Common entry point to `push_neg` as a conv. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L98-L104","name":"Mathlib.Tactic.PushNeg.transformNegation","kind":"opaque","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.transformNegation","doc":"Recursively push negations at the top level of the current expression. This is needed\nto handle e.g. triple negation. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L43-L94","name":"Mathlib.Tactic.PushNeg.transformNegationStep","kind":"def","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.transformNegationStep","doc":"Push negations at the top level of the current expression. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L36-L40","name":"Mathlib.Tactic.PushNeg.push_neg.use_distrib","kind":"opaque","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.push_neg.use_distrib","doc":"Make `push_neg` use `not_and_or` rather than the default `not_and`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L34-L34","name":"Mathlib.Tactic.PushNeg.not_gt_eq","kind":"theorem","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.not_gt_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L33-L33","name":"Mathlib.Tactic.PushNeg.not_ge_eq","kind":"theorem","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.not_ge_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L32-L32","name":"Mathlib.Tactic.PushNeg.not_lt_eq","kind":"theorem","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.not_lt_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L31-L31","name":"Mathlib.Tactic.PushNeg.not_le_eq","kind":"theorem","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.not_le_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L27-L28","name":"Mathlib.Tactic.PushNeg.not_iff","kind":"theorem","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.not_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L26-L26","name":"Mathlib.Tactic.PushNeg.not_ne_eq","kind":"theorem","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.not_ne_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L25-L25","name":"Mathlib.Tactic.PushNeg.not_implies_eq","kind":"theorem","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.not_implies_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L24-L24","name":"Mathlib.Tactic.PushNeg.not_exists_eq","kind":"theorem","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.not_exists_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L23-L23","name":"Mathlib.Tactic.PushNeg.not_forall_eq","kind":"theorem","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.not_forall_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L22-L22","name":"Mathlib.Tactic.PushNeg.not_or_eq","kind":"theorem","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.not_or_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L21-L21","name":"Mathlib.Tactic.PushNeg.not_and_or_eq","kind":"theorem","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.not_and_or_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L20-L20","name":"Mathlib.Tactic.PushNeg.not_and_eq","kind":"theorem","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.not_and_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/PushNeg.lean#L19-L19","name":"Mathlib.Tactic.PushNeg.not_not_eq","kind":"theorem","docLink":"./Mathlib/Tactic/PushNeg.html#Mathlib.Tactic.PushNeg.not_not_eq","doc":""}]}