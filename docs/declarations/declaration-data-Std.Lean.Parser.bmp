{"name":"Std.Lean.Parser","instances":[],"imports":["Init"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Parser.lean#L35-L37","name":"Lean.Parser.Tactic.getDSimpArgs?","kind":"def","docLink":"./Std/Lean/Parser.html#Lean.Parser.Tactic.getDSimpArgs?","doc":"Extract the arguments from a `dsimpArgs` syntax as an array of syntaxes "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Parser.lean#L31-L32","name":"Lean.Parser.Tactic.dsimpArgs","kind":"def","docLink":"./Std/Lean/Parser.html#Lean.Parser.Tactic.dsimpArgs","doc":"A dsimp args list is a list of `dsimpArg`. This is the main argument to `dsimp`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Parser.lean#L29-L29","name":"Lean.Parser.Tactic.dsimpArg","kind":"def","docLink":"./Std/Lean/Parser.html#Lean.Parser.Tactic.dsimpArg","doc":"A `dsimpArg` is similar to `simpArg`, but it does not have the `simpStar` form\nbecause it does not make sense to use hypotheses in `dsimp`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Parser.lean#L20-L22","name":"Lean.Parser.Tactic.getSimpArgs?","kind":"def","docLink":"./Std/Lean/Parser.html#Lean.Parser.Tactic.getSimpArgs?","doc":"Extract the arguments from a `simpArgs` syntax as an array of syntaxes "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Parser.lean#L16-L17","name":"Lean.Parser.Tactic.simpArgs","kind":"def","docLink":"./Std/Lean/Parser.html#Lean.Parser.Tactic.simpArgs","doc":"A simp args list is a list of `simpArg`. This is the main argument to `simp`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Parser.lean#L14-L14","name":"Lean.Parser.Tactic.simpArg","kind":"def","docLink":"./Std/Lean/Parser.html#Lean.Parser.Tactic.simpArg","doc":"A `simpArg` is either a `*`, `-lemma` or a simp lemma specification\n(which includes the `↑` `↓` `←` specifications for pre, post, reverse rewriting).\n"}]}