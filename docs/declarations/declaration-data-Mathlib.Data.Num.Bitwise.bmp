{"name":"Mathlib.Data.Num.Bitwise","instances":[{"typeNames":["Eq","NzsNum"],"name":"instDecidableEqNzsNum","className":"Decidable"},{"typeNames":["Eq","SNum"],"name":"instDecidableEqSNum","className":"Decidable"},{"typeNames":["NzsNum","SNum"],"name":"instCoeNzsNumSNum","className":"Coe"},{"typeNames":["SNum"],"name":"instZeroSNum","className":"Zero"},{"typeNames":["NzsNum"],"name":"instOneNzsNum","className":"One"},{"typeNames":["SNum"],"name":"instOneSNum","className":"One"},{"typeNames":["NzsNum"],"name":"instInhabitedNzsNum","className":"Inhabited"},{"typeNames":["SNum"],"name":"instInhabitedSNum","className":"Inhabited"},{"typeNames":["SNum"],"name":"SNum.instNegSNum","className":"Neg"},{"typeNames":["SNum"],"name":"SNum.instAddSNum","className":"Add"},{"typeNames":["SNum"],"name":"SNum.instSubSNum","className":"Sub"},{"typeNames":["SNum"],"name":"SNum.instMulSNum","className":"Mul"}],"imports":["Init","Mathlib.Data.Num.Basic","Mathlib.Data.Bitvec.Defs"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L453-L454","name":"SNum.instMulSNum","kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.instMulSNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L449-L450","name":"SNum.mul","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.mul","doc":"Multiply two `SNum`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L445-L446","name":"SNum.instSubSNum","kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.instSubSNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L441-L442","name":"SNum.sub","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.sub","doc":"Subtract two `SNum`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L437-L438","name":"SNum.instAddSNum","kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.instAddSNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L433-L434","name":"SNum.add","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.add","doc":"Add two `SNum`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L427-L429","name":"SNum.cAdd","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.cAdd","doc":"`SNum.cAdd n m a` is `n + m + a` (where `a` should be read as either 0 or 1).\n`a` represents a carry bit. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L420-L422","name":"SNum.bits","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.bits","doc":"`a.bits n` is the vector of the `n` first bits of `a` (starting from the LSB). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L408-L412","name":"SNum.czAdd","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.czAdd","doc":"`SNum.czAdd a b n` is `n + a - b` (where `a` and `b` should be read as either 0 or 1).\nThis is useful to implement the carry system in `cAdd`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L403-L404","name":"SNum.instNegSNum","kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.instNegSNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L399-L400","name":"SNum.neg","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.neg","doc":"The opposite of a `SNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L394-L395","name":"SNum.pred","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.pred","doc":"The predecessor of a `SNum` (i.e. the operation of removing one). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L389-L390","name":"SNum.succ","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.succ","doc":"The successor of a `SNum` (i.e. the operation adding one). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L383-L385","name":"SNum.testBit","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.testBit","doc":"`SNum.testBit n a` is `true` iff the `n`-th bit (starting from the LSB) of `a` is active.\nIf the size of `a` is less than `n`, this evaluates to `false`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L377-L378","name":"SNum.rec'","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.rec'","doc":"An induction principle for `SNum` which avoids relying on `NzsNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L371-L373","name":"SNum.drec'","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.drec'","doc":"A dependent induction principle for `SNum` which avoids relying on `NzsNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L365-L367","name":"SNum.tail","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.tail","doc":"The `tail` of a `SNum` is obtained by removing the LSB.\nEdge cases: `tail 1 = 0`, `tail (-2) = -1`, `tail 0 = 0` and `tail (-1) = -1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L358-L360","name":"SNum.head","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.head","doc":"The `head` of a `SNum` is the boolean value of its LSB. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L345-L348","name":"NzsNum.drec'","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.drec'","doc":"A dependent induction principle for `NzsNum`, with base cases\n`0 : SNum` and `(-1) : SNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L334-L334","name":"SNum.bit_one","kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.bit_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L331-L331","name":"SNum.bit_zero","kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.bit_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L327-L328","name":"SNum.bit1","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.bit1","doc":"Add an active bit at the end of a `SNum`. This mimics `ZNum.bit1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L322-L323","name":"SNum.bit0","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.bit0","doc":"Add an inactive bit at the end of a `SNum`. This mimics `ZNum.bit0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L318-L319","name":"SNum.«term_::_»","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.«term_::_»","doc":"Add a bit at the end of a `SNum`. This mimics `NzsNum.bit`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L312-L314","name":"SNum.bit","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.bit","doc":"Add a bit at the end of a `SNum`. This mimics `NzsNum.bit`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L307-L308","name":"SNum.«term~_»","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.«term~_»","doc":"Bitwise `not` for `SNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L300-L302","name":"SNum.not","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.not","doc":"Bitwise `not` for `SNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L293-L295","name":"SNum.sign","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.sign","doc":"Sign of a `SNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L281-L283","name":"NzsNum.tail","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.tail","doc":"The `tail` of a `NzsNum` is the `SNum` obtained by removing the LSB.\nEdge cases: `tail 1 = 0` and `tail (-2) = -1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L274-L276","name":"NzsNum.head","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.head","doc":"The `head` of a `NzsNum` is the boolean value of its LSB. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L269-L270","name":"NzsNum.bit1","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.bit1","doc":"Add an active bit at the end of a `NzsNum`. This mimics `PosNum.bit1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L264-L265","name":"NzsNum.bit0","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.bit0","doc":"Add an inactive bit at the end of a `NzsNum`. This mimics `PosNum.bit0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L260-L261","name":"NzsNum.«term~_»","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.«term~_»","doc":"Bitwise `not` for `NzsNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L254-L256","name":"NzsNum.not","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.not","doc":"Bitwise `not` for `NzsNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L247-L249","name":"NzsNum.sign","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.sign","doc":"Sign of a `NzsNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L243-L244","name":"NzsNum.«term_::_»","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.«term_::_»","doc":"Add a bit at the end of a `NzsNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L231-L232","name":"instInhabitedSNum","kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instInhabitedSNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L228-L229","name":"instInhabitedNzsNum","kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instInhabitedNzsNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L225-L226","name":"instOneSNum","kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instOneSNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L222-L223","name":"instOneNzsNum","kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instOneNzsNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L219-L220","name":"instZeroSNum","kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instZeroSNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L216-L217","name":"instCoeNzsNumSNum","kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instCoeNzsNumSNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L213-L213","name":"instDecidableEqSNum","kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instDecidableEqSNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L212-L212","name":"SNum.nz","kind":"ctor","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.nz","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L211-L211","name":"SNum.zero","kind":"ctor","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L210-L213","name":"SNum","kind":"inductive","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum","doc":"Alternative representation of integers using a sign bit at the end.\nThe convention on sign here is to have the argument to `msb` denote\nthe sign of the MSB itself, with all higher bits set to the negation\nof this sign. The result is interpreted in two's complement.\n\n   13  = ..0001101(base 2) = nz (bit1 (bit0 (bit1 (msb true))))\n   -13 = ..1110011(base 2) = nz (bit1 (bit1 (bit0 (msb false))))\n\nAs with `Num`, a special case must be added for zero, which has no msb,\nbut by two's complement symmetry there is a second special case for -1.\nHere the `Bool` field indicates the sign of the number.\n\n   0  = ..0000000(base 2) = zero false\n   -1 = ..1111111(base 2) = zero true "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L193-L193","name":"instDecidableEqNzsNum","kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instDecidableEqNzsNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L191-L192","name":"NzsNum.bit","kind":"ctor","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.bit","doc":"Add a bit at the end of a `NzsNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L190-L190","name":"NzsNum.msb","kind":"ctor","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.msb","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L189-L193","name":"NzsNum","kind":"inductive","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum","doc":"This is a nonzero (and \"non minus one\") version of `SNum`.\nSee the documentation of `SNum` for more details. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L180-L182","name":"Num.oneBits","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.oneBits","doc":"`n.oneBits` is the list of indices of active bits in the binary representation of `n`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L174-L176","name":"Num.testBit","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.testBit","doc":"`a.testBit n` is `true` iff the `n`-th bit (starting from the LSB) in the binary representation\nof `a` is active. If the size of `a` is less than `n`, this evaluates to `false`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L167-L169","name":"Num.shiftr","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.shiftr","doc":"Right-shift the binary representation of a `Num`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L161-L163","name":"Num.shiftl","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.shiftl","doc":"Left-shift the binary representation of a `Num`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L154-L157","name":"Num.lxor","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.lxor","doc":"Bitwise \"xor\" for `Num`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L147-L150","name":"Num.ldiff","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.ldiff","doc":"Bitwise `fun a b ↦ a && !b` for `Num`. For example, `ldiff 5 9 = 4`:\n```\n 101\n1001\n----\n 100\n```\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L133-L136","name":"Num.land","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.land","doc":"Bitwise \"and\" for `Num`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L126-L129","name":"Num.lor","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.lor","doc":"Bitwise \"or\" for `Num`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L114-L118","name":"PosNum.shiftr","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftr","doc":"Right-shift the binary representation of a `PosNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L109-L111","name":"PosNum.shiftl_succ_eq_bit0_shiftl","kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftl_succ_eq_bit0_shiftl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L102-L104","name":"PosNum.shiftl","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftl","doc":"Left-shift the binary representation of a `PosNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L95-L98","name":"PosNum.oneBits","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.oneBits","doc":"`n.oneBits 0` is the list of indices of active bits in the binary representation of `n`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L85-L91","name":"PosNum.testBit","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.testBit","doc":"`a.testBit n` is `true` iff the `n`-th bit (starting from the LSB) in the binary representation\nof `a` is active. If the size of `a` is less than `n`, this evaluates to `false`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L71-L80","name":"PosNum.lxor","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.lxor","doc":"Bitwise \"xor\" for `PosNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L59-L67","name":"PosNum.ldiff","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.ldiff","doc":"Bitwise `fun a b ↦ a && !b` for `PosNum`. For example, `ldiff 5 9 = 4`:\n```\n 101\n1001\n----\n 100\n```\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L40-L48","name":"PosNum.land","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.land","doc":"Bitwise \"and\" for `PosNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Bitwise.lean#L28-L36","name":"PosNum.lor","kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.lor","doc":"Bitwise \"or\" for `PosNum`. "}]}