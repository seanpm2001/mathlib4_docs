{"name":"Std.Tactic.Lint.Misc","instances":[],"imports":["Init","Lean.Util.CollectLevelParams","Lean.Meta.ForEachExpr","Std.Tactic.Lint.Basic","Std.Data.Array.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Misc.lean#L252-L264","name":"Std.Tactic.Lint.explicitVarsOfIff","kind":"def","docLink":"./Std/Tactic/Lint/Misc.html#Std.Tactic.Lint.explicitVarsOfIff","doc":"A linter for checking if variables appearing on both sides of an iff are explicit. Ideally, such\nvariables should be implicit instead.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Misc.lean#L226-L246","name":"Std.Tactic.Lint.unusedHavesSuffices","kind":"def","docLink":"./Std/Tactic/Lint/Misc.html#Std.Tactic.Lint.unusedHavesSuffices","doc":"A linter for checking that declarations don't have unused term mode have statements. We do not\ntag this as `@[std_linter]` so that it is not in the default linter set as it is slow and an\nuncommon problem. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Misc.lean#L212-L221","name":"Std.Tactic.Lint.findUnusedHaves","kind":"def","docLink":"./Std/Tactic/Lint/Misc.html#Std.Tactic.Lint.findUnusedHaves","doc":"Return a list of unused have/suffices/let_fun terms in an expression.\nThis actually finds all beta-redexes.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Misc.lean#L189-L206","name":"Std.Tactic.Lint.synTaut","kind":"def","docLink":"./Std/Tactic/Lint/Misc.html#Std.Tactic.Lint.synTaut","doc":"A linter for checking that declarations aren't syntactic tautologies.\nChecks whether a lemma is a declaration of the form `∀ a b ... z, e₁ = e₂`\nwhere `e₁` and `e₂` are identical exprs.\nWe call declarations of this form syntactic tautologies.\nSuch lemmas are (mostly) useless and sometimes introduced unintentionally when proving basic facts\nwith rfl when elaboration results in a different term than the user intended. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Misc.lean#L164-L181","name":"Std.Tactic.Lint.checkUnivs","kind":"def","docLink":"./Std/Tactic/Lint/Misc.html#Std.Tactic.Lint.checkUnivs","doc":"A linter for checking that there are no bad `max u v` universe levels.\nChecks whether all universe levels `u` in the type of `d` are \"good\".\nThis means that `u` either occurs in a `level` of `d` by itself, or (recursively)\nwith only other good levels.\nWhen this fails, usually this means that there is a level `max u v`, where neither `u` nor `v`\noccur by themselves in a level. It is ok if *one* of `u` or `v` never occurs alone. For example,\n`(α : Type u) (β : Type (max u v))` is a occasionally useful method of saying that `β` lives in\na higher universe level than `α`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Misc.lean#L110-L118","name":"Std.Tactic.Lint.checkType","kind":"def","docLink":"./Std/Tactic/Lint/Misc.html#Std.Tactic.Lint.checkType","doc":"A linter for checking whether statements of declarations are well-typed. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Misc.lean#L92-L107","name":"Std.Tactic.Lint.defLemma","kind":"def","docLink":"./Std/Tactic/Lint/Misc.html#Std.Tactic.Lint.defLemma","doc":"A linter for checking whether the correct declaration constructor (definition or theorem)\nhas been used. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Misc.lean#L78-L88","name":"Std.Tactic.Lint.docBlameThm","kind":"def","docLink":"./Std/Tactic/Lint/Misc.html#Std.Tactic.Lint.docBlameThm","doc":"A linter for checking theorem doc strings. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Misc.lean#L59-L75","name":"Std.Tactic.Lint.docBlame","kind":"def","docLink":"./Std/Tactic/Lint/Misc.html#Std.Tactic.Lint.docBlame","doc":"A linter for checking definition doc strings. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Misc.lean#L35-L56","name":"Std.Tactic.Lint.unusedArguments","kind":"def","docLink":"./Std/Tactic/Lint/Misc.html#Std.Tactic.Lint.unusedArguments","doc":"A linter for checking for unused arguments.\nWe skip all declarations that contain `sorry` in their value. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Misc.lean#L22-L31","name":"Std.Tactic.Lint.dupNamespace","kind":"def","docLink":"./Std/Tactic/Lint/Misc.html#Std.Tactic.Lint.dupNamespace","doc":"A linter for checking whether a declaration has a namespace twice consecutively in its name. "}]}