{"name":"Mathlib.Util.CompileInductive","instances":[],"imports":["Init","Lean.Compiler.CSimpAttr","Lean.Elab.PreDefinition","Mathlib.Tactic.RunCmd"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/CompileInductive.lean#L217-L225","name":"Mathlib.Util.«commandCompile_inductive%_»","kind":"def","docLink":"./Mathlib/Util/CompileInductive.html#Mathlib.Util.«commandCompile_inductive%_»","doc":"`compile_inductive% Foo` creates compiled code for the recursor `Foo.rec`,\nso that `Foo.rec` can be used in a definition\nwithout having to mark the definition as `noncomputable`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/CompileInductive.lean#L199-L213","name":"Mathlib.Util.compileSizeOf","kind":"opaque","docLink":"./Mathlib/Util/CompileInductive.html#Mathlib.Util.compileSizeOf","doc":"Compiles the `sizeOf` auxiliary functions. It also recursively compiles any inductives required to\ncompile the `sizeOf` definition (because `sizeOf` definitions depend on `T.rec`).\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/CompileInductive.lean#L191-L193","name":"Mathlib.Util.compileInductive","kind":"opaque","docLink":"./Mathlib/Util/CompileInductive.html#Mathlib.Util.compileInductive","doc":"Generate compiled code for the recursor for `iv`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/CompileInductive.lean#L126-L184","name":"Mathlib.Util.compileInductiveOnly","kind":"def","docLink":"./Mathlib/Util/CompileInductive.html#Mathlib.Util.compileInductiveOnly","doc":"Generate compiled code for the recursor for `iv`, excluding the `sizeOf` function.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/CompileInductive.lean#L79-L91","name":"Mathlib.Util.«commandCompile_def%_»","kind":"def","docLink":"./Mathlib/Util/CompileInductive.html#Mathlib.Util.«commandCompile_def%_»","doc":"`compile_def% Foo.foo` adds compiled code for the definition `Foo.foo`.\nThis can be used for type class projections or definitions like `List._sizeOf_1`,\nfor which Lean does not generate compiled code by default\n(since it is not used 99% of the time).\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/CompileInductive.lean#L76-L77","name":"Mathlib.Util.isCompiled","kind":"def","docLink":"./Mathlib/Util/CompileInductive.html#Mathlib.Util.isCompiled","doc":"Returns true if the given declaration has already been compiled, either directly or via a\n`@[csimp]` lemma. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/CompileInductive.lean#L53-L70","name":"Mathlib.Util.compileDefn","kind":"def","docLink":"./Mathlib/Util/CompileInductive.html#Mathlib.Util.compileDefn","doc":"Compile the definition `dv` by adding a second definition `dv✝` with the same body,\nand registering a `csimp`-lemma `dv = dv✝`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/CompileInductive.lean#L33-L39","name":"Mathlib.Util.mkRecNames","kind":"def","docLink":"./Mathlib/Util/CompileInductive.html#Mathlib.Util.mkRecNames","doc":"Returns the names of the recursors for a nested or mutual inductive,\nusing the `all` and `numMotives` arguments from `RecursorVal`. "}]}