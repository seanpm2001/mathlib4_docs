{"name":"Std.Tactic.TryThis","instances":[],"imports":["Init","Lean.Server.CodeActions","Lean.Widget.UserWidget","Std.Lean.Name","Std.Lean.Format","Std.Lean.Position"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/TryThis.lean#L146-L149","name":"Std.Tactic.TryThis.addTermSuggestion","kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.addTermSuggestion","doc":"Add a term suggestion.\n\nThe parameters are:\n* `ref`: the span of the info diagnostic\n* `e`: the replacement expression\n* `origSpan?`: a syntax object whose span is the actual text to be replaced by `suggestion`.\n  If not provided it defaults to `ref`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/TryThis.lean#L122-L136","name":"Std.Tactic.TryThis.addExactSuggestion","kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.addExactSuggestion","doc":"Add a `exact e` or `refine e` suggestion.\n\nThe parameters are:\n* `ref`: the span of the info diagnostic\n* `e`: the replacement expression\n* `origSpan?`: a syntax object whose span is the actual text to be replaced by `suggestion`.\n  If not provided it defaults to `ref`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/TryThis.lean#L94-L112","name":"Std.Tactic.TryThis.addSuggestion","kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.addSuggestion","doc":"Add a \"try this\" suggestion. This has three effects:\n\n* An info diagnostic is displayed saying `Try this: <suggestion>`\n* A widget is registered, saying `Try this: <suggestion>` with a link on `<suggestion>` to apply\n  the suggestion\n* A code action `Apply 'Try this'` is added, which will apply the suggestion.\n\nThe parameters are:\n* `ref`: the span of the info diagnostic\n* `suggestion`: the replacement syntax\n* `suggestionForMessage?`: the message to display in the info diagnostic (only).\n  The widget message uses only `suggestion`. If not provided, `suggestion` is used in both places.\n* `origSpan?`: a syntax object whose span is the actual text to be replaced by `suggestion`.\n  If not provided it defaults to `ref`.\n* `extraMsg`: an extra piece of message text to apply to the widget message (only).\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/TryThis.lean#L75-L76","name":"Std.Tactic.TryThis.delabToRefinableSyntax","kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.delabToRefinableSyntax","doc":"Delaborate `e` into an expression suitable for use in `refine`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/TryThis.lean#L68-L72","name":"Std.Tactic.TryThis.replaceMVarsByUnderscores","kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.replaceMVarsByUnderscores","doc":"Replace subexpressions like `?m.1234` with `?_` so it can be copy-pasted. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/TryThis.lean#L51-L65","name":"Std.Tactic.TryThis.tryThisProvider","kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.tryThisProvider","doc":"This is a code action provider that looks for `TryThisInfo` nodes and supplies a code action to\napply the replacement.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/TryThis.lean#L27-L45","name":"Std.Tactic.TryThis.tryThisWidget","kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.tryThisWidget","doc":"This is a widget which is placed by `TryThis.addSuggestion`; it says `Try this: <replacement>`\nwhere `<replacement>` is a link which will perform the replacement.\n"}]}