{"name":"Mathlib.Analysis.NormedSpace.PiLp","instances":[{"typeNames":["PiLp"],"name":"instInhabitedPiLp","className":"Inhabited"},{"typeNames":["PiLp"],"name":"PiLp.instEDistPiLp","className":"EDist"},{"typeNames":["PiLp"],"name":"PiLp.instDistPiLp","className":"Dist"},{"typeNames":["PiLp"],"name":"PiLp.hasNorm","className":"Norm"},{"typeNames":["PiLp"],"name":"PiLp.uniformSpace","className":"UniformSpace"},{"typeNames":["PiLp"],"name":"PiLp.bornology","className":"Bornology"},{"typeNames":["PiLp"],"name":"PiLp.instPseudoEMetricSpacePiLp","className":"PseudoEMetricSpace"},{"typeNames":["PiLp"],"name":"PiLp.instEMetricSpacePiLp","className":"EMetricSpace"},{"typeNames":["PiLp"],"name":"PiLp.instPseudoMetricSpacePiLp","className":"PseudoMetricSpace"},{"typeNames":["PiLp"],"name":"PiLp.instMetricSpacePiLp","className":"MetricSpace"},{"typeNames":["PiLp"],"name":"PiLp.seminormedAddCommGroup","className":"SeminormedAddCommGroup"},{"typeNames":["PiLp"],"name":"PiLp.normedAddCommGroup","className":"NormedAddCommGroup"},{"typeNames":["PiLp","DivisionSemiring.toSemiring","Semifield.toDivisionSemiring","Field.toSemifield","NormedField.toField","AddCommGroup.toAddCommMonoid","PiLp","SeminormedAddCommGroup.toAddCommGroup","PiLp.seminormedAddCommGroup"],"name":"PiLp.module","className":"Module"},{"typeNames":["PiLp","PiLp.seminormedAddCommGroup"],"name":"PiLp.normedSpace","className":"NormedSpace"},{"typeNames":["PiLp","SMulZeroClass.toSMul","PiLp","NegZeroClass.toZero","SubNegZeroMonoid.toNegZeroClass","SubtractionMonoid.toSubNegZeroMonoid","SubtractionCommMonoid.toSubtractionMonoid","AddCommGroup.toDivisionAddCommMonoid","SeminormedAddCommGroup.toAddCommGroup","PiLp.seminormedAddCommGroup","SMulWithZero.toSMulZeroClass","CommMonoidWithZero.toZero","CommGroupWithZero.toCommMonoidWithZero","Semifield.toCommGroupWithZero","Field.toSemifield","NormedField.toField","MulActionWithZero.toSMulWithZero","Semiring.toMonoidWithZero","DivisionSemiring.toSemiring","Semifield.toDivisionSemiring","Module.toMulActionWithZero","AddCommGroup.toAddCommMonoid","PiLp.module","SMulZeroClass.toSMul","PiLp","NegZeroClass.toZero","SubNegZeroMonoid.toNegZeroClass","SubtractionMonoid.toSubNegZeroMonoid","SubtractionCommMonoid.toSubtractionMonoid","AddCommGroup.toDivisionAddCommMonoid","SeminormedAddCommGroup.toAddCommGroup","PiLp.seminormedAddCommGroup","SMulWithZero.toSMulZeroClass","CommMonoidWithZero.toZero","CommGroupWithZero.toCommMonoidWithZero","Semifield.toCommGroupWithZero","Field.toSemifield","NormedField.toField","MulActionWithZero.toSMulWithZero","Semiring.toMonoidWithZero","DivisionSemiring.toSemiring","Semifield.toDivisionSemiring","Module.toMulActionWithZero","AddCommGroup.toAddCommMonoid","PiLp.module"],"name":"PiLp.isScalarTower","className":"IsScalarTower"},{"typeNames":["PiLp","SMulZeroClass.toSMul","PiLp","NegZeroClass.toZero","SubNegZeroMonoid.toNegZeroClass","SubtractionMonoid.toSubNegZeroMonoid","SubtractionCommMonoid.toSubtractionMonoid","AddCommGroup.toDivisionAddCommMonoid","SeminormedAddCommGroup.toAddCommGroup","PiLp.seminormedAddCommGroup","SMulWithZero.toSMulZeroClass","CommMonoidWithZero.toZero","CommGroupWithZero.toCommMonoidWithZero","Semifield.toCommGroupWithZero","Field.toSemifield","NormedField.toField","MulActionWithZero.toSMulWithZero","Semiring.toMonoidWithZero","DivisionSemiring.toSemiring","Semifield.toDivisionSemiring","Module.toMulActionWithZero","AddCommGroup.toAddCommMonoid","PiLp.module","SMulZeroClass.toSMul","PiLp","NegZeroClass.toZero","SubNegZeroMonoid.toNegZeroClass","SubtractionMonoid.toSubNegZeroMonoid","SubtractionCommMonoid.toSubtractionMonoid","AddCommGroup.toDivisionAddCommMonoid","SeminormedAddCommGroup.toAddCommGroup","PiLp.seminormedAddCommGroup","SMulWithZero.toSMulZeroClass","CommMonoidWithZero.toZero","CommGroupWithZero.toCommMonoidWithZero","Semifield.toCommGroupWithZero","Field.toSemifield","NormedField.toField","MulActionWithZero.toSMulWithZero","Semiring.toMonoidWithZero","DivisionSemiring.toSemiring","Semifield.toDivisionSemiring","Module.toMulActionWithZero","AddCommGroup.toAddCommMonoid","PiLp.module"],"name":"PiLp.smulCommClass","className":"SMulCommClass"},{"typeNames":["PiLp","NormedDivisionRing.toDivisionRing","NormedField.toNormedDivisionRing","SeminormedAddCommGroup.toAddCommGroup","PiLp","PiLp.seminormedAddCommGroup","PiLp.module"],"name":"PiLp.finiteDimensional","className":"Module.Finite"}],"imports":["Init","Mathlib.Analysis.MeanInequalities","Mathlib.Data.Fintype.Order","Mathlib.LinearAlgebra.Matrix.Basis"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L997-L1005","name":"PiLp.basis_toMatrix_basisFun_mul","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.basis_toMatrix_basisFun_mul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L990-L992","name":"PiLp.basisFun_map","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.basisFun_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L984-L986","name":"PiLp.basisFun_eq_pi_basisFun","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.basisFun_eq_pi_basisFun","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L980-L981","name":"PiLp.basisFun_equivFun","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.basisFun_equivFun","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L975-L976","name":"PiLp.basisFun_repr","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.basisFun_repr","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L969-L971","name":"PiLp.basisFun_apply","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.basisFun_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L964-L965","name":"PiLp.basisFun","kind":"def","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.basisFun","doc":"A version of `Pi.basisFun` for `PiLp`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L953-L956","name":"PiLp.continuousLinearEquiv","kind":"def","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.continuousLinearEquiv","doc":"`PiLp.equiv` as a continuous linear equivalence. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L952-L952","name":"PiLp.continuousLinearEquiv_apply","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.continuousLinearEquiv_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L952-L952","name":"PiLp.continuousLinearEquiv_symm_apply","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.continuousLinearEquiv_symm_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L945-L948","name":"PiLp.linearEquiv","kind":"def","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.linearEquiv","doc":"`PiLp.equiv` as a linear equivalence. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L944-L944","name":"PiLp.linearEquiv_symm_apply","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.linearEquiv_symm_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L944-L944","name":"PiLp.linearEquiv_apply","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.linearEquiv_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L936-L938","name":"PiLp.norm_equiv_symm_one","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.norm_equiv_symm_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L930-L933","name":"PiLp.nnnorm_equiv_symm_one","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.nnnorm_equiv_symm_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L924-L927","name":"PiLp.norm_equiv_symm_const'","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.norm_equiv_symm_const'","doc":"When `IsEmpty ι`, this lemma does not hold without the additional assumption `p ≠ ∞` because\nthe left-hand side simplifies to `0`, while the right-hand side simplifies to `‖b‖₊`. See\n`PiLp.norm_equiv_symm_const` for a version which exchanges the hypothesis `Nonempty ι`.\nfor `p ≠ ∞`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L914-L917","name":"PiLp.norm_equiv_symm_const","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.norm_equiv_symm_const","doc":"When `p = ∞`, this lemma does not hold without the additional assumption `Nonempty ι` because\nthe left-hand side simplifies to `0`, while the right-hand side simplifies to `‖b‖₊`. See\n`PiLp.norm_equiv_symm_const'` for a version which exchanges the hypothesis `p ≠ ∞` for\n`Nonempty ι`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L900-L907","name":"PiLp.nnnorm_equiv_symm_const'","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.nnnorm_equiv_symm_const'","doc":"When `IsEmpty ι`, this lemma does not hold without the additional assumption `p ≠ ∞` because\nthe left-hand side simplifies to `0`, while the right-hand side simplifies to `‖b‖₊`. See\n`PiLp.nnnorm_equiv_symm_const` for a version which exchanges the hypothesis `Nonempty ι`.\nfor `p ≠ ∞`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L885-L893","name":"PiLp.nnnorm_equiv_symm_const","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.nnnorm_equiv_symm_const","doc":"When `p = ∞`, this lemma does not hold without the additional assumption `Nonempty ι` because\nthe left-hand side simplifies to `0`, while the right-hand side simplifies to `‖b‖₊`. See\n`PiLp.nnnorm_equiv_symm_const'` for a version which exchanges the hypothesis `p ≠ ∞` for\n`Nonempty ι`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L872-L876","name":"PiLp.edist_equiv_symm_single_same","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.edist_equiv_symm_single_same","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L865-L868","name":"PiLp.dist_equiv_symm_single_same","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.dist_equiv_symm_single_same","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L857-L861","name":"PiLp.nndist_equiv_symm_single_same","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.nndist_equiv_symm_single_same","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L852-L853","name":"PiLp.norm_equiv_symm_single","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.norm_equiv_symm_single","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L828-L848","name":"PiLp.nnnorm_equiv_symm_single","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.nnnorm_equiv_symm_single","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L816-L817","name":"PiLp.equiv_symm_smul","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.equiv_symm_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L811-L812","name":"PiLp.equiv_smul","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.equiv_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L806-L807","name":"PiLp.equiv_symm_neg","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.equiv_symm_neg","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L801-L802","name":"PiLp.equiv_neg","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.equiv_neg","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L795-L797","name":"PiLp.equiv_symm_sub","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.equiv_symm_sub","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L790-L791","name":"PiLp.equiv_sub","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.equiv_sub","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L784-L786","name":"PiLp.equiv_symm_add","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.equiv_symm_add","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L779-L780","name":"PiLp.equiv_add","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.equiv_add","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L774-L775","name":"PiLp.equiv_symm_zero","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.equiv_symm_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L769-L770","name":"PiLp.equiv_zero","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.equiv_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L759-L765","name":"LinearIsometryEquiv.piLpCongrLeft_single","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#LinearIsometryEquiv.piLpCongrLeft_single","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L746-L755","name":"LinearIsometryEquiv.piLpCongrLeft_symm","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#LinearIsometryEquiv.piLpCongrLeft_symm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L740-L742","name":"LinearIsometryEquiv.piLpCongrLeft_apply","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#LinearIsometryEquiv.piLpCongrLeft_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L722-L734","name":"LinearIsometryEquiv.piLpCongrLeft","kind":"def","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#LinearIsometryEquiv.piLpCongrLeft","doc":"An equivalence of finite domains induces a linearly isometric equivalence of finitely supported\nfunctions"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L698-L710","name":"PiLp.equivₗᵢ","kind":"def","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.equivₗᵢ","doc":"The canonical map `PiLp.equiv` between `PiLp ∞ β` and `Π i, β i` as a linear isometric\nequivalence. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L692-L693","name":"PiLp.neg_apply","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.neg_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L687-L688","name":"PiLp.smul_apply","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.smul_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L682-L683","name":"PiLp.sub_apply","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.sub_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L677-L678","name":"PiLp.add_apply","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.add_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L672-L673","name":"PiLp.zero_apply","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.zero_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L659-L661","name":"PiLp.finiteDimensional","kind":"instance","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.finiteDimensional","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L654-L656","name":"PiLp.smulCommClass","kind":"instance","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.smulCommClass","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L649-L651","name":"PiLp.isScalarTower","kind":"instance","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.isScalarTower","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L629-L646","name":"PiLp.normedSpace","kind":"instance","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.normedSpace","doc":"The product of finitely many normed spaces is a normed space, with the `L^p` norm. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L624-L626","name":"PiLp.module","kind":"instance","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.module","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L617-L618","name":"PiLp.edist_eq_of_L2","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.edist_eq_of_L2","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L609-L614","name":"PiLp.nndist_eq_of_L2","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.nndist_eq_of_L2","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L603-L606","name":"PiLp.dist_eq_of_L2","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.dist_eq_of_L2","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L596-L600","name":"PiLp.norm_sq_eq_of_L2","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.norm_sq_eq_of_L2","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L588-L593","name":"PiLp.nnnorm_eq_of_L2","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.nnnorm_eq_of_L2","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L581-L585","name":"PiLp.norm_eq_of_L2","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.norm_eq_of_L2","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L573-L578","name":"PiLp.norm_eq_of_nat","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.norm_eq_of_nat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L567-L570","name":"PiLp.nnnorm_eq_ciSup","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.nnnorm_eq_ciSup","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L560-L564","name":"PiLp.nnnorm_eq_sum","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.nnnorm_eq_sum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L555-L557","name":"PiLp.normedAddCommGroup","kind":"instance","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.normedAddCommGroup","doc":"normed group instance on the product of finitely many normed groups, using the `L^p` norm. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L536-L551","name":"PiLp.seminormedAddCommGroup","kind":"instance","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.seminormedAddCommGroup","doc":"seminormed group instance on the product of finitely many normed groups, using the `L^p`\nnorm. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L526-L531","name":"PiLp.infty_equiv_isometry","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.infty_equiv_isometry","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L521-L523","name":"PiLp.antilipschitzWith_equiv","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.antilipschitzWith_equiv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L517-L518","name":"PiLp.lipschitzWith_equiv","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.lipschitzWith_equiv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L509-L514","name":"PiLp.nndist_eq_iSup","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.nndist_eq_iSup","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L500-L506","name":"PiLp.nndist_eq_sum","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.nndist_eq_sum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L497-L498","name":"PiLp.instMetricSpacePiLp","kind":"instance","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.instMetricSpacePiLp","doc":"metric space instance on the product of finitely many metric spaces, using the `L^p` distance,\nand having as uniformity the product uniformity. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L491-L493","name":"PiLp.instPseudoMetricSpacePiLp","kind":"instance","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.instPseudoMetricSpacePiLp","doc":"pseudometric space instance on the product of finitely many pseudometric spaces, using the\n`L^p` distance, and having as uniformity the product uniformity. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L486-L487","name":"PiLp.instEMetricSpacePiLp","kind":"instance","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.instEMetricSpacePiLp","doc":"emetric space instance on the product of finitely many emetric spaces, using the `L^p`\nedistance, and having as uniformity the product uniformity. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L481-L482","name":"PiLp.instPseudoEMetricSpacePiLp","kind":"instance","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.instPseudoEMetricSpacePiLp","doc":"pseudoemetric space instance on the product of finitely many pseudoemetric spaces, using the\n`L^p` pseudoedistance, and having as uniformity the product uniformity. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L472-L473","name":"PiLp.bornology","kind":"instance","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.bornology","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L466-L467","name":"PiLp.continuous_equiv_symm","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.continuous_equiv_symm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L461-L462","name":"PiLp.continuous_equiv","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.continuous_equiv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L455-L457","name":"PiLp.uniformContinuous_equiv_symm","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.uniformContinuous_equiv_symm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L451-L452","name":"PiLp.uniformContinuous_equiv","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.uniformContinuous_equiv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L447-L448","name":"PiLp.uniformSpace","kind":"instance","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.uniformSpace","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L434-L439","name":"PiLp.aux_cobounded_eq","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.aux_cobounded_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L425-L431","name":"PiLp.aux_uniformity_eq","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.aux_uniformity_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L394-L422","name":"PiLp.antilipschitzWith_equiv_aux","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.antilipschitzWith_equiv_aux","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L376-L391","name":"PiLp.lipschitzWith_equiv_aux","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.lipschitzWith_equiv_aux","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L339-L371","name":"PiLp.pseudoMetricAux","kind":"def","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.pseudoMetricAux","doc":"Endowing the space `PiLp p α` with the `L^p` pseudometric structure. This definition is not\nsatisfactory, as it does not register the fact that the topology, the uniform structure, and the\nbornology coincide with the product ones. Therefore, we do not register it as an instance. Using\nthis as a temporary pseudoemetric space instance, we will show that the uniform structure is equal\n(but not defeq) to the product one, and then register an instance in which we replace the uniform\nstructure and the bornology by the product ones using this pseudometric space,\n`PseudoMetricSpace.replaceUniformity`, and `PseudoMetricSpace.replaceBornology`.\n\nSee note [reducible non-instances] "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L320-L326","name":"PiLp.iSup_edist_ne_top_aux","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.iSup_edist_ne_top_aux","doc":"An auxiliary lemma used twice in the proof of `PiLp.pseudoMetricAux` below. Not intended for\nuse outside this file. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L290-L312","name":"PiLp.pseudoEmetricAux","kind":"def","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.pseudoEmetricAux","doc":"Endowing the space `PiLp p β` with the `L^p` pseudoemetric structure. This definition is not\nsatisfactory, as it does not register the fact that the topology and the uniform structure coincide\nwith the product one. Therefore, we do not register it as an instance. Using this as a temporary\npseudoemetric space instance, we will show that the uniform structure is equal (but not defeq) to\nthe product one, and then register an instance in which we replace the uniform structure by the\nproduct one using this pseudoemetric space and `PseudoEMetricSpace.replaceUniformity`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L253-L256","name":"PiLp.norm_eq_sum","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.norm_eq_sum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L248-L250","name":"PiLp.norm_eq_ciSup","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.norm_eq_ciSup","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L244-L245","name":"PiLp.norm_eq_card","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.norm_eq_card","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L236-L239","name":"PiLp.hasNorm","kind":"instance","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.hasNorm","doc":"Endowing the space `PiLp p β` with the `L^p` norm. We register this instance\nseparate from `PiLp.seminormedAddCommGroup` since the latter requires the type class hypothesis\n`[Fact (1 ≤ p)]` in order to prove the triangle inequality.\n\nRegistering this separately allows for a future norm-like structure on `PiLp p β` for `p < 1`\nsatisfying a relaxed triangle inequality. These are called *quasi-norms*. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L219-L221","name":"PiLp.dist_eq_iSup","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.dist_eq_iSup","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L213-L216","name":"PiLp.dist_eq_sum","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.dist_eq_sum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L209-L210","name":"PiLp.dist_eq_card","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.dist_eq_card","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L201-L205","name":"PiLp.instDistPiLp","kind":"instance","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.instDistPiLp","doc":"Endowing the space `PiLp p β` with the `L^p` distance. We register this instance\nseparate from `pi_Lp.pseudo_metric` since the latter requires the type class hypothesis\n`[Fact (1 ≤ p)]` in order to prove the triangle inequality.\n\nRegistering this separately allows for a future metric-like structure on `PiLp p β` for `p < 1`\nsatisfying a relaxed triangle inequality. The terminology for this varies throughout the\nliterature, but it is sometimes called a *quasi-metric* or *semi-metric*. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L181-L185","name":"PiLp.edist_comm","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.edist_comm","doc":"This holds independent of `p` and does not require `[Fact (1 ≤ p)]`. We keep it separate\nfrom `pi_Lp.pseudo_emetric_space` so it can be used also for `p < 1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L172-L176","name":"PiLp.edist_self","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.edist_self","doc":"This holds independent of `p` and does not require `[Fact (1 ≤ p)]`. We keep it separate\nfrom `pi_Lp.pseudo_emetric_space` so it can be used also for `p < 1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L158-L160","name":"PiLp.edist_eq_iSup","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.edist_eq_iSup","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L152-L155","name":"PiLp.edist_eq_sum","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.edist_eq_sum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L148-L149","name":"PiLp.edist_eq_card","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.edist_eq_card","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L139-L144","name":"PiLp.instEDistPiLp","kind":"instance","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.instEDistPiLp","doc":"Endowing the space `PiLp p β` with the `L^p` edistance. We register this instance\nseparate from `pi_Lp.pseudo_emetric` since the latter requires the type class hypothesis\n`[Fact (1 ≤ p)]` in order to prove the triangle inequality.\n\nRegistering this separately allows for a future emetric-like structure on `PiLp p β` for `p < 1`\nsatisfying a relaxed triangle inequality. The terminology for this varies throughout the\nliterature, but it is sometimes called a *quasi-metric* or *semi-metric*. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L111-L112","name":"PiLp.equiv_symm_apply","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.equiv_symm_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L106-L107","name":"PiLp.equiv_apply","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.equiv_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L97-L98","name":"PiLp.equiv","kind":"def","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.equiv","doc":"Canonical bijection between `PiLp p α` and the original Pi type. We introduce it to be able\nto compare the `L^p` and `L^∞` distances through it. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L88-L89","name":"PiLp.ext","kind":"theorem","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp.ext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L84-L85","name":"instInhabitedPiLp","kind":"instance","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#instInhabitedPiLp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/NormedSpace/PiLp.lean#L80-L81","name":"PiLp","kind":"def","docLink":"./Mathlib/Analysis/NormedSpace/PiLp.html#PiLp","doc":"A copy of a Pi type, on which we will put the `L^p` distance. Since the Pi type itself is\nalready endowed with the `L^∞` distance, we need the type synonym to avoid confusing typeclass\nresolution. Also, we let it depend on `p`, to get a whole family of type on which we can put\ndifferent distances. "}]}