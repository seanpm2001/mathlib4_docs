{"name":"Mathlib.Control.Traversable.Basic","instances":[{"typeNames":["ApplicativeTransformation","ApplicativeTransformation","_builtin_typeu"],"name":"ApplicativeTransformation.instCoeFunApplicativeTransformationForAllType","className":"CoeFun"},{"typeNames":["ApplicativeTransformation"],"name":"ApplicativeTransformation.instInhabitedApplicativeTransformation","className":"Inhabited"},{"typeNames":["Id"],"name":"instTraversableId","className":"Traversable"},{"typeNames":["Id","instTraversableId"],"name":"instIsLawfulTraversableIdInstTraversableId","className":"IsLawfulTraversable"},{"typeNames":["Option"],"name":"instTraversableOption","className":"Traversable"},{"typeNames":["List"],"name":"instTraversableList","className":"Traversable"},{"typeNames":["Sum"],"name":"instTraversableSum","className":"Traversable"}],"imports":["Init","Mathlib.Data.List.Defs","Mathlib.Data.Option.Defs"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L323-L324","name":"instTraversableSum","kind":"instance","docLink":"./Mathlib/Control/Traversable/Basic.html#instTraversableSum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L316-L318","name":"Sum.traverse","kind":"def","docLink":"./Mathlib/Control/Traversable/Basic.html#Sum.traverse","doc":"Defines a `traverse` function on the second component of a sum type.\nThis is used to give a `Traversable` instance for the functor `σ ⊕ -`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L285-L286","name":"instTraversableList","kind":"instance","docLink":"./Mathlib/Control/Traversable/Basic.html#instTraversableList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L282-L283","name":"instTraversableOption","kind":"instance","docLink":"./Mathlib/Control/Traversable/Basic.html#instTraversableOption","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L276-L276","name":"instIsLawfulTraversableIdInstTraversableId","kind":"instance","docLink":"./Mathlib/Control/Traversable/Basic.html#instIsLawfulTraversableIdInstTraversableId","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L273-L274","name":"instTraversableId","kind":"instance","docLink":"./Mathlib/Control/Traversable/Basic.html#instTraversableId","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L267-L267","name":"IsLawfulTraversable.naturality","kind":"def","docLink":"./Mathlib/Control/Traversable/Basic.html#IsLawfulTraversable.naturality","doc":"The naturality axiom explaining how lawful traversable functors should play with\nlawful applicative functors. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L263-L263","name":"IsLawfulTraversable.traverse_eq_map_id","kind":"def","docLink":"./Mathlib/Control/Traversable/Basic.html#IsLawfulTraversable.traverse_eq_map_id","doc":"An axiom for `traverse` involving `pure : β → Id β`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L258-L258","name":"IsLawfulTraversable.comp_traverse","kind":"def","docLink":"./Mathlib/Control/Traversable/Basic.html#IsLawfulTraversable.comp_traverse","doc":"`traverse` plays well with composition of applicative functors. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L256-L256","name":"IsLawfulTraversable.id_traverse","kind":"def","docLink":"./Mathlib/Control/Traversable/Basic.html#IsLawfulTraversable.id_traverse","doc":"`traverse` plays well with `pure` of the identity monad"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L253-L253","name":"IsLawfulTraversable.mk","kind":"ctor","docLink":"./Mathlib/Control/Traversable/Basic.html#IsLawfulTraversable.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L253-L270","name":"IsLawfulTraversable","kind":"class","docLink":"./Mathlib/Control/Traversable/Basic.html#IsLawfulTraversable","doc":"A traversable functor is lawful if its `traverse` satisfies a\nnumber of additional properties.  It must send `pure : α → Id α` to `pure`,\nsend the composition of applicative functors to the composition of the\n`traverse` of each, send each function `f` to `fun x ↦ f <$> x`, and\nsatisfy a naturality condition with respect to applicative\ntransformations. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L241-L242","name":"sequence","kind":"def","docLink":"./Mathlib/Control/Traversable/Basic.html#sequence","doc":"A traversable functor commutes with all applicative functors. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L223-L223","name":"Traversable.traverse","kind":"def","docLink":"./Mathlib/Control/Traversable/Basic.html#Traversable.traverse","doc":"The function commuting a traversable functor `t` with an arbitrary applicative functor `m`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L221-L221","name":"Traversable.mk","kind":"ctor","docLink":"./Mathlib/Control/Traversable/Basic.html#Traversable.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L221-L223","name":"Traversable","kind":"class","docLink":"./Mathlib/Control/Traversable/Basic.html#Traversable","doc":"A traversable functor is a functor along with a way to commute\nwith all applicative functors (see `sequence`).  For example, if `t`\nis the traversable functor `List` and `m` is the applicative functor\n`IO`, then given a function `f : α → IO β`, the function `Functor.map f` is\n`List α → List (IO β)`, but `traverse f` is `List α → IO (List β)`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L208-L209","name":"ApplicativeTransformation.id_comp","kind":"theorem","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.id_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L203-L204","name":"ApplicativeTransformation.comp_id","kind":"theorem","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.comp_id","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L196-L199","name":"ApplicativeTransformation.comp_assoc","kind":"theorem","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.comp_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L189-L191","name":"ApplicativeTransformation.comp_apply","kind":"theorem","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.comp_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L179-L185","name":"ApplicativeTransformation.comp","kind":"def","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.comp","doc":"The composition of applicative transformations. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L171-L172","name":"ApplicativeTransformation.instInhabitedApplicativeTransformation","kind":"instance","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.instInhabitedApplicativeTransformation","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L165-L168","name":"ApplicativeTransformation.idTransformation","kind":"def","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.idTransformation","doc":"The identity applicative transformation from an applicative functor to itself. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L157-L159","name":"ApplicativeTransformation.preserves_map'","kind":"theorem","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.preserves_map'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L153-L154","name":"ApplicativeTransformation.preserves_map","kind":"theorem","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.preserves_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L148-L149","name":"ApplicativeTransformation.preserves_seq","kind":"theorem","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.preserves_seq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L143-L144","name":"ApplicativeTransformation.preserves_pure","kind":"theorem","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.preserves_pure","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L133-L135","name":"ApplicativeTransformation.ext_iff","kind":"theorem","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.ext_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L126-L130","name":"ApplicativeTransformation.ext","kind":"theorem","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.ext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L118-L122","name":"ApplicativeTransformation.coe_inj","kind":"theorem","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.coe_inj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L113-L115","name":"ApplicativeTransformation.congr_arg","kind":"theorem","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.congr_arg","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L108-L110","name":"ApplicativeTransformation.congr_fun","kind":"theorem","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.congr_fun","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L103-L105","name":"ApplicativeTransformation.coe_mk","kind":"theorem","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.coe_mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L98-L99","name":"ApplicativeTransformation.app_eq_coe","kind":"theorem","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.app_eq_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L92-L93","name":"ApplicativeTransformation.instCoeFunApplicativeTransformationForAllType","kind":"instance","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.instCoeFunApplicativeTransformationForAllType","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L81-L81","name":"ApplicativeTransformation.preserves_seq'","kind":"def","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.preserves_seq'","doc":"An `ApplicativeTransformation` intertwines `seq`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L79-L79","name":"ApplicativeTransformation.preserves_pure'","kind":"def","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.preserves_pure'","doc":"An `ApplicativeTransformation` preserves `pure`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L77-L77","name":"ApplicativeTransformation.app","kind":"def","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.app","doc":"The function on objects defined by an `ApplicativeTransformation`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L75-L81","name":"ApplicativeTransformation","kind":"structure","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation","doc":"A transformation between applicative functors.  It is a natural\ntransformation such that `app` preserves the `Pure.pure` and\n`Functor.map` (`<*>`) operations. See\n`ApplicativeTransformation.preserves_map` for naturality. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Traversable/Basic.lean#L1-L1","name":"ApplicativeTransformation.mk","kind":"ctor","docLink":"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.mk","doc":""}]}