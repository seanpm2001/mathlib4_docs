{"name":"Mathlib.Tactic.Cache","instances":[{"typeNames":["Mathlib.Tactic.Cache"],"name":"Mathlib.Tactic.instNonemptyCache","className":"Nonempty"},{"typeNames":["Mathlib.Tactic.DeclCache"],"name":"Mathlib.Tactic.instNonemptyDeclCache","className":"Nonempty"},{"typeNames":["Mathlib.Tactic.CachedData"],"name":"Mathlib.Tactic.instNonemptyCachedData","className":"Nonempty"}],"imports":["Init","Lean","Mathlib.Logic.Nonempty","Mathlib.Lean.Meta.DiscrTree"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Cache.lean#L190-L190","name":"Mathlib.Tactic.instNonemptyCachedData","kind":"instance","docLink":"./Mathlib/Tactic/Cache.html#Mathlib.Tactic.instNonemptyCachedData","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Cache.lean#L189-L189","name":"Mathlib.Tactic.CachedData.cache","kind":"def","docLink":"./Mathlib/Tactic/Cache.html#Mathlib.Tactic.CachedData.cache","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Cache.lean#L188-L188","name":"Mathlib.Tactic.CachedData.pointer?","kind":"def","docLink":"./Mathlib/Tactic/Cache.html#Mathlib.Tactic.CachedData.pointer?","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Cache.lean#L187-L187","name":"Mathlib.Tactic.CachedData.mk","kind":"ctor","docLink":"./Mathlib/Tactic/Cache.html#Mathlib.Tactic.CachedData.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Cache.lean#L187-L190","name":"Mathlib.Tactic.CachedData","kind":"structure","docLink":"./Mathlib/Tactic/Cache.html#Mathlib.Tactic.CachedData","doc":"A structure that holds the cached discrimination tree,\nand possibly a pointer to a memory region, if we unpickled the tree from disk.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Cache.lean#L177-L181","name":"Mathlib.Tactic.DiscrTreeCache.getMatch","kind":"def","docLink":"./Mathlib/Tactic/Cache.html#Mathlib.Tactic.DiscrTreeCache.getMatch","doc":"Get matches from both the discrimination tree for declarations in the current file,\nand for the imports.\n\nNote that if you are calling this multiple times with the same environment,\nit will rebuild the discrimination tree for the current file multiple times,\nand it would be more efficient to call `c.get` once,\nand then call `DiscrTree.getMatch` multiple times.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Cache.lean#L150-L166","name":"Mathlib.Tactic.DiscrTreeCache.mk","kind":"def","docLink":"./Mathlib/Tactic/Cache.html#Mathlib.Tactic.DiscrTreeCache.mk","doc":"Build a `DiscrTreeCache`,\nfrom a function that returns a collection of keys and values for each declaration.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Cache.lean#L143-L144","name":"Mathlib.Tactic.DiscrTreeCache","kind":"def","docLink":"./Mathlib/Tactic/Cache.html#Mathlib.Tactic.DiscrTreeCache","doc":"A type synonym for a `DeclCache` containing a pair of discrimination trees.\nThe first will store declarations in the current file,\nthe second will store declarations from imports (and will hopefully be \"read-only\" after creation).\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Cache.lean#L132-L136","name":"Mathlib.Tactic.DeclCache.get","kind":"def","docLink":"./Mathlib/Tactic/Cache.html#Mathlib.Tactic.DeclCache.get","doc":"Access the cache.\nCalling this function for the first time\nwill initialize the cache with the function\nprovided in the constructor.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Cache.lean#L114-L124","name":"Mathlib.Tactic.DeclCache.mk","kind":"def","docLink":"./Mathlib/Tactic/Cache.html#Mathlib.Tactic.DeclCache.mk","doc":"Creates a `DeclCache`.\nThe cached structure `α` is initialized with `empty`,\nand then `addLibraryDecl` is called for every imported constant, and the result is cached.\nAfter all imported constants have been added, we run `post`.\nWhen `get` is called, `addDecl` is also called for every constant in the current file.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Cache.lean#L105-L105","name":"Mathlib.Tactic.instNonemptyDeclCache","kind":"instance","docLink":"./Mathlib/Tactic/Cache.html#Mathlib.Tactic.instNonemptyDeclCache","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Cache.lean#L104-L104","name":"Mathlib.Tactic.DeclCache.addLibraryDecl","kind":"def","docLink":"./Mathlib/Tactic/Cache.html#Mathlib.Tactic.DeclCache.addLibraryDecl","doc":"Function for adding a declaration from the library to the cache.\nDefaults to the same behaviour as adding a declaration from the current file. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Cache.lean#L101-L101","name":"Mathlib.Tactic.DeclCache.addDecl","kind":"def","docLink":"./Mathlib/Tactic/Cache.html#Mathlib.Tactic.DeclCache.addDecl","doc":"Function for adding a declaration from the current file to the cache. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Cache.lean#L99-L99","name":"Mathlib.Tactic.DeclCache.cache","kind":"def","docLink":"./Mathlib/Tactic/Cache.html#Mathlib.Tactic.DeclCache.cache","doc":"The cached data. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Cache.lean#L97-L97","name":"Mathlib.Tactic.DeclCache.mk'","kind":"ctor","docLink":"./Mathlib/Tactic/Cache.html#Mathlib.Tactic.DeclCache.mk'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Cache.lean#L97-L105","name":"Mathlib.Tactic.DeclCache","kind":"structure","docLink":"./Mathlib/Tactic/Cache.html#Mathlib.Tactic.DeclCache","doc":"Cached fold over the environment's declarations,\nwhere a given function is applied to `α` for every constant.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Cache.lean#L67-L91","name":"Mathlib.Tactic.Cache.get","kind":"def","docLink":"./Mathlib/Tactic/Cache.html#Mathlib.Tactic.Cache.get","doc":"Access the cache.\nCalling this function for the first time\nwill initialize the cache with the function\nprovided in the constructor.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Cache.lean#L58-L59","name":"Mathlib.Tactic.Cache.mk","kind":"def","docLink":"./Mathlib/Tactic/Cache.html#Mathlib.Tactic.Cache.mk","doc":"Creates a cache with an initialization function. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Cache.lean#L54-L55","name":"Mathlib.Tactic.instNonemptyCache","kind":"instance","docLink":"./Mathlib/Tactic/Cache.html#Mathlib.Tactic.instNonemptyCache","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Cache.lean#L50-L52","name":"Mathlib.Tactic.Cache","kind":"def","docLink":"./Mathlib/Tactic/Cache.html#Mathlib.Tactic.Cache","doc":"Once-per-file cache. "}]}