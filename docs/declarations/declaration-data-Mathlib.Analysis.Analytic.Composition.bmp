{"name":"Mathlib.Analysis.Analytic.Composition","instances":[],"imports":["Init","Mathlib.Analysis.Analytic.Basic","Mathlib.Combinatorics.Composition"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L1189-L1227","name":"FormalMultilinearSeries.comp_assoc","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.comp_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L1119-L1179","name":"Composition.sigmaEquivSigmaPi","kind":"def","docLink":"./Mathlib/Analysis/Analytic/Composition.html#Composition.sigmaEquivSigmaPi","doc":"Natural equivalence between `(Σ (a : composition n), composition a.length)` and\n`(Σ (c : composition n), Π (i : fin c.length), composition (c.blocks_fun i))`, that shows up as a\nchange of variables in the proof that composition of formal multilinear series is associative.\n\nConsider a composition `a` of `n` and a composition `b` of `a.length`. Then `b` indicates how to\ngroup together some blocks of `a`, giving altogether `b.length` blocks of blocks. These blocks of\nblocks can be called `d₀, ..., d_{a.length - 1}`, and one obtains a composition `c` of `n` by\nsaying that each `dᵢ` is one single block. The map `⟨a, b⟩ → ⟨c, (d₀, ..., d_{a.length - 1})⟩` is\nthe direct map in the equiv.\n\nConversely, if one starts from `c` and the `dᵢ`s, one can join the `dᵢ`s to obtain a composition\n`a` of `n`, and register the lengths of the `dᵢ`s in a composition `b` of `a.length`. This is the\ninverse map of the equiv.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L1063-L1102","name":"Composition.sizeUpTo_sizeUpTo_add","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#Composition.sizeUpTo_sizeUpTo_add","doc":"Auxiliary lemma to prove that the composition of formal multilinear series is associative.\n\nConsider a composition `a` of `n` and a composition `b` of `a.length`. Grouping together some\nblocks of `a` according to `b` as in `a.gather b`, one can compute the total size of the blocks\nof `a` up to an index `size_up_to b i + j` (where the `j` corresponds to a set of blocks of `a`\nthat do not fill a whole block of `a.gather b`). The first part corresponds to a sum of blocks\nin `a.gather b`, and the second one to a sum of blocks in the next block of\n`sigma_composition_aux a b`. This is the content of this lemma. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L1045-L1051","name":"Composition.blocksFun_sigmaCompositionAux","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#Composition.blocksFun_sigmaCompositionAux","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L1035-L1040","name":"Composition.length_sigmaCompositionAux","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#Composition.length_sigmaCompositionAux","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L1020-L1030","name":"Composition.sigmaCompositionAux","kind":"def","docLink":"./Mathlib/Analysis/Analytic/Composition.html#Composition.sigmaCompositionAux","doc":"An auxiliary function used in the definition of `sigma_equiv_sigma_pi` below, associating to\ntwo compositions `a` of `n` and `b` of `a.length`, and an index `i` bounded by the length of\n`a.gather b`, the subcomposition of `a` made of those blocks belonging to the `i`-th block of\n`a.gather b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L1008-L1011","name":"Composition.length_gather","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#Composition.length_gather","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L991-L1005","name":"Composition.gather","kind":"def","docLink":"./Mathlib/Analysis/Analytic/Composition.html#Composition.gather","doc":"When `a` is a composition of `n` and `b` is a composition of `a.length`, `a.gather b` is the\ncomposition of `n` obtained by gathering all the blocks of `a` corresponding to a block of `b`.\nFor instance, if `a = [6, 5, 3, 5, 2]` and `b = [2, 3]`, one should gather together\nthe first two blocks of `a` and its last three blocks, giving `a.gather b = [11, 10]`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L959-L984","name":"Composition.sigma_pi_composition_eq_iff","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#Composition.sigma_pi_composition_eq_iff","doc":"Rewriting equality in the dependent type\n`Σ (c : composition n), Π (i : fin c.length), composition (c.blocks_fun i)` in\nnon-dependent terms with lists, requiring that the lists of blocks coincide. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L946-L953","name":"Composition.sigma_composition_eq_iff","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#Composition.sigma_composition_eq_iff","doc":"Rewriting equality in the dependent type `Σ (a : composition n), composition a.length)` in\nnon-dependent terms with lists, requiring that the blocks coincide. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L877-L881","name":"AnalyticAt.comp","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#AnalyticAt.comp","doc":"If two functions `g` and `f` are analytic respectively at `f x` and `x`, then `g ∘ f` is\nanalytic at `x`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L752-L871","name":"HasFPowerSeriesAt.comp","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#HasFPowerSeriesAt.comp","doc":"If two functions `g` and `f` have power series `q` and `p` respectively at `f x` and `x`, then\n`g ∘ f` admits the power series `q.comp p` at `x`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L722-L742","name":"FormalMultilinearSeries.comp_partialSum","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.comp_partialSum","doc":"Composing the partial sums of two multilinear series coincides with the sum over all\ncompositions in `comp_partial_sum_target 0 N N`. This is precisely the motivation for the\ndefinition of `comp_partial_sum_target`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L702-L716","name":"FormalMultilinearSeries.compPartialSumTarget_tendsto_atTop","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.compPartialSumTarget_tendsto_atTop","doc":"The auxiliary set corresponding to the composition of partial sums asymptotically contains\nall possible compositions. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L655-L697","name":"FormalMultilinearSeries.compChangeOfVariables_sum","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.compChangeOfVariables_sum","doc":"`comp_change_of_variables m M N` is a bijection between `comp_partial_sum_source m M N`\nand `comp_partial_sum_target m M N`, yielding equal sums for functions that correspond to each\nother under the bijection. As `comp_change_of_variables m M N` is a dependent function, stating\nthat it is a bijection is not directly possible, but the consequence on sums can be stated\nmore easily. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L643-L646","name":"FormalMultilinearSeries.mem_compPartialSumTarget_iff","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.mem_compPartialSumTarget_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L636-L639","name":"FormalMultilinearSeries.compPartialSumTarget","kind":"def","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.compPartialSumTarget","doc":"Target set in the change of variables to compute the composition of partial sums of formal\npower series, here given a a finset.\nSee also `comp_partial_sum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L619-L630","name":"FormalMultilinearSeries.compPartialSumTargetSet_image_compPartialSumSource","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.compPartialSumTargetSet_image_compPartialSumSource","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L615-L616","name":"FormalMultilinearSeries.compPartialSumTargetSet","kind":"def","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.compPartialSumTargetSet","doc":"Target set in the change of variables to compute the composition of partial sums of formal\npower series, here given a a set. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L603-L610","name":"FormalMultilinearSeries.compChangeOfVariables_blocksFun","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.compChangeOfVariables_blocksFun","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L594-L599","name":"FormalMultilinearSeries.compChangeOfVariables_length","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.compChangeOfVariables_length","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L583-L590","name":"FormalMultilinearSeries.compChangeOfVariables","kind":"def","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.compChangeOfVariables","doc":"Change of variables appearing to compute the composition of partial sums of formal\npower series "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L574-L578","name":"FormalMultilinearSeries.mem_compPartialSumSource_iff","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.mem_compPartialSumSource_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L569-L570","name":"FormalMultilinearSeries.compPartialSumSource","kind":"def","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.compPartialSumSource","doc":"Source set in the change of variables to compute the composition of partial sums of formal\npower series.\nSee also `comp_partial_sum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L536-L549","name":"FormalMultilinearSeries.le_comp_radius_of_summable","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.le_comp_radius_of_summable","doc":"Bounding below the radius of the composition of two formal multilinear series assuming\nsummability over all compositions. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L472-L529","name":"FormalMultilinearSeries.comp_summable_nnreal","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.comp_summable_nnreal","doc":"If two formal multilinear series have positive radius of convergence, then the terms appearing\nin the definition of their composition are also summable (when multiplied by a suitable positive\ngeometric term). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L436-L460","name":"FormalMultilinearSeries.id_comp","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.id_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L403-L432","name":"FormalMultilinearSeries.comp_id","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.comp_id","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L392-L397","name":"FormalMultilinearSeries.id_apply_ne_one","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.id_apply_ne_one","doc":"For `n ≠ 1`, the `n`-th coefficient of `id 𝕜 E` is zero, by definition. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L384-L387","name":"FormalMultilinearSeries.id_apply_one'","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.id_apply_one'","doc":"The `n`th coefficient of `id 𝕜 E` is the identity when `n = 1`. We state this in a dependent\nway, as it will often appear in this form. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L378-L379","name":"FormalMultilinearSeries.id_apply_one","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.id_apply_one","doc":"The first coefficient of `id 𝕜 E` is the identity. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L370-L373","name":"FormalMultilinearSeries.id","kind":"def","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.id","doc":"The identity formal multilinear series, with all coefficients equal to `0` except for `n = 1`\nwhere it is (the continuous multilinear version of) the identity. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L350-L353","name":"FormalMultilinearSeries.compAlongComposition_nnnorm","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.compAlongComposition_nnnorm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L342-L347","name":"FormalMultilinearSeries.compAlongComposition_norm","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.compAlongComposition_norm","doc":"The norm of `q.comp_along_composition p c` is controlled by the product of\nthe norms of the relevant bits of `q` and `p`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L322-L337","name":"FormalMultilinearSeries.compAlongComposition_bound","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.compAlongComposition_bound","doc":"The norm of `f.comp_along_composition p c` is controlled by the product of\nthe norms of the relevant bits of `f` and `p`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L306-L307","name":"FormalMultilinearSeries.comp_removeZero","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.comp_removeZero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L295-L302","name":"FormalMultilinearSeries.removeZero_comp_of_pos","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.removeZero_comp_of_pos","doc":"Only `0`-th coefficient of `q.comp p` depends on `q 0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L283-L291","name":"FormalMultilinearSeries.comp_coeff_one","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.comp_coeff_one","doc":"The first coefficient of a composition of formal multilinear series is the composition of the\nfirst coefficients seen as continuous linear maps. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L277-L278","name":"FormalMultilinearSeries.comp_coeff_zero''","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.comp_coeff_zero''","doc":"The `0`-th coefficient of `q.comp p` is `q 0`. When `p` goes from `E` to `E`, this can be\nexpressed as a direct equality "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L270-L272","name":"FormalMultilinearSeries.comp_coeff_zero'","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.comp_coeff_zero'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L259-L266","name":"FormalMultilinearSeries.comp_coeff_zero","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.comp_coeff_zero","doc":"The `0`-th coefficient of `q.comp p` is `q 0`. Since these maps are multilinear maps in zero\nvariables, but on different spaces, we can not state this directly, so we state it when applied to\narbitrary vectors (which have to be the zero vector). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L252-L253","name":"FormalMultilinearSeries.comp","kind":"def","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.comp","doc":"Formal composition of two formal multilinear series. The `n`-th coefficient in the composition\nis defined to be the sum of `q.comp_along_composition p c` over all compositions of\n`n`. In other words, this term (as a multilinear function applied to `v_0, ..., v_{n-1}`) is\n`∑'_{k} ∑'_{i₁ + ... + iₖ = n} qₖ (p_{i_1} (...), ..., p_{i_k} (...))`, where one puts all variables\n`v_0, ..., v_{n-1}` in increasing order in the dots.\n\nIn general, the composition `q ∘ p` only makes sense when the constant coefficient of `p` vanishes.\nWe give a general formula but which ignores the value of `p 0` instead.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L237-L240","name":"FormalMultilinearSeries.compAlongComposition_apply","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.compAlongComposition_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L230-L233","name":"FormalMultilinearSeries.compAlongComposition","kind":"def","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.compAlongComposition","doc":"Given two formal multilinear series `q` and `p` and a composition `c` of `n`, one may\nform a continuous multilinear map in `n` variables by applying the right coefficient of `p` to each\nblock of the composition, and then applying `q c.length` to the resulting vector. It is\ncalled `q.comp_along_composition p c`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L210-L213","name":"ContinuousMultilinearMap.compAlongComposition_apply","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#ContinuousMultilinearMap.compAlongComposition_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L194-L206","name":"ContinuousMultilinearMap.compAlongComposition","kind":"def","docLink":"./Mathlib/Analysis/Analytic/Composition.html#ContinuousMultilinearMap.compAlongComposition","doc":"Given a formal multilinear series `p`, a composition `c` of `n` and a continuous multilinear\nmap `f` in `c.length` variables, one may form a continuous multilinear map in `n` variables by\napplying the right coefficient of `p` to each block of the composition, and then applying `f` to\nthe resulting vector. It is called `f.comp_along_composition p c`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L174-L177","name":"FormalMultilinearSeries.compContinuousLinearMap_applyComposition","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.compContinuousLinearMap_applyComposition","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L147-L170","name":"FormalMultilinearSeries.applyComposition_update","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.applyComposition_update","doc":"Technical lemma stating how `p.apply_composition` commutes with updating variables. This\nwill be the key point to show that functions constructed from `apply_composition` retain\nmultilinearity. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L138-L141","name":"FormalMultilinearSeries.removeZero_applyComposition","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.removeZero_applyComposition","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L124-L134","name":"FormalMultilinearSeries.applyComposition_single","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.applyComposition_single","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L113-L121","name":"FormalMultilinearSeries.applyComposition_ones","kind":"theorem","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.applyComposition_ones","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Analytic/Composition.lean#L109-L110","name":"FormalMultilinearSeries.applyComposition","kind":"def","docLink":"./Mathlib/Analysis/Analytic/Composition.html#FormalMultilinearSeries.applyComposition","doc":"Given a formal multilinear series `p`, a composition `c` of `n` and the index `i` of a\nblock of `c`, we may define a function on `fin n → E` by picking the variables in the `i`-th block\nof `n`, and applying the corresponding coefficient of `p` to these variables. This function is\ncalled `p.apply_composition c v i` for `v : fin n → E` and `i : fin c.length`. "}]}