{"name":"Mathlib.GroupTheory.NielsenSchreier","instances":[{"typeNames":["CategoryTheory.ActionCategory","DivInvMonoid.toMonoid","Group.toDivInvMonoid","CategoryTheory.ActionCategory.instGroupoidActionCategoryToMonoidToDivInvMonoid"],"name":"IsFreeGroupoid.actionGroupoidIsFree","className":"IsFreeGroupoid"},{"typeNames":["Quiver.Symmetrify","IsFreeGroupoid.Generators","Quiver.symmetrifyQuiver","IsFreeGroupoid.Generators","IsFreeGroupoid.quiverGenerators","_private.Mathlib.GroupTheory.NielsenSchreier.0.IsFreeGroupoid.symgen"],"name":"IsFreeGroupoid.generators_connected","className":"Quiver.RootedConnected"},{"typeNames":["CategoryTheory.End","CategoryTheory.Category.toCategoryStruct","CategoryTheory.Groupoid.toCategory","CategoryTheory.End.group"],"name":"IsFreeGroupoid.endIsFreeOfConnectedFree","className":"IsFreeGroup"},{"typeNames":["Subtype","Membership.mem","Subgroup","SetLike.instMembership","Subgroup.instSetLikeSubgroup","Subgroup.toGroup"],"name":"subgroupIsFreeOfIsFree","className":"IsFreeGroup"}],"imports":["Init","Mathlib.CategoryTheory.Action","Mathlib.Combinatorics.Quiver.Arborescence","Mathlib.Combinatorics.Quiver.ConnectedComponent","Mathlib.GroupTheory.IsFreeGroup"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L310-L312","name":"subgroupIsFreeOfIsFree","kind":"instance","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#subgroupIsFreeOfIsFree","doc":"The Nielsen-Schreier theorem: a subgroup of a free group is free. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L302-L304","name":"IsFreeGroupoid.endIsFreeOfConnectedFree","kind":"instance","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#IsFreeGroupoid.endIsFreeOfConnectedFree","doc":"A vertex group in a free connected groupoid is free. With some work one could drop the\nconnectedness assumption, by looking at connected components. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L295-L297","name":"IsFreeGroupoid.generators_connected","kind":"instance","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#IsFreeGroupoid.generators_connected","doc":"Given a connected free groupoid, its generating quiver is rooted-connected. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L278-L291","name":"IsFreeGroupoid.path_nonempty_of_hom","kind":"theorem","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#IsFreeGroupoid.path_nonempty_of_hom","doc":"If there exists a morphism `a → b` in a free groupoid, then there also exists a zigzag\nfrom `a` to `b` in the generating quiver. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L228-L265","name":"IsFreeGroupoid.SpanningTree.endIsFree","kind":"def","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.endIsFree","doc":"Given a free groupoid and an arborescence of its generating quiver, the vertex\ngroup at the root is freely generated by loops coming from generating arrows\nin the complement of the tree. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L211-L222","name":"IsFreeGroupoid.SpanningTree.functorOfMonoidHom","kind":"def","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.functorOfMonoidHom","doc":"Since a hom gives a loop, any homomorphism from the vertex group at the root\nextends to a functor on the whole groupoid. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L210-L210","name":"IsFreeGroupoid.SpanningTree.functorOfMonoidHom_obj","kind":"theorem","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.functorOfMonoidHom_obj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L210-L210","name":"IsFreeGroupoid.SpanningTree.functorOfMonoidHom_map","kind":"theorem","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.functorOfMonoidHom_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L198-L205","name":"IsFreeGroupoid.SpanningTree.loopOfHom_eq_id","kind":"theorem","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.loopOfHom_eq_id","doc":"Turning an edge in the spanning tree into a loop gives the identity loop. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L193-L194","name":"IsFreeGroupoid.SpanningTree.loopOfHom","kind":"def","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.loopOfHom","doc":"Any hom in `G` can be made into a loop, by conjugating with `treeHom`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L186-L189","name":"IsFreeGroupoid.SpanningTree.treeHom_root","kind":"theorem","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.treeHom_root","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L181-L182","name":"IsFreeGroupoid.SpanningTree.treeHom_eq","kind":"theorem","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.treeHom_eq","doc":"Any path to `a` gives `treeHom T a`, since paths in the tree are unique. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L176-L177","name":"IsFreeGroupoid.SpanningTree.treeHom","kind":"def","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.treeHom","doc":"For every vertex `a`, there is a canonical hom from the root, given by the path in the tree. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L170-L172","name":"IsFreeGroupoid.SpanningTree.homOfPath","kind":"def","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.homOfPath","doc":"A path in the tree gives a hom, by composition. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L113-L149","name":"IsFreeGroupoid.actionGroupoidIsFree","kind":"instance","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#IsFreeGroupoid.actionGroupoidIsFree","doc":"An action groupoid over a free group is free. More generally, one could show that the groupoid\nof elements over a free groupoid is free, but this version is easier to prove and suffices for our\npurposes.\n\nAnalogous to the fact that a covering space of a graph is a graph. (A free groupoid is like a graph,\nand a groupoid of elements is like a covering space.) "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L100-L104","name":"IsFreeGroupoid.ext_functor","kind":"theorem","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#IsFreeGroupoid.ext_functor","doc":"Two functors from a free groupoid to a group are equal when they agree on the generating\nquiver. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L86-L86","name":"IsFreeGroupoid.unique_lift","kind":"def","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#IsFreeGroupoid.unique_lift","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L85-L85","name":"IsFreeGroupoid.of","kind":"def","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#IsFreeGroupoid.of","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L84-L84","name":"IsFreeGroupoid.quiverGenerators","kind":"def","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#IsFreeGroupoid.quiverGenerators","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L83-L83","name":"IsFreeGroupoid.mk","kind":"ctor","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#IsFreeGroupoid.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L83-L88","name":"IsFreeGroupoid","kind":"class","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#IsFreeGroupoid","doc":"A groupoid `G` is free when we have the following data:\n- a quiver on `IsFreeGroupoid.Generators G` (a type synonym for `G`)\n- a function `of` taking a generating arrow to a morphism in `G`\n- such that a functor from `G` to any group `X` is uniquely determined\n  by assigning labels in `X` to the generating arrows.\n\n  This definition is nonstandard. Normally one would require that functors `G ⥤ X`\n  to any _groupoid_ `X` are given by graph homomorphisms from `generators`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/NielsenSchreier.lean#L71-L72","name":"IsFreeGroupoid.Generators","kind":"def","docLink":"./Mathlib/GroupTheory/NielsenSchreier.html#IsFreeGroupoid.Generators","doc":"`IsFreeGroupoid.Generators G` is a type synonym for `G`. We think of this as\nthe vertices of the generating quiver of `G` when `G` is free. We can't use `G` directly,\nsince `G` already has a quiver instance from being a groupoid. "}]}