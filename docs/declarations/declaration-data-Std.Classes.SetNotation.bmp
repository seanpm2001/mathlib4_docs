{"name":"Std.Classes.SetNotation","instances":[],"imports":["Init","Std.Util.ExtendedBinder"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L115-L115","name":"IsLawfulSingleton.insert_emptyc_eq","kind":"def","docLink":"./Std/Classes/SetNotation.html#IsLawfulSingleton.insert_emptyc_eq","doc":"`insert x ∅ = {x}` "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L113-L113","name":"IsLawfulSingleton.mk","kind":"ctor","docLink":"./Std/Classes/SetNotation.html#IsLawfulSingleton.mk","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L113-L115","name":"IsLawfulSingleton","kind":"class","docLink":"./Std/Classes/SetNotation.html#IsLawfulSingleton","doc":"`insert x ∅ = {x}` "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L108-L110","name":"insertUnexpander","kind":"def","docLink":"./Std/Classes/SetNotation.html#insertUnexpander","doc":"Unexpander for the `{ x, y, ... }` notation. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L102-L104","name":"singletonUnexpander","kind":"def","docLink":"./Std/Classes/SetNotation.html#singletonUnexpander","doc":"Unexpander for the `{ x }` notation. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L89-L94","name":"«term{_}»","kind":"def","docLink":"./Std/Classes/SetNotation.html#«term{_}»","doc":"`{ a, b, c }` is a set with elements `a`, `b`, and `c`.\n\nThis notation works for all types that implement `Insert` and `Singleton`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L86-L87","name":"«binderTerm∈_»","kind":"def","docLink":"./Std/Classes/SetNotation.html#«binderTerm∈_»","doc":"Declare `∃ x ∈ y, ...` as syntax for `∃ x, x ∈ y ∧ ...` "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L84-L84","name":"Sep.sep","kind":"def","docLink":"./Std/Classes/SetNotation.html#Sep.sep","doc":"Computes `{ a ∈ c | p a }`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L82-L82","name":"Sep.mk","kind":"ctor","docLink":"./Std/Classes/SetNotation.html#Sep.mk","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L82-L84","name":"Sep","kind":"class","docLink":"./Std/Classes/SetNotation.html#Sep","doc":"Type class used to implement the notation `{ a ∈ c | p a }` "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L78-L78","name":"Singleton.singleton","kind":"def","docLink":"./Std/Classes/SetNotation.html#Singleton.singleton","doc":"`singleton x` is a collection with the single element `x` (notation: `{x}`). "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L76-L76","name":"Singleton.mk","kind":"ctor","docLink":"./Std/Classes/SetNotation.html#Singleton.mk","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L76-L78","name":"Singleton","kind":"class","docLink":"./Std/Classes/SetNotation.html#Singleton","doc":"Type class for the `singleton` operation.\nUsed to implement the `{ a, b, c }` syntax.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L69-L69","name":"Insert.insert","kind":"def","docLink":"./Std/Classes/SetNotation.html#Insert.insert","doc":"`insert x xs` inserts the element `x` into the collection `xs`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L67-L67","name":"Insert.mk","kind":"ctor","docLink":"./Std/Classes/SetNotation.html#Insert.mk","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L67-L69","name":"Insert","kind":"class","docLink":"./Std/Classes/SetNotation.html#Insert","doc":"Type class for the `insert` operation.\nUsed to implement the `{ a, b, c }` syntax.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L57-L61","name":"«term_\\_»","kind":"def","docLink":"./Std/Classes/SetNotation.html#«term_\\_»","doc":"`a \\ b` is the set difference of `a` and `b`,\nconsisting of all elements in `a` that are not in `b`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L56-L56","name":"SDiff.sdiff","kind":"def","docLink":"./Std/Classes/SetNotation.html#SDiff.sdiff","doc":"`a \\ b` is the set difference of `a` and `b`,\nconsisting of all elements in `a` that are not in `b`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L51-L51","name":"SDiff.mk","kind":"ctor","docLink":"./Std/Classes/SetNotation.html#SDiff.mk","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L51-L56","name":"SDiff","kind":"class","docLink":"./Std/Classes/SetNotation.html#SDiff","doc":"Notation type class for the set difference `\\`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L47-L48","name":"«term_∩_»","kind":"def","docLink":"./Std/Classes/SetNotation.html#«term_∩_»","doc":"`a ∩ b` is the intersection of`a` and `b`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L46-L46","name":"Inter.inter","kind":"def","docLink":"./Std/Classes/SetNotation.html#Inter.inter","doc":"`a ∩ b` is the intersection of`a` and `b`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L44-L44","name":"Inter.mk","kind":"ctor","docLink":"./Std/Classes/SetNotation.html#Inter.mk","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L44-L46","name":"Inter","kind":"class","docLink":"./Std/Classes/SetNotation.html#Inter","doc":"Notation type class for the intersection operation `∩`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L40-L41","name":"«term_∪_»","kind":"def","docLink":"./Std/Classes/SetNotation.html#«term_∪_»","doc":"`a ∪ b` is the union of`a` and `b`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L39-L39","name":"Union.union","kind":"def","docLink":"./Std/Classes/SetNotation.html#Union.union","doc":"`a ∪ b` is the union of`a` and `b`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L37-L37","name":"Union.mk","kind":"ctor","docLink":"./Std/Classes/SetNotation.html#Union.mk","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L37-L39","name":"Union","kind":"class","docLink":"./Std/Classes/SetNotation.html#Union","doc":"Notation type class for the union operation `∪`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L33-L34","name":"«term_⊃_»","kind":"def","docLink":"./Std/Classes/SetNotation.html#«term_⊃_»","doc":"Strict superset relation: `a ⊃ b`  "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L32-L32","name":"SSuperset","kind":"def","docLink":"./Std/Classes/SetNotation.html#SSuperset","doc":"Strict superset relation: `a ⊃ b`  "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L28-L29","name":"«term_⊇_»","kind":"def","docLink":"./Std/Classes/SetNotation.html#«term_⊇_»","doc":"Superset relation: `a ⊇ b`  "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L27-L27","name":"Superset","kind":"def","docLink":"./Std/Classes/SetNotation.html#Superset","doc":"Superset relation: `a ⊇ b`  "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L23-L24","name":"«term_⊂_»","kind":"def","docLink":"./Std/Classes/SetNotation.html#«term_⊂_»","doc":"Strict subset relation: `a ⊂ b`  "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L20-L20","name":"HasSSubset.SSubset","kind":"def","docLink":"./Std/Classes/SetNotation.html#HasSSubset.SSubset","doc":"Strict subset relation: `a ⊂ b`  "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L18-L18","name":"HasSSubset.mk","kind":"ctor","docLink":"./Std/Classes/SetNotation.html#HasSSubset.mk","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L18-L20","name":"HasSSubset","kind":"class","docLink":"./Std/Classes/SetNotation.html#HasSSubset","doc":"Notation type class for the strict subset relation `⊂`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L14-L15","name":"«term_⊆_»","kind":"def","docLink":"./Std/Classes/SetNotation.html#«term_⊆_»","doc":"Subset relation: `a ⊆ b`  "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L11-L11","name":"HasSubset.Subset","kind":"def","docLink":"./Std/Classes/SetNotation.html#HasSubset.Subset","doc":"Subset relation: `a ⊆ b`  "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L9-L9","name":"HasSubset.mk","kind":"ctor","docLink":"./Std/Classes/SetNotation.html#HasSubset.mk","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Classes/SetNotation.lean#L9-L11","name":"HasSubset","kind":"class","docLink":"./Std/Classes/SetNotation.html#HasSubset","doc":"Notation type class for the subset relation `⊆`. "}]}