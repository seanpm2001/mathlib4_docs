{"name":"Mathlib.Tactic.LibrarySearch","instances":[{"typeNames":["Eq","Mathlib.Tactic.LibrarySearch.DeclMod"],"name":"Mathlib.Tactic.LibrarySearch.instDecidableEqDeclMod","className":"Decidable"},{"typeNames":["Mathlib.Tactic.LibrarySearch.DeclMod"],"name":"Mathlib.Tactic.LibrarySearch.instOrdDeclMod","className":"Ord"},{"typeNames":["Mathlib.Tactic.LibrarySearch.DeclMod"],"name":"Mathlib.Tactic.LibrarySearch.instToStringDeclMod","className":"ToString"},{"typeNames":["Mathlib.Tactic.LibrarySearch.subgoalRankType"],"name":"Mathlib.Tactic.LibrarySearch.instOrdSubgoalRankType","className":"Ord"}],"imports":["Init","Mathlib.Tactic.TryThis","Mathlib.Util.Pickle","Mathlib.Lean.Expr.Basic","Mathlib.Tactic.Cache","Mathlib.Tactic.Core","Mathlib.Tactic.SolveByElim","Mathlib.Data.ListM.Heartbeats","Mathlib.Control.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L341-L342","name":"Mathlib.Tactic.LibrarySearch.«tacticObserve?__:_Using__,,»","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.«tacticObserve?__:_Using__,,»","doc":"`observe hp : p` asserts the proposition `p`, and tries to prove it using `library_search`.\nIf no proof is found, the tactic fails.\nIn other words, this tactic is equivalent to `have hp : p := by library_search`.\n\nIf `hp` is omitted, then the placeholder `this` is used.\n\nThe variant `observe? hp : p` will emit a trace message of the form `have hp : p := proof_term`.\nThis may be particularly useful to speed up proofs. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L337-L338","name":"Mathlib.Tactic.LibrarySearch.«tacticObserve?__:_»","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.«tacticObserve?__:_»","doc":"`observe hp : p` asserts the proposition `p`, and tries to prove it using `library_search`.\nIf no proof is found, the tactic fails.\nIn other words, this tactic is equivalent to `have hp : p := by library_search`.\n\nIf `hp` is omitted, then the placeholder `this` is used.\n\nThe variant `observe? hp : p` will emit a trace message of the form `have hp : p := proof_term`.\nThis may be particularly useful to speed up proofs. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L306-L315","name":"Mathlib.Tactic.LibrarySearch.observe","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.observe","doc":"`observe hp : p` asserts the proposition `p`, and tries to prove it using `library_search`.\nIf no proof is found, the tactic fails.\nIn other words, this tactic is equivalent to `have hp : p := by library_search`.\n\nIf `hp` is omitted, then the placeholder `this` is used.\n\nThe variant `observe? hp : p` will emit a trace message of the form `have hp : p := proof_term`.\nThis may be particularly useful to speed up proofs. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L291-L304","name":"Mathlib.Tactic.LibrarySearch.«termExact?%»","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.«termExact?%»","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L285-L288","name":"Mathlib.Tactic.LibrarySearch.tacticLibrary_search","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.tacticLibrary_search","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L261-L277","name":"Mathlib.Tactic.LibrarySearch.exact?","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.exact?","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L253-L254","name":"Mathlib.Tactic.LibrarySearch.apply?'","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.apply?'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L250-L251","name":"Mathlib.Tactic.LibrarySearch.exact?!","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.exact?!","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L248-L249","name":"Mathlib.Tactic.LibrarySearch.exact?'","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.exact?'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L218-L241","name":"Mathlib.Tactic.LibrarySearch.librarySearch","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.librarySearch","doc":"Try to solve the goal either by:\n* calling `solveByElim`\n* or applying a library lemma then calling `solveByElim` on the resulting goals.\n\nIf it successfully closes the goal, returns `none`.\nOtherwise, it returns `some a`, where `a : Array (MetavarContext × List MVarId)`,\nwith an entry for each library lemma which was successfully applied,\ncontaining the metavariable context after the application, and a list of the subsidiary goals.\n\n(Always succeeds, and the metavariable context stored in the monad is reverted,\nunless the goal was completely solved.)\n\n(Note that if `solveByElim` solves some but not all subsidiary goals,\nthis is not currently tracked.)\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L195-L200","name":"Mathlib.Tactic.LibrarySearch.sortResults","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.sortResults","doc":"Sort the incomplete results from `librarySearchCore` according to\n* the number of local hypotheses used (the more the better) and\n* the number of remaining subgoals (the fewer the better).\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L188-L189","name":"Mathlib.Tactic.LibrarySearch.subgoalRanking","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.subgoalRanking","doc":"Returns a tuple:\n* are there no remaining goals?\n* how many local hypotheses were used?\n* how many goals remain, negated?\n\nLarger values (i.e. no remaining goals, more local hypotheses, fewer remaining goals)\nare better.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L176-L178","name":"Mathlib.Tactic.LibrarySearch.instOrdSubgoalRankType","kind":"instance","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.instOrdSubgoalRankType","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L173-L174","name":"Mathlib.Tactic.LibrarySearch.subgoalRankType","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.subgoalRankType","doc":"A type synonym for our subgoal ranking algorithm. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L163-L170","name":"Mathlib.Tactic.LibrarySearch.librarySearchSymm","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.librarySearchSymm","doc":"Run `librarySearchCore` on both the goal and `symm` applied to the goal.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L151-L158","name":"Mathlib.Tactic.LibrarySearch.librarySearchCore","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.librarySearchCore","doc":"Returns a lazy list of the results of applying a library lemma,\nthen calling `solveByElim` on the resulting goals.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L131-L145","name":"Mathlib.Tactic.LibrarySearch.librarySearchLemma","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.librarySearchLemma","doc":"Try applying the given lemma (with symmetry modifier) to the goal,\nthen try to close subsequent goals using `solveByElim`.\nIf `solveByElim` succeeds, we return `[]` as the list of new subgoals,\notherwise the full list of subgoals.\n\nWe do not allow the `MetavarContext` to be modified.\nInstead, if the lemma application succeeds we collect the resulting `MetavarContext`\nand return it explicitly.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L113-L119","name":"Mathlib.Tactic.LibrarySearch.solveByElim","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.solveByElim","doc":"Shortcut for calling `solveByElim`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L110-L110","name":"Mathlib.Tactic.LibrarySearch.librarySearchLemmas","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.librarySearchLemmas","doc":"Retrieve the current current of lemmas.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L99-L105","name":"Mathlib.Tactic.LibrarySearch.cachedData","kind":"opaque","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.cachedData","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L93-L97","name":"Mathlib.Tactic.LibrarySearch.cachePath","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.cachePath","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L80-L89","name":"Mathlib.Tactic.LibrarySearch.buildDiscrTree","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.buildDiscrTree","doc":"Construct the discrimination tree of all lemmas. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L72-L77","name":"Mathlib.Tactic.LibrarySearch.addLemma","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.addLemma","doc":"Insert a lemma into the discrimination tree. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L53-L65","name":"Mathlib.Tactic.LibrarySearch.processLemma","kind":"def","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.processLemma","doc":"Prepare the discrimination tree entries for a lemma. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L49-L50","name":"Mathlib.Tactic.LibrarySearch.instToStringDeclMod","kind":"instance","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.instToStringDeclMod","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L47-L47","name":"Mathlib.Tactic.LibrarySearch.instOrdDeclMod","kind":"instance","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.instOrdDeclMod","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L47-L47","name":"Mathlib.Tactic.LibrarySearch.instDecidableEqDeclMod","kind":"instance","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.instDecidableEqDeclMod","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L46-L46","name":"Mathlib.Tactic.LibrarySearch.DeclMod.mpr","kind":"ctor","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.DeclMod.mpr","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L46-L46","name":"Mathlib.Tactic.LibrarySearch.DeclMod.mp","kind":"ctor","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.DeclMod.mp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L46-L46","name":"Mathlib.Tactic.LibrarySearch.DeclMod.none","kind":"ctor","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.DeclMod.none","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/LibrarySearch.lean#L45-L47","name":"Mathlib.Tactic.LibrarySearch.DeclMod","kind":"inductive","docLink":"./Mathlib/Tactic/LibrarySearch.html#Mathlib.Tactic.LibrarySearch.DeclMod","doc":"A \"modifier\" for a declaration.\n* `none` indicates the original declaration,\n* `mp` indicates that (possibly after binders) the declaration is an `↔`,\n  and we want to consider the forward direction,\n* `mpr` similarly, but for the backward direction.\n"}]}