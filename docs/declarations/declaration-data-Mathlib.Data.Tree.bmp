{"name":"Mathlib.Data.Tree","instances":[{"typeNames":["Eq","Tree"],"name":"instDecidableEqTree","className":"Decidable"},{"typeNames":["Tree"],"name":"instReprTree","className":"Repr"},{"typeNames":["Tree"],"name":"Tree.instInhabitedTree","className":"Inhabited"}],"imports":["Init","Std.Data.RBMap","Mathlib.Data.Num.Basic","Mathlib.Order.Basic","Mathlib.Init.Data.Ordering.Basic","Mathlib.Util.CompileInductive"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L165-L167","name":"Tree.left_node_right_eq_self","kind":"theorem","docLink":"./Mathlib/Data/Tree.html#Tree.left_node_right_eq_self","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L158-L162","name":"Tree.unitRecOn","kind":"def","docLink":"./Mathlib/Data/Tree.html#Tree.unitRecOn","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L152-L152","name":"Tree.«term_△_»","kind":"def","docLink":"./Mathlib/Data/Tree.html#Tree.«term_△_»","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L146-L148","name":"Tree.right","kind":"def","docLink":"./Mathlib/Data/Tree.html#Tree.right","doc":"The right child of the tree, or `nil` if the tree is `nil` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L139-L141","name":"Tree.left","kind":"def","docLink":"./Mathlib/Data/Tree.html#Tree.left","doc":"The left child of the tree, or `nil` if the tree is `nil` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L129-L134","name":"Tree.height_le_numNodes","kind":"theorem","docLink":"./Mathlib/Data/Tree.html#Tree.height_le_numNodes","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L124-L126","name":"Tree.numLeaves_pos","kind":"theorem","docLink":"./Mathlib/Data/Tree.html#Tree.numLeaves_pos","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L120-L121","name":"Tree.numLeaves_eq_numNodes_succ","kind":"theorem","docLink":"./Mathlib/Data/Tree.html#Tree.numLeaves_eq_numNodes_succ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L115-L117","name":"Tree.height","kind":"def","docLink":"./Mathlib/Data/Tree.html#Tree.height","doc":"The height - length of the longest path from the root - of a binary tree "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L108-L110","name":"Tree.numLeaves","kind":"def","docLink":"./Mathlib/Data/Tree.html#Tree.numLeaves","doc":"The number of leaves of a binary tree "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L101-L103","name":"Tree.numNodes","kind":"def","docLink":"./Mathlib/Data/Tree.html#Tree.numNodes","doc":"The number of internal nodes (i.e. not including leaves) of a binary tree "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L94-L96","name":"Tree.map","kind":"def","docLink":"./Mathlib/Data/Tree.html#Tree.map","doc":"Apply a function to each value in the tree.  This is the `map` function for the `Tree` functor.\nTODO: implement `Traversable Tree`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L88-L89","name":"Tree.getOrElse","kind":"def","docLink":"./Mathlib/Data/Tree.html#Tree.getOrElse","doc":"Retrieves an element from the tree, or the provided default value\nif the index is invalid. See `Tree.get`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L79-L83","name":"Tree.get","kind":"def","docLink":"./Mathlib/Data/Tree.html#Tree.get","doc":"Retrieves an element uniquely determined by a `PosNum` from the tree,\ntaking the following path to get to the element:\n- `bit0` - go to left child\n- `bit1` - go to right child\n- `PosNum.one` - retrieve from here "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L65-L71","name":"Tree.indexOf","kind":"def","docLink":"./Mathlib/Data/Tree.html#Tree.indexOf","doc":"Finds the index of an element in the tree assuming the tree has been\nconstructed according to the provided decidable order on its elements.\nIf it hasn't, the result will be incorrect. If it has, but the element\nis not in the tree, returns none. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L56-L58","name":"Tree.ofRBNode","kind":"def","docLink":"./Mathlib/Data/Tree.html#Tree.ofRBNode","doc":"Makes a `Tree α` out of a red-black tree. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L50-L51","name":"Tree.instInhabitedTree","kind":"instance","docLink":"./Mathlib/Data/Tree.html#Tree.instInhabitedTree","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L38-L38","name":"instReprTree","kind":"instance","docLink":"./Mathlib/Data/Tree.html#instReprTree","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L38-L38","name":"instDecidableEqTree","kind":"instance","docLink":"./Mathlib/Data/Tree.html#instDecidableEqTree","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L37-L37","name":"Tree.node","kind":"ctor","docLink":"./Mathlib/Data/Tree.html#Tree.node","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L36-L36","name":"Tree.nil","kind":"ctor","docLink":"./Mathlib/Data/Tree.html#Tree.nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Tree.lean#L35-L38","name":"Tree","kind":"inductive","docLink":"./Mathlib/Data/Tree.html#Tree","doc":"A binary tree with values stored in non-leaf nodes. "}]}