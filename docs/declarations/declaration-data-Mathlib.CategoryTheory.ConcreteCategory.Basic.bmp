{"name":"Mathlib.CategoryTheory.ConcreteCategory.Basic","instances":[{"typeNames":["_builtin_typeu","CategoryTheory.types"],"name":"CategoryTheory.ConcreteCategory.types","className":"CategoryTheory.ConcreteCategory"},{"typeNames":["CategoryTheory.forget₂"],"name":"CategoryTheory.forget₂_faithful","className":"CategoryTheory.Faithful"},{"typeNames":["CategoryTheory.forget₂"],"name":"CategoryTheory.forget₂_preservesMonomorphisms","className":"CategoryTheory.Functor.PreservesMonomorphisms"},{"typeNames":["CategoryTheory.forget₂"],"name":"CategoryTheory.forget₂_preservesEpimorphisms","className":"CategoryTheory.Functor.PreservesEpimorphisms"},{"typeNames":["CategoryTheory.InducedCategory","CategoryTheory.InducedCategory.category"],"name":"CategoryTheory.InducedCategory.concreteCategory","className":"CategoryTheory.ConcreteCategory"},{"typeNames":["CategoryTheory.InducedCategory","CategoryTheory.InducedCategory.category","CategoryTheory.InducedCategory.concreteCategory"],"name":"CategoryTheory.InducedCategory.hasForget₂","className":"CategoryTheory.HasForget₂"},{"typeNames":["CategoryTheory.FullSubcategory","CategoryTheory.FullSubcategory.category"],"name":"CategoryTheory.FullSubcategory.concreteCategory","className":"CategoryTheory.ConcreteCategory"},{"typeNames":["CategoryTheory.FullSubcategory","CategoryTheory.FullSubcategory.category","CategoryTheory.FullSubcategory.concreteCategory"],"name":"CategoryTheory.FullSubcategory.hasForget₂","className":"CategoryTheory.HasForget₂"}],"imports":["Init","Mathlib.CategoryTheory.Types","Mathlib.CategoryTheory.Functor.EpiMono","Mathlib.CategoryTheory.Limits.Constructions.EpiMono"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L281-L284","name":"CategoryTheory.hasForgetToType","kind":"def","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.hasForgetToType","doc":"Every forgetful functor factors through the identity functor. This is not a global instance as\nit is prone to creating type class resolution loops. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L269-L276","name":"CategoryTheory.HasForget₂.mk'","kind":"def","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.HasForget₂.mk'","doc":"In order to construct a “partially forgetting” functor, we do not need to verify functor laws;\nit suffices to ensure that compositions agree with `forget₂ C D ⋙ forget D = forget C`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L260-L263","name":"CategoryTheory.FullSubcategory.hasForget₂","kind":"instance","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.FullSubcategory.hasForget₂","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L255-L257","name":"CategoryTheory.FullSubcategory.concreteCategory","kind":"instance","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.FullSubcategory.concreteCategory","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L249-L252","name":"CategoryTheory.InducedCategory.hasForget₂","kind":"instance","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.InducedCategory.hasForget₂","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L243-L246","name":"CategoryTheory.InducedCategory.concreteCategory","kind":"instance","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.InducedCategory.concreteCategory","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L233-L240","name":"CategoryTheory.forget₂_preservesEpimorphisms","kind":"instance","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂_preservesEpimorphisms","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L223-L230","name":"CategoryTheory.forget₂_preservesMonomorphisms","kind":"instance","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂_preservesMonomorphisms","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L218-L220","name":"CategoryTheory.forget₂_faithful","kind":"instance","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂_faithful","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L213-L215","name":"CategoryTheory.forget₂","kind":"def","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂","doc":"The forgetful functor `C ⥤ D` between concrete categories for which we have an instance\n`HasForget₂ C `. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L207-L207","name":"CategoryTheory.HasForget₂.forget_comp","kind":"def","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.HasForget₂.forget_comp","doc":"It covers the `ConcreteCategory.forget` for `C` and `D` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L205-L205","name":"CategoryTheory.HasForget₂.forget₂","kind":"def","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.HasForget₂.forget₂","doc":"A functor from `C` to `D` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L202-L203","name":"CategoryTheory.HasForget₂.mk","kind":"ctor","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.HasForget₂.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L202-L207","name":"CategoryTheory.HasForget₂","kind":"class","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.HasForget₂","doc":"`HasForget₂ C D`, where `C` and `D` are both concrete categories, provides a functor\n`forget₂ C D : C ⥤ D` and a proof that `forget₂ ⋙ (forget D) = forget C`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L194-L194","name":"CategoryTheory.ConcreteCategory.hasCoeToFun_Type","kind":"theorem","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hasCoeToFun_Type","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L187-L190","name":"CategoryTheory.ConcreteCategory.bijective_of_isIso","kind":"theorem","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.bijective_of_isIso","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L182-L184","name":"CategoryTheory.ConcreteCategory.epi_iff_surjective_of_preservesPushout","kind":"theorem","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.epi_iff_surjective_of_preservesPushout","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L177-L179","name":"CategoryTheory.ConcreteCategory.surjective_of_epi_of_preservesPushout","kind":"theorem","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.surjective_of_epi_of_preservesPushout","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L172-L174","name":"CategoryTheory.ConcreteCategory.epi_of_surjective","kind":"theorem","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.epi_of_surjective","doc":"In any concrete category, surjective morphisms are epimorphisms. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L166-L168","name":"CategoryTheory.ConcreteCategory.mono_iff_injective_of_preservesPullback","kind":"theorem","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.mono_iff_injective_of_preservesPullback","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L161-L163","name":"CategoryTheory.ConcreteCategory.injective_of_mono_of_preservesPullback","kind":"theorem","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.injective_of_mono_of_preservesPullback","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L156-L158","name":"CategoryTheory.ConcreteCategory.mono_of_injective","kind":"theorem","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.mono_of_injective","doc":"In any concrete category, injective morphisms are monomorphisms. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L151-L152","name":"CategoryTheory.ConcreteCategory.congr_arg","kind":"theorem","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.congr_arg","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L147-L148","name":"CategoryTheory.ConcreteCategory.congr_hom","kind":"theorem","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.congr_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L144-L145","name":"CategoryTheory.comp_apply'","kind":"theorem","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.comp_apply'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L140-L141","name":"CategoryTheory.comp_apply","kind":"theorem","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.comp_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L136-L137","name":"CategoryTheory.id_apply","kind":"theorem","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.id_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L132-L133","name":"CategoryTheory.coe_comp","kind":"theorem","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.coe_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L128-L129","name":"CategoryTheory.coe_id","kind":"theorem","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.coe_id","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L124-L125","name":"CategoryTheory.congr_hom","kind":"theorem","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.congr_hom","doc":"Analogue of `congr_fun h x`,\nwhen `h : f = g` is an equality between morphisms in a concrete category.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L118-L118","name":"CategoryTheory.forget_map_eq_coe","kind":"theorem","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget_map_eq_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L111-L115","name":"CategoryTheory.ConcreteCategory.hom_ext","kind":"theorem","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom_ext","doc":"In any concrete category, we can test equality of morphisms by pointwise evaluations."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L104-L106","name":"CategoryTheory.ConcreteCategory.funLike","kind":"def","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.funLike","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L89-L91","name":"CategoryTheory.ConcreteCategory.hasCoeToSort","kind":"def","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hasCoeToSort","doc":"Provide a coercion to `Type u` for a concrete category. This is not marked as an instance\nas it could potentially apply to every type, and so is too expensive in typeclass search.\n\nYou can use it on particular examples as:\n```\ninstance : HasCoeToSort X := ConcreteCategory.hasCoeToSort X\n```\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L77-L78","name":"CategoryTheory.ConcreteCategory.types","kind":"instance","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.types","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L71-L72","name":"CategoryTheory.forget","kind":"def","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget","doc":"The forgetful functor from a concrete category to `Type u`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L62-L62","name":"CategoryTheory.ConcreteCategory.forget_faithful","kind":"def","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.forget_faithful","doc":"That functor is faithful "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L60-L60","name":"CategoryTheory.ConcreteCategory.forget","kind":"def","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.forget","doc":"We have a functor to Type "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L58-L58","name":"CategoryTheory.ConcreteCategory.mk","kind":"ctor","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/ConcreteCategory/Basic.lean#L58-L62","name":"CategoryTheory.ConcreteCategory","kind":"class","docLink":"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory","doc":"A concrete category is a category `C` with a fixed faithful functor `Forget : C ⥤ Type`.\n\nNote that `ConcreteCategory` potentially depends on three independent universe levels,\n* the universe level `w` appearing in `Forget : C ⥤ Type w`\n* the universe level `v` of the morphisms (i.e. we have a `Category.{v} C`)\n* the universe level `u` of the objects (i.e `C : Type u`)\nThey are specified that order, to avoid unnecessary universe annotations.\n"}]}