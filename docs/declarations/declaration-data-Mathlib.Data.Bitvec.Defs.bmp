{"name":"Mathlib.Data.Bitvec.Defs","instances":[{"typeNames":["Bitvec"],"name":"Bitvec.instComplementBitvec","className":"Complement"},{"typeNames":["Bitvec"],"name":"Bitvec.instAndOpBitvec","className":"AndOp"},{"typeNames":["Bitvec"],"name":"Bitvec.instOrOpBitvec","className":"OrOp"},{"typeNames":["Bitvec"],"name":"Bitvec.instXorBitvec","className":"Xor"},{"typeNames":["Bitvec"],"name":"Bitvec.instZeroBitvec","className":"Zero"},{"typeNames":["Bitvec"],"name":"Bitvec.instOneBitvec","className":"One"},{"typeNames":["Bitvec"],"name":"Bitvec.instAddBitvec","className":"Add"},{"typeNames":["Bitvec"],"name":"Bitvec.instSubBitvec","className":"Sub"},{"typeNames":["Bitvec"],"name":"Bitvec.instNegBitvec","className":"Neg"},{"typeNames":["Bitvec"],"name":"Bitvec.instMulBitvec","className":"Mul"},{"typeNames":["Bitvec"],"name":"Bitvec.instPreorderBitvec","className":"Preorder"},{"typeNames":["Bitvec"],"name":"Bitvec.instReprBitvec","className":"Repr"},{"typeNames":["Bitvec.Ult"],"name":"instDecidableUlt","className":"Decidable"},{"typeNames":["Bitvec.Ugt"],"name":"instDecidableUgt","className":"Decidable"},{"typeNames":["Bitvec","Nat","Bitvec"],"name":"instHShiftLeftBitvecNat","className":"HShiftLeft"},{"typeNames":["Bitvec","Nat","Bitvec"],"name":"instHShiftRightBitvecNat","className":"HShiftRight"},{"typeNames":["Bitvec"],"name":"instShiftLeftBitvec","className":"ShiftLeft"},{"typeNames":["Bitvec"],"name":"instShiftRightBitvec","className":"ShiftRight"}],"imports":["Init","Mathlib.Data.Vector.Basic","Mathlib.Data.Nat.Pow","Init.Data.Format.Basic","Mathlib.Init.Data.Nat.Lemmas"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L365-L365","name":"instShiftRightBitvec","kind":"instance","docLink":"./Mathlib/Data/Bitvec/Defs.html#instShiftRightBitvec","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L363-L363","name":"instShiftLeftBitvec","kind":"instance","docLink":"./Mathlib/Data/Bitvec/Defs.html#instShiftLeftBitvec","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L361-L361","name":"instHShiftRightBitvecNat","kind":"instance","docLink":"./Mathlib/Data/Bitvec/Defs.html#instHShiftRightBitvecNat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L359-L359","name":"instHShiftLeftBitvecNat","kind":"instance","docLink":"./Mathlib/Data/Bitvec/Defs.html#instHShiftLeftBitvecNat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L356-L357","name":"instDecidableUgt","kind":"instance","docLink":"./Mathlib/Data/Bitvec/Defs.html#instDecidableUgt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L353-L354","name":"instDecidableUlt","kind":"instance","docLink":"./Mathlib/Data/Bitvec/Defs.html#instDecidableUlt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L348-L349","name":"Bitvec.instReprBitvec","kind":"instance","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.instReprBitvec","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L333-L337","name":"Bitvec.toInt","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.toInt","doc":"Return the integer encoded by the input bitvector "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L327-L328","name":"Bitvec.toFin","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.toFin","doc":"convert `Bitvec` to `fin` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L322-L323","name":"Bitvec.ofFin","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.ofFin","doc":"convert `fin` to `Bitvec` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L318-L319","name":"Bitvec.instPreorderBitvec","kind":"instance","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.instPreorderBitvec","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L314-L315","name":"Bitvec.toNat","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.toNat","doc":"Return the natural number encoded by the input bitvector "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L309-L310","name":"Bitvec.bitsToNat","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.bitsToNat","doc":"Given a `List` of `Bool`s, return the `nat` they represent as a list of binary digits. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L304-L305","name":"Bitvec.addLsb","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.addLsb","doc":"`add_lsb r b` is `r + r + 1` if `b` is `true` and `r + r` otherwise. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L299-L301","name":"Bitvec.ofInt","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.ofInt","doc":"Create a bitvector from an `Int`. The ring homomorphism from Int to bitvectors. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L293-L295","name":"Bitvec.ofNat","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.ofNat","doc":"Create a bitvector from a `nat` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L279-L280","name":"Bitvec.Sge","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.Sge","doc":"signed greater-than-or-equal-to proposition "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L274-L275","name":"Bitvec.Sle","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.Sle","doc":"signed less-than-or-equal-to proposition "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L269-L270","name":"Bitvec.Sgt","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.Sgt","doc":"signed greater-than proposition "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L264-L265","name":"Bitvec.Slt","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.Slt","doc":"signed less-than proposition "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L254-L260","name":"Bitvec.sborrow","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.sborrow","doc":"`sborrow x y` returns `true` iff `x < y` as two's complement integers "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L249-L250","name":"Bitvec.Uge","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.Uge","doc":"unsigned greater-than-or-equal-to proposition "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L244-L245","name":"Bitvec.Ule","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.Ule","doc":"unsigned less-than-or-equal-to proposition "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L239-L240","name":"Bitvec.Ugt","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.Ugt","doc":"unsigned greater-than proposition "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L234-L235","name":"Bitvec.Ult","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.Ult","doc":"unsigned less-than proposition "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L229-L230","name":"Bitvec.uborrow","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.uborrow","doc":"`uborrow x y` returns `true` iff the \"subtract with borrow\" operation on `x`, `y` and `false`\nrequired a borrow. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L215-L216","name":"Bitvec.instMulBitvec","kind":"instance","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.instMulBitvec","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L210-L212","name":"Bitvec.mul","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.mul","doc":"The product of two bitvectors "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L206-L207","name":"Bitvec.instNegBitvec","kind":"instance","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.instNegBitvec","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L203-L204","name":"Bitvec.instSubBitvec","kind":"instance","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.instSubBitvec","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L200-L201","name":"Bitvec.instAddBitvec","kind":"instance","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.instAddBitvec","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L197-L198","name":"Bitvec.instOneBitvec","kind":"instance","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.instOneBitvec","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L194-L195","name":"Bitvec.instZeroBitvec","kind":"instance","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.instZeroBitvec","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L190-L191","name":"Bitvec.sub","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.sub","doc":"The difference of two bitvectors "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L184-L186","name":"Bitvec.sbb","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.sbb","doc":"Subtract with borrow "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L179-L180","name":"Bitvec.add","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.add","doc":"The sum of two bitvectors "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L172-L175","name":"Bitvec.adc","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.adc","doc":"Add with carry (no overflow) "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L166-L168","name":"Bitvec.neg","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.neg","doc":"`neg x` is the two's complement of `x`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L161-L162","name":"Bitvec.carry","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.carry","doc":"`carry x y c` is `x && y || x && c || y && c`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L156-L157","name":"Bitvec.xor3","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.xor3","doc":"`xor3 x y c` is `((x XOR y) XOR c)`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L143-L144","name":"Bitvec.instXorBitvec","kind":"instance","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.instXorBitvec","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L140-L141","name":"Bitvec.instOrOpBitvec","kind":"instance","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.instOrOpBitvec","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L137-L138","name":"Bitvec.instAndOpBitvec","kind":"instance","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.instAndOpBitvec","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L134-L135","name":"Bitvec.instComplementBitvec","kind":"instance","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.instComplementBitvec","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L130-L131","name":"Bitvec.xor","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.xor","doc":"bitwise xor "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L124-L125","name":"Bitvec.or","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.or","doc":"bitwise or "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L118-L119","name":"Bitvec.and","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.and","doc":"bitwise and "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L112-L113","name":"Bitvec.not","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.not","doc":"bitwise not "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L96-L98","name":"Bitvec.sshr","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.sshr","doc":"signed shift right "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L91-L92","name":"Bitvec.ushr","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.ushr","doc":"unsigned shift right "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L78-L87","name":"Bitvec.fillShr","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.fillShr","doc":"`fill_shr x i fill` is the bitvector obtained by right-shifting `x` `i` times and then\npadding with `fill : Bool`. If `x.length < i` then this will return the constant `fill`\nbitvector. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L71-L72","name":"Bitvec.shl","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.shl","doc":"`shl x i` is the bitvector obtained by left-shifting `x` `i` times and padding with `false`.\nIf `x.length < i` then this will return the all-`false`s bitvector. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L58-L59","name":"Bitvec.append","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.append","doc":"`Bitvec` specific version of `Vector.append` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L53-L54","name":"Bitvec.cong","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.cong","doc":"Create a bitvector from another with a provably equal length. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L47-L49","name":"Bitvec.one","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.one","doc":"Create a bitvector of length `n` whose `n-1`st entry is 1 and other entries are 0. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L41-L42","name":"Bitvec.zero","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec.zero","doc":"Create a zero bitvector "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Bitvec/Defs.lean#L26-L27","name":"Bitvec","kind":"def","docLink":"./Mathlib/Data/Bitvec/Defs.html#Bitvec","doc":"`Bitvec n` is a `Vector` of `Bool` with length `n`. "}]}