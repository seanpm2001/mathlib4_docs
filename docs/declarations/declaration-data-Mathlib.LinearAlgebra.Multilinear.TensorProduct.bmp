{"name":"Mathlib.LinearAlgebra.Multilinear.TensorProduct","instances":[],"imports":["Init","Mathlib.LinearAlgebra.Multilinear.Basic","Mathlib.LinearAlgebra.TensorProduct"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Multilinear/TensorProduct.lean#L92-L96","name":"MultilinearMap.domCoprod_domDomCongr_sumCongr","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/TensorProduct.html#MultilinearMap.domCoprod_domDomCongr_sumCongr","doc":"When passed an `Equiv.sumCongr`, `MultilinearMap.domDomCongr` distributes over\n`MultilinearMap.domCoprod`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Multilinear/TensorProduct.lean#L85-L87","name":"MultilinearMap.domCoprod'_apply","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/TensorProduct.html#MultilinearMap.domCoprod'_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Multilinear/TensorProduct.lean#L65-L81","name":"MultilinearMap.domCoprod'","kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/TensorProduct.html#MultilinearMap.domCoprod'","doc":"A more bundled version of `MultilinearMap.domCoprod` that maps\n`((ι₁ → N) → N₁) ⊗ ((ι₂ → N) → N₂)` to `(ι₁ ⊕ ι₂ → N) → N₁ ⊗ N₂`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Multilinear/TensorProduct.lean#L49-L60","name":"MultilinearMap.domCoprod","kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/TensorProduct.html#MultilinearMap.domCoprod","doc":"Given two multilinear maps `(ι₁ → N) → N₁` and `(ι₂ → N) → N₂`, this produces the map\n`(ι₁ ⊕ ι₂ → N) → N₁ ⊗ N₂` by taking the coproduct of the domain and the tensor product\nof the codomain.\n\nThis can be thought of as combining `Equiv.sumArrowEquivProdArrow.symm` with\n`TensorProduct.map`, noting that the two operations can't be separated as the intermediate result\nis not a `MultilinearMap`.\n\nWhile this can be generalized to work for dependent `Π i : ι₁, N'₁ i` instead of `ι₁ → N`, doing so\nintroduces `Sum.elim N'₁ N'₂` types in the result which are difficult to work with and not defeq\nto the simple case defined here. See [this zulip thread](\nhttps://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Instances.20on.20.60sum.2Eelim.20A.20B.20i.60/near/218484619).\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/LinearAlgebra/Multilinear/TensorProduct.lean#L48-L48","name":"MultilinearMap.domCoprod_apply","kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/TensorProduct.html#MultilinearMap.domCoprod_apply","doc":""}]}