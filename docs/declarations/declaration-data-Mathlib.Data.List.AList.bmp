{"name":"Mathlib.Data.List.AList","instances":[{"typeNames":["Eq","AList"],"name":"AList.instDecidableEqAList","className":"Decidable"},{"typeNames":["AList"],"name":"AList.instMembershipAList","className":"Membership"},{"typeNames":["AList"],"name":"AList.instEmptyCollectionAList","className":"EmptyCollection"},{"typeNames":["AList"],"name":"AList.instInhabitedAList","className":"Inhabited"},{"typeNames":["Membership.mem","AList","AList.instMembershipAList"],"name":"AList.instDecidableMemAListInstMembershipAList","className":"Decidable"},{"typeNames":["AList"],"name":"AList.instUnionAList","className":"Union"}],"imports":["Init","Mathlib.Data.List.Sigma"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L503-L525","name":"AList.union_comm_of_disjoint","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.union_comm_of_disjoint","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L497-L498","name":"AList.Disjoint","kind":"def","docLink":"./Mathlib/Data/List/AList.html#AList.Disjoint","doc":"Two associative lists are disjoint if they have no common keys. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L486-L488","name":"AList.union_assoc","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.union_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L482-L483","name":"AList.insert_union","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.insert_union","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L477-L479","name":"AList.mem_lookup_union_middle","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.mem_lookup_union_middle","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L473-L475","name":"AList.lookup_union_eq_some","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.lookup_union_eq_some","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L466-L468","name":"AList.mem_lookup_union","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.mem_lookup_union","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L461-L462","name":"AList.lookup_union_right","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.lookup_union_right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L456-L457","name":"AList.lookup_union_left","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.lookup_union_left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L451-L452","name":"AList.union_erase","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.union_erase","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L446-L448","name":"AList.perm_union","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.perm_union","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L442-L443","name":"AList.mem_union","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.mem_union","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L437-L438","name":"AList.union_empty","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.union_empty","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L432-L433","name":"AList.empty_union","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.empty_union","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L427-L428","name":"AList.union_entries","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.union_entries","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L423-L424","name":"AList.instUnionAList","kind":"instance","docLink":"./Mathlib/Data/List/AList.html#AList.instUnionAList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L419-L420","name":"AList.union","kind":"def","docLink":"./Mathlib/Data/List/AList.html#AList.union","doc":"`s₁ ∪ s₂` is the key-based union of two association lists. It is\nleft-biased: if there exists an `a ∈ s₁`, `lookup a (s₁ ∪ s₂) = lookup a s₁`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L409-L410","name":"AList.extract_eq_lookup_erase","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.extract_eq_lookup_erase","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L401-L405","name":"AList.extract","kind":"def","docLink":"./Mathlib/Data/List/AList.html#AList.extract","doc":"Erase a key from the map, and return the corresponding value, if found. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L390-L394","name":"AList.insertRec_insert_mk","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.insertRec_insert_mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L376-L387","name":"AList.insertRec_insert","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.insertRec_insert","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L369-L373","name":"AList.insertRec_empty","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.insertRec_empty","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L355-L362","name":"AList.insertRec","kind":"def","docLink":"./Mathlib/Data/List/AList.html#AList.insertRec","doc":"Recursion on an `AList`, using `insert`. Use as `induction l using AList.insertRec`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L348-L350","name":"AList.mk_cons_eq_insert","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.mk_cons_eq_insert","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L343-L345","name":"AList.toAList_cons","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.toAList_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L339-L340","name":"AList.entries_toAList","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.entries_toAList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L332-L335","name":"AList.insert_singleton_eq","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.insert_singleton_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L325-L328","name":"AList.insert_insert_of_ne","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.insert_insert_of_ne","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L320-L322","name":"AList.insert_insert","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.insert_insert","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L315-L316","name":"AList.lookup_to_alist","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.lookup_to_alist","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L309-L311","name":"AList.lookup_insert_ne","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.lookup_insert_ne","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L304-L305","name":"AList.lookup_insert","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.lookup_insert","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L298-L300","name":"AList.perm_insert","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.perm_insert","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L294-L295","name":"AList.keys_insert","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.keys_insert","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L289-L290","name":"AList.mem_insert","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.mem_insert","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L284-L285","name":"AList.insert_empty","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.insert_empty","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L278-L280","name":"AList.insert_of_neg","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.insert_of_neg","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L273-L274","name":"AList.insert_entries_of_neg","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.insert_entries_of_neg","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L268-L270","name":"AList.insert_entries","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.insert_entries","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L263-L264","name":"AList.insert","kind":"def","docLink":"./Mathlib/Data/List/AList.html#AList.insert","doc":"Insert a key-value pair into an association list and erase any existing pair\nwith the same key. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L254-L255","name":"AList.erase_erase","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.erase_erase","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L250-L251","name":"AList.lookup_erase_ne","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.lookup_erase_ne","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L245-L246","name":"AList.lookup_erase","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.lookup_erase","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L239-L241","name":"AList.perm_erase","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.perm_erase","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L235-L236","name":"AList.mem_erase","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.mem_erase","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L230-L231","name":"AList.keys_erase","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.keys_erase","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L225-L226","name":"AList.erase","kind":"def","docLink":"./Mathlib/Data/List/AList.html#AList.erase","doc":"Erase a key from the map. If the key is not present, do nothing. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L213-L214","name":"AList.foldl","kind":"def","docLink":"./Mathlib/Data/List/AList.html#AList.foldl","doc":"Fold a function over the key-value pairs in the map. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L205-L207","name":"AList.perm_replace","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.perm_replace","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L201-L202","name":"AList.mem_replace","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.mem_replace","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L196-L197","name":"AList.keys_replace","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.keys_replace","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L191-L192","name":"AList.replace","kind":"def","docLink":"./Mathlib/Data/List/AList.html#AList.replace","doc":"Replace a key with a given value in an association list.\nIf the key is not present it does nothing. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L183-L184","name":"AList.instDecidableMemAListInstMembershipAList","kind":"instance","docLink":"./Mathlib/Data/List/AList.html#AList.instDecidableMemAListInstMembershipAList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L178-L180","name":"AList.perm_lookup","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.perm_lookup","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L173-L175","name":"AList.mem_lookup_iff","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.mem_lookup_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L169-L170","name":"AList.lookup_eq_none","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.lookup_eq_none","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L165-L166","name":"AList.lookup_isSome","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.lookup_isSome","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L161-L162","name":"AList.lookup_empty","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.lookup_empty","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L156-L157","name":"AList.lookup","kind":"def","docLink":"./Mathlib/Data/List/AList.html#AList.lookup","doc":"Look up the value associated to a key in an association list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L144-L145","name":"AList.keys_singleton","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.keys_singleton","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L139-L140","name":"AList.singleton_entries","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.singleton_entries","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L134-L135","name":"AList.singleton","kind":"def","docLink":"./Mathlib/Data/List/AList.html#AList.singleton","doc":"The singleton association list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L126-L127","name":"AList.keys_empty","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.keys_empty","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L121-L122","name":"AList.empty_entries","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.empty_entries","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L116-L117","name":"AList.not_mem_empty","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.not_mem_empty","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L112-L113","name":"AList.instInhabitedAList","kind":"instance","docLink":"./Mathlib/Data/List/AList.html#AList.instInhabitedAList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L109-L110","name":"AList.instEmptyCollectionAList","kind":"instance","docLink":"./Mathlib/Data/List/AList.html#AList.instEmptyCollectionAList","doc":"The empty association list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L101-L102","name":"AList.mem_of_perm","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.mem_of_perm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L97-L98","name":"AList.mem_keys","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.mem_keys","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L94-L95","name":"AList.instMembershipAList","kind":"instance","docLink":"./Mathlib/Data/List/AList.html#AList.instMembershipAList","doc":"The predicate `a ∈ s` means that `s` has a value associated to the key `a`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L86-L87","name":"AList.keys_nodup","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.keys_nodup","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L82-L83","name":"AList.keys","kind":"def","docLink":"./Mathlib/Data/List/AList.html#AList.keys","doc":"The list of keys of an association list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L75-L76","name":"AList.instDecidableEqAList","kind":"instance","docLink":"./Mathlib/Data/List/AList.html#AList.instDecidableEqAList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L71-L72","name":"AList.ext_iff","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.ext_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L67-L68","name":"AList.ext","kind":"theorem","docLink":"./Mathlib/Data/List/AList.html#AList.ext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L59-L61","name":"List.toAList","kind":"def","docLink":"./Mathlib/Data/List/AList.html#List.toAList","doc":"Given `l : List (Sigma β)`, create a term of type `AList β` by removing\nentries with duplicate keys. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L54-L54","name":"AList.nodupKeys","kind":"def","docLink":"./Mathlib/Data/List/AList.html#AList.nodupKeys","doc":"There are no duplicate keys in `entries` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L52-L52","name":"AList.entries","kind":"def","docLink":"./Mathlib/Data/List/AList.html#AList.entries","doc":"The underlying `List` of an `AList` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L50-L50","name":"AList.mk","kind":"ctor","docLink":"./Mathlib/Data/List/AList.html#AList.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/AList.lean#L50-L54","name":"AList","kind":"structure","docLink":"./Mathlib/Data/List/AList.html#AList","doc":"`AList β` is a key-value map stored as a `List` (i.e. a linked list).\nIt is a wrapper around certain `List` functions with the added constraint\nthat the list have unique keys. "}]}