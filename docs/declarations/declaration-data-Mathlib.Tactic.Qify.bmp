{"name":"Mathlib.Tactic.Qify","instances":[],"imports":["Init","Mathlib.Tactic.Basic","Mathlib.Tactic.NormCast","Mathlib.Tactic.Qify.Attr","Mathlib.Tactic.Zify","Mathlib.Data.Rat.Cast"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Qify.lean#L70-L71","name":"Mathlib.Tactic.Qify.int_cast_ne","kind":"theorem","docLink":"./Mathlib/Tactic/Qify.html#Mathlib.Tactic.Qify.int_cast_ne","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Qify.lean#L69-L69","name":"Mathlib.Tactic.Qify.int_cast_lt","kind":"theorem","docLink":"./Mathlib/Tactic/Qify.html#Mathlib.Tactic.Qify.int_cast_lt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Qify.lean#L68-L68","name":"Mathlib.Tactic.Qify.int_cast_le","kind":"theorem","docLink":"./Mathlib/Tactic/Qify.html#Mathlib.Tactic.Qify.int_cast_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Qify.lean#L67-L67","name":"Mathlib.Tactic.Qify.int_cast_eq","kind":"theorem","docLink":"./Mathlib/Tactic/Qify.html#Mathlib.Tactic.Qify.int_cast_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Qify.lean#L36-L58","name":"Mathlib.Tactic.Qify.qify","kind":"def","docLink":"./Mathlib/Tactic/Qify.html#Mathlib.Tactic.Qify.qify","doc":"The `qify` tactic is used to shift propositions from `ℕ` or `ℤ` to `ℚ`.\nThis is often useful since `ℚ` has well-behaved division.\n```\nexample (a b c x y z : ℕ) (h : ¬ x*y*z < 0) : c < a + 3*b := by\n  qify\n  qify at h\n  /-\n  h : ¬↑x * ↑y * ↑z < 0\n  ⊢ ↑c < ↑a + 3 * ↑b\n  -/\n  sorry\n```\n`qify` can be given extra lemmas to use in simplification. This is especially useful in the\npresence of nat subtraction: passing `≤` arguments will allow `push_cast` to do more work.\n```\nexample (a b c : ℤ) (h : a / b = c) (hab : b ∣ a) (hb : b ≠ 0) : a = c * b := by\n  qify [hab] at h hb ⊢\n  exact (div_eq_iff hb).1 h\n```\n`qify` makes use of the `@[zify_simps]` and `@[qify_simps]` attributes to move propositions,\nand the `push_cast` tactic to simplify the `ℚ`-valued expressions. "}]}