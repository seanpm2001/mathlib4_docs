{"name":"Mathlib.CategoryTheory.Limits.Preserves.Shapes.Kernels","instances":[{"typeNames":["Prefunctor.obj","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.Functor.toPrefunctor","Prefunctor.obj","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.Functor.toPrefunctor","Prefunctor.map","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.Functor.toPrefunctor"],"name":"CategoryTheory.Limits.instHasKernelObjToQuiverToCategoryStructToQuiverToCategoryStructToPrefunctorMap","className":"CategoryTheory.Limits.HasLimit"},{"typeNames":["Prefunctor.obj","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.Functor.toPrefunctor","CategoryTheory.Limits.kernel","CategoryTheory.Limits.kernel","Prefunctor.obj","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.Functor.toPrefunctor","Prefunctor.map","CategoryTheory.Limits.kernelComparison"],"name":"CategoryTheory.Limits.instIsIsoObjToQuiverToCategoryStructToQuiverToCategoryStructToPrefunctorKernelKernelMapKernelComparison","className":"CategoryTheory.IsIso"},{"typeNames":["Prefunctor.obj","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.Functor.toPrefunctor","Prefunctor.obj","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.Functor.toPrefunctor","Prefunctor.map","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.Functor.toPrefunctor"],"name":"CategoryTheory.Limits.instHasCokernelObjToQuiverToCategoryStructToQuiverToCategoryStructToPrefunctorMap","className":"CategoryTheory.Limits.HasColimit"},{"typeNames":["CategoryTheory.Limits.cokernel","Prefunctor.obj","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.Functor.toPrefunctor","Prefunctor.map","Prefunctor.obj","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.CategoryStruct.toQuiver","CategoryTheory.Category.toCategoryStruct","CategoryTheory.Functor.toPrefunctor","CategoryTheory.Limits.cokernel","CategoryTheory.Limits.cokernelComparison"],"name":"CategoryTheory.Limits.instIsIsoCokernelObjToQuiverToCategoryStructToQuiverToCategoryStructToPrefunctorMapCokernelCokernelComparison","className":"CategoryTheory.IsIso"}],"imports":["Init","Mathlib.CategoryTheory.Limits.Shapes.Kernels","Mathlib.CategoryTheory.Limits.Preserves.Shapes.Zero"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.lean#L222-L230","name":"CategoryTheory.Limits.preserves_cokernel_iso_comp_cokernel_map","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.html#CategoryTheory.Limits.preserves_cokernel_iso_comp_cokernel_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.lean#L221-L221","name":"CategoryTheory.Limits.preserves_cokernel_iso_comp_cokernel_map_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.html#CategoryTheory.Limits.preserves_cokernel_iso_comp_cokernel_map_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.lean#L217-L219","name":"CategoryTheory.Limits.instIsIsoCokernelObjToQuiverToCategoryStructToQuiverToCategoryStructToPrefunctorMapCokernelCokernelComparison","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.html#CategoryTheory.Limits.instIsIsoCokernelObjToQuiverToCategoryStructToQuiverToCategoryStructToPrefunctorMapCokernelCokernelComparison","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.lean#L212-L214","name":"CategoryTheory.Limits.PreservesCokernel.iso_inv","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.html#CategoryTheory.Limits.PreservesCokernel.iso_inv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.lean#L206-L208","name":"CategoryTheory.Limits.PreservesCokernel.iso","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.html#CategoryTheory.Limits.PreservesCokernel.iso","doc":"If `G` preserves the cokernel of `f`, then the cokernel comparison map for `G` at `f` is\nan isomorphism.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.lean#L194-L198","name":"CategoryTheory.Limits.PreservesCokernel.ofIsoComparison","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.html#CategoryTheory.Limits.PreservesCokernel.ofIsoComparison","doc":"If the cokernel comparison map for `G` at `f` is an isomorphism, then `G` preserves the\ncokernel of `f`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.lean#L186-L187","name":"CategoryTheory.Limits.instHasCokernelObjToQuiverToCategoryStructToQuiverToCategoryStructToPrefunctorMap","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.html#CategoryTheory.Limits.instHasCokernelObjToQuiverToCategoryStructToQuiverToCategoryStructToPrefunctorMap","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.lean#L178-L183","name":"CategoryTheory.Limits.isColimitOfHasCokernelOfPreservesColimit","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.html#CategoryTheory.Limits.isColimitOfHasCokernelOfPreservesColimit","doc":"If `G` preserves cokernels and `C` has them, then the cofork constructed of the mapped morphisms of\na cokernel cofork is a colimit.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.lean#L164-L169","name":"CategoryTheory.Limits.isColimitCoforkMapOfIsColimit'","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.html#CategoryTheory.Limits.isColimitCoforkMapOfIsColimit'","doc":"The property of preserving cokernels expressed in terms of cokernel coforks.\n\nThis is a variant of `isColimitCoforkMapOfIsColimit` for equalizers,\nwhich we can't use directly between `G.map 0 = 0` does not hold definitionally.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.lean#L146-L156","name":"CategoryTheory.Limits.isColimitMapCoconeCoforkEquiv'","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.html#CategoryTheory.Limits.isColimitMapCoconeCoforkEquiv'","doc":"The map of a cokernel cofork is a colimit iff\nthe cokernel cofork consisting of the mapped morphisms is a colimit.\nThis essentially lets us commute `CokernelCofork.ofÏ€` with `Functor.mapCocone`.\n\nThis is a variant of `isColimitMapCoconeCoforkEquiv` for equalizers,\nwhich we can't use directly between `G.map 0 = 0` does not hold definitionally.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.lean#L123-L130","name":"CategoryTheory.Limits.kernel_map_comp_preserves_kernel_iso_inv","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.html#CategoryTheory.Limits.kernel_map_comp_preserves_kernel_iso_inv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.lean#L122-L122","name":"CategoryTheory.Limits.kernel_map_comp_preserves_kernel_iso_inv_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.html#CategoryTheory.Limits.kernel_map_comp_preserves_kernel_iso_inv_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.lean#L118-L120","name":"CategoryTheory.Limits.instIsIsoObjToQuiverToCategoryStructToQuiverToCategoryStructToPrefunctorKernelKernelMapKernelComparison","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.html#CategoryTheory.Limits.instIsIsoObjToQuiverToCategoryStructToQuiverToCategoryStructToPrefunctorKernelKernelMapKernelComparison","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.lean#L113-L115","name":"CategoryTheory.Limits.PreservesKernel.iso_hom","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.html#CategoryTheory.Limits.PreservesKernel.iso_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.lean#L108-L109","name":"CategoryTheory.Limits.PreservesKernel.iso","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.html#CategoryTheory.Limits.PreservesKernel.iso","doc":"If `G` preserves the kernel of `f`, then the kernel comparison map for `G` at `f` is\nan isomorphism.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.lean#L96-L100","name":"CategoryTheory.Limits.PreservesKernel.ofIsoComparison","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.html#CategoryTheory.Limits.PreservesKernel.ofIsoComparison","doc":"If the kernel comparison map for `G` at `f` is an isomorphism, then `G` preserves the\nkernel of `f`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.lean#L88-L89","name":"CategoryTheory.Limits.instHasKernelObjToQuiverToCategoryStructToQuiverToCategoryStructToPrefunctorMap","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.html#CategoryTheory.Limits.instHasKernelObjToQuiverToCategoryStructToQuiverToCategoryStructToPrefunctorMap","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.lean#L80-L85","name":"CategoryTheory.Limits.isLimitOfHasKernelOfPreservesLimit","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.html#CategoryTheory.Limits.isLimitOfHasKernelOfPreservesLimit","doc":"If `G` preserves kernels and `C` has them, then the fork constructed of the mapped morphisms of\na kernel fork is a limit.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.lean#L67-L72","name":"CategoryTheory.Limits.isLimitForkMapOfIsLimit'","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.html#CategoryTheory.Limits.isLimitForkMapOfIsLimit'","doc":"The property of preserving kernels expressed in terms of kernel forks.\n\nThis is a variant of `isLimitForkMapOfIsLimit` for equalizers,\nwhich we can't use directly between `G.map 0 = 0` does not hold definitionally.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.lean#L51-L59","name":"CategoryTheory.Limits.isLimitMapConeForkEquiv'","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Shapes/Kernels.html#CategoryTheory.Limits.isLimitMapConeForkEquiv'","doc":"The map of a kernel fork is a limit iff\nthe kernel fork consisting of the mapped morphisms is a limit.\nThis essentially lets us commute `KernelFork.ofÎ¹` with `Functor.mapCone`.\n\nThis is a variant of `isLimitMapConeForkEquiv` for equalizers,\nwhich we can't use directly between `G.map 0 = 0` does not hold definitionally.\n"}]}