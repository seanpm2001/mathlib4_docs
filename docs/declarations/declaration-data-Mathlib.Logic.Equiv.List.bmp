{"name":"Mathlib.Logic.Equiv.List","instances":[{"typeNames":["List"],"name":"List.encodable","className":"Encodable"},{"typeNames":["List"],"name":"List.countable","className":"Countable"},{"typeNames":["Multiset"],"name":"Multiset.encodable","className":"Encodable"},{"typeNames":["Multiset"],"name":"Multiset.countable","className":"Countable"},{"typeNames":["Vector"],"name":"Vector.encodable","className":"Encodable"},{"typeNames":["Vector"],"name":"Vector.countable","className":"Countable"},{"typeNames":["Fin"],"name":"Encodable.finArrow","className":"Encodable"},{"typeNames":["Fin"],"name":"Encodable.finPi","className":"Encodable"},{"typeNames":["Finset"],"name":"Finset.encodable","className":"Encodable"},{"typeNames":["Finset"],"name":"Finset.countable","className":"Countable"},{"typeNames":[],"name":"Encodable.fintypeArrowOfEncodable","className":"Encodable"},{"typeNames":["List"],"name":"Denumerable.denumerableList","className":"Denumerable"},{"typeNames":["Multiset"],"name":"Denumerable.multiset","className":"Denumerable"},{"typeNames":["Finset"],"name":"Denumerable.finset","className":"Denumerable"}],"imports":["Init","Mathlib.Data.Finset.Sort","Mathlib.Data.Vector.Basic","Mathlib.Logic.Denumerable"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L425-L429","name":"Equiv.listEquivSelfOfEquivNat","kind":"def","docLink":"./Mathlib/Logic/Equiv/List.html#Equiv.listEquivSelfOfEquivNat","doc":"If `α` is equivalent to `ℕ`, then `List α` is equivalent to `α`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L420-L421","name":"Equiv.listNatEquivNat","kind":"def","docLink":"./Mathlib/Logic/Equiv/List.html#Equiv.listNatEquivNat","doc":"`List ℕ` is equivalent to `ℕ`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L412-L416","name":"Equiv.listUnitEquiv","kind":"def","docLink":"./Mathlib/Logic/Equiv/List.html#Equiv.listUnitEquiv","doc":"The type lists on unit is canonically equivalent to the natural numbers. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L393-L402","name":"Denumerable.finset","kind":"instance","docLink":"./Mathlib/Logic/Equiv/List.html#Denumerable.finset","doc":"If `α` is denumerable, then so is `Finset α`. Warning: this is *not* the same encoding as used\nin `Finset.encodable`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L387-L388","name":"Denumerable.raise'Finset","kind":"def","docLink":"./Mathlib/Logic/Equiv/List.html#Denumerable.raise'Finset","doc":"Makes `raise' l n` into a finset. Elements are distinct thanks to `raise'_sorted`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L381-L383","name":"Denumerable.raise'_sorted","kind":"theorem","docLink":"./Mathlib/Logic/Equiv/List.html#Denumerable.raise'_sorted","doc":"`raise' l n` is a strictly increasing sequence. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L374-L377","name":"Denumerable.raise'_chain","kind":"theorem","docLink":"./Mathlib/Logic/Equiv/List.html#Denumerable.raise'_chain","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L366-L371","name":"Denumerable.raise_lower'","kind":"theorem","docLink":"./Mathlib/Logic/Equiv/List.html#Denumerable.raise_lower'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L361-L363","name":"Denumerable.lower_raise'","kind":"theorem","docLink":"./Mathlib/Logic/Equiv/List.html#Denumerable.lower_raise'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L356-L358","name":"Denumerable.raise'","kind":"def","docLink":"./Mathlib/Logic/Equiv/List.html#Denumerable.raise'","doc":"Outputs the list of partial sums plus one of the input list, that is\n`raise [a₁, a₂, a₃, ...] n = [n + a₁, n + a₁ + a₂ + 1, n + a₁ + a₂ + a₃ + 2, ...]`. Adding one each\ntime ensures the elements are distinct. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L348-L350","name":"Denumerable.lower'","kind":"def","docLink":"./Mathlib/Logic/Equiv/List.html#Denumerable.lower'","doc":"Outputs the list of differences minus one of the input list, that is\n`lower' [a₁, a₂, a₃, ...] n = [a₁ - n, a₂ - a₁ - 1, a₃ - a₂ - 1, ...]`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L329-L339","name":"Denumerable.multiset","kind":"instance","docLink":"./Mathlib/Logic/Equiv/List.html#Denumerable.multiset","doc":"If `α` is denumerable, then so is `Multiset α`. Warning: this is *not* the same encoding as used\nin `Multiset.encodable`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L322-L324","name":"Denumerable.raise_sorted","kind":"theorem","docLink":"./Mathlib/Logic/Equiv/List.html#Denumerable.raise_sorted","doc":"`raise l n` is a non-decreasing sequence. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L316-L318","name":"Denumerable.raise_chain","kind":"theorem","docLink":"./Mathlib/Logic/Equiv/List.html#Denumerable.raise_chain","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L309-L313","name":"Denumerable.raise_lower","kind":"theorem","docLink":"./Mathlib/Logic/Equiv/List.html#Denumerable.raise_lower","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L304-L306","name":"Denumerable.lower_raise","kind":"theorem","docLink":"./Mathlib/Logic/Equiv/List.html#Denumerable.lower_raise","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L299-L301","name":"Denumerable.raise","kind":"def","docLink":"./Mathlib/Logic/Equiv/List.html#Denumerable.raise","doc":"Outputs the list of partial sums of the input list, that is\n`raise [a₁, a₂, ...] n = [n + a₁, n + a₁ + a₂, ...]` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L292-L294","name":"Denumerable.lower","kind":"def","docLink":"./Mathlib/Logic/Equiv/List.html#Denumerable.lower","doc":"Outputs the list of differences of the input list, that is\n`lower [a₁, a₂, ...] n = [a₁ - n, a₂ - a₁, ...]` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L276-L283","name":"Denumerable.list_ofNat_succ","kind":"theorem","docLink":"./Mathlib/Logic/Equiv/List.html#Denumerable.list_ofNat_succ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L272-L272","name":"Denumerable.list_ofNat_zero","kind":"theorem","docLink":"./Mathlib/Logic/Equiv/List.html#Denumerable.list_ofNat_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L267-L268","name":"Denumerable.denumerableList","kind":"instance","docLink":"./Mathlib/Logic/Equiv/List.html#Denumerable.denumerableList","doc":"If `α` is denumerable, then so is `List α`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L252-L263","name":"Denumerable.denumerable_list_aux","kind":"theorem","docLink":"./Mathlib/Logic/Equiv/List.html#Denumerable.denumerable_list_aux","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L236-L238","name":"Encodable.fintypeArrowOfEncodable","kind":"instance","docLink":"./Mathlib/Logic/Equiv/List.html#Encodable.fintypeArrowOfEncodable","doc":"If `α` and `β` are encodable and `α` is a fintype, then `α → β` is encodable as well. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L228-L232","name":"Encodable.fintypeEquivFin","kind":"def","docLink":"./Mathlib/Logic/Equiv/List.html#Encodable.fintypeEquivFin","doc":"An encodable `Fintype` is equivalent to the same size `Fin`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L222-L224","name":"Encodable.sortedUniv_toFinset","kind":"theorem","docLink":"./Mathlib/Logic/Equiv/List.html#Encodable.sortedUniv_toFinset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L217-L218","name":"Encodable.sortedUniv_nodup","kind":"theorem","docLink":"./Mathlib/Logic/Equiv/List.html#Encodable.sortedUniv_nodup","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L212-L213","name":"Encodable.length_sortedUniv","kind":"theorem","docLink":"./Mathlib/Logic/Equiv/List.html#Encodable.length_sortedUniv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L207-L208","name":"Encodable.mem_sortedUniv","kind":"theorem","docLink":"./Mathlib/Logic/Equiv/List.html#Encodable.mem_sortedUniv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L202-L203","name":"Encodable.sortedUniv","kind":"def","docLink":"./Mathlib/Logic/Equiv/List.html#Encodable.sortedUniv","doc":"The elements of a `Fintype` as a sorted list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L192-L198","name":"Encodable.fintypePi","kind":"def","docLink":"./Mathlib/Logic/Equiv/List.html#Encodable.fintypePi","doc":"When `α` is finite and all `π a` are encodable, `Π a, π a` is encodable too. Because the\nencoding is not unique, we wrap it in `Trunc` to preserve computability. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L184-L187","name":"Encodable.fintypeArrow","kind":"def","docLink":"./Mathlib/Logic/Equiv/List.html#Encodable.fintypeArrow","doc":"When `α` is finite and `β` is encodable, `α → β` is encodable too. Because the encoding is not\nunique, we wrap it in `Trunc` to preserve computability. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L177-L178","name":"Finset.countable","kind":"instance","docLink":"./Mathlib/Logic/Equiv/List.html#Finset.countable","doc":"If `α` is countable, then so is `Finset α`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L170-L173","name":"Finset.encodable","kind":"instance","docLink":"./Mathlib/Logic/Equiv/List.html#Finset.encodable","doc":"If `α` is encodable, then so is `Finset α`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L165-L166","name":"Encodable.finPi","kind":"instance","docLink":"./Mathlib/Logic/Equiv/List.html#Encodable.finPi","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L161-L162","name":"Encodable.finArrow","kind":"instance","docLink":"./Mathlib/Logic/Equiv/List.html#Encodable.finArrow","doc":"If `α` is encodable, then so is `Fin n → α`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L156-L157","name":"Vector.countable","kind":"instance","docLink":"./Mathlib/Logic/Equiv/List.html#Vector.countable","doc":"If `α` is countable, then so is `Vector α n`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L151-L152","name":"Vector.encodable","kind":"instance","docLink":"./Mathlib/Logic/Equiv/List.html#Vector.encodable","doc":"If `α` is encodable, then so is `Vector α n`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L146-L147","name":"Fintype.toEncodable","kind":"def","docLink":"./Mathlib/Logic/Equiv/List.html#Fintype.toEncodable","doc":"A noncomputable way to arbitrarily choose an ordering on a finite type.\nIt is not made into a global instance, since it involves an arbitrary choice.\nThis can be locally made into an instance with `local attribute [instance] Fintype.toEncodable`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L138-L140","name":"Fintype.truncEncodable","kind":"def","docLink":"./Mathlib/Logic/Equiv/List.html#Fintype.truncEncodable","doc":"A finite type is encodable. Because the encoding is not unique, we wrap it in `Trunc` to\npreserve computability. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L132-L133","name":"Encodable.encodableOfList","kind":"def","docLink":"./Mathlib/Logic/Equiv/List.html#Encodable.encodableOfList","doc":"A listable type with decidable equality is encodable. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L125-L126","name":"Multiset.countable","kind":"instance","docLink":"./Mathlib/Logic/Equiv/List.html#Multiset.countable","doc":"If `α` is countable, then so is `Multiset α`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L120-L121","name":"Multiset.encodable","kind":"instance","docLink":"./Mathlib/Logic/Equiv/List.html#Multiset.encodable","doc":"If `α` is encodable, then so is `Multiset α`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L115-L116","name":"Encodable.decodeMultiset","kind":"def","docLink":"./Mathlib/Logic/Equiv/List.html#Encodable.decodeMultiset","doc":"Explicit decoding function for `Multiset α` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L110-L111","name":"Encodable.encodeMultiset","kind":"def","docLink":"./Mathlib/Logic/Equiv/List.html#Encodable.encodeMultiset","doc":"Explicit encoding function for `Multiset α` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L86-L88","name":"Encodable.length_le_encode","kind":"theorem","docLink":"./Mathlib/Logic/Equiv/List.html#Encodable.length_le_encode","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L78-L83","name":"Encodable.decode_list_succ","kind":"theorem","docLink":"./Mathlib/Logic/Equiv/List.html#Encodable.decode_list_succ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L73-L74","name":"Encodable.decode_list_zero","kind":"theorem","docLink":"./Mathlib/Logic/Equiv/List.html#Encodable.decode_list_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L67-L69","name":"Encodable.encode_list_cons","kind":"theorem","docLink":"./Mathlib/Logic/Equiv/List.html#Encodable.encode_list_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L62-L63","name":"Encodable.encode_list_nil","kind":"theorem","docLink":"./Mathlib/Logic/Equiv/List.html#Encodable.encode_list_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L56-L58","name":"List.countable","kind":"instance","docLink":"./Mathlib/Logic/Equiv/List.html#List.countable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L51-L53","name":"List.encodable","kind":"instance","docLink":"./Mathlib/Logic/Equiv/List.html#List.encodable","doc":"If `α` is encodable, then so is `List α`. This uses the `pair` and `unpair` functions from\n`Data.Nat.Pairing`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L40-L46","name":"Encodable.decodeList","kind":"def","docLink":"./Mathlib/Logic/Equiv/List.html#Encodable.decodeList","doc":"Explicit decoding function for `List α` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Logic/Equiv/List.lean#L34-L36","name":"Encodable.encodeList","kind":"def","docLink":"./Mathlib/Logic/Equiv/List.html#Encodable.encodeList","doc":"Explicit encoding function for `List α` "}]}