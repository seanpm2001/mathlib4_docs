{"name":"Std.Tactic.Ext","instances":[],"imports":["Init","Std.Tactic.Basic","Std.Tactic.RCases","Std.Tactic.Ext.Attr"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Ext.lean#L206-L206","name":"Unit.ext","kind":"theorem","docLink":"./Std/Tactic/Ext.html#Unit.ext","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Ext.lean#L205-L205","name":"PUnit.ext","kind":"theorem","docLink":"./Std/Tactic/Ext.html#PUnit.ext","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Ext.lean#L198-L199","name":"Std.Tactic.Ext.«tacticExt?___:_»","kind":"def","docLink":"./Std/Tactic/Ext.html#Std.Tactic.Ext.«tacticExt?___:_»","doc":"`ext? pat*` is like `ext pat*` but gives a suggestion on what pattern to use "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Ext.lean#L196-L197","name":"Std.Tactic.Ext.tacticExt1?___","kind":"def","docLink":"./Std/Tactic/Ext.html#Std.Tactic.Ext.tacticExt1?___","doc":"`ext1? pat*` is like `ext1 pat*` but gives a suggestion on what pattern to use "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Ext.lean#L191-L193","name":"Std.Tactic.Ext.tacticExt1___","kind":"def","docLink":"./Std/Tactic/Ext.html#Std.Tactic.Ext.tacticExt1___","doc":"`ext1 pat*` is like `ext pat*` except it only applies one extensionality lemma instead\nof recursing as much as possible.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Ext.lean#L169-L175","name":"Std.Tactic.Ext.«tacticExt___:_»","kind":"def","docLink":"./Std/Tactic/Ext.html#Std.Tactic.Ext.«tacticExt___:_»","doc":"* `ext pat*`: Apply extensionality lemmas as much as possible,\n  using `pat*` to introduce the variables in extensionality lemmas like `funext`.\n* `ext`: introduce anonymous variables whenever needed.\n* `ext pat* : n`: apply ext lemmas only up to depth `n`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Ext.lean#L163-L167","name":"Std.Tactic.Ext.extCore","kind":"def","docLink":"./Std/Tactic/Ext.html#Std.Tactic.Ext.extCore","doc":"Apply extensionality lemmas as much as possible, using `pats` to introduce the variables\nin extensionality lemmas like `funext`. Returns a list of subgoals.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Ext.lean#L147-L157","name":"Std.Tactic.Ext.withExtN","kind":"def","docLink":"./Std/Tactic/Ext.html#Std.Tactic.Ext.withExtN","doc":"Applies a extensionality lemmas recursively, using `pats` to introduce variables in the result.\nRuns continuation `k` on each subgoal.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Ext.lean#L136-L141","name":"Std.Tactic.Ext.withExt1","kind":"def","docLink":"./Std/Tactic/Ext.html#Std.Tactic.Ext.withExt1","doc":"Applies a single extensionality lemma, using `pats` to introduce variables in the result.\nRuns continuation `k` on each subgoal.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Ext.lean#L120-L130","name":"Std.Tactic.Ext.tryIntros","kind":"def","docLink":"./Std/Tactic/Ext.html#Std.Tactic.Ext.tryIntros","doc":"Postprocessor for `withExt` which runs `rintro` with the given patterns when the target is a\npi type.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Ext.lean#L113-L114","name":"Std.Tactic.Ext.tacticApply_ext_lemma","kind":"def","docLink":"./Std/Tactic/Ext.html#Std.Tactic.Ext.tacticApply_ext_lemma","doc":"Apply a single extensionality lemma to the current goal. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Ext.lean#L92-L111","name":"Std.Tactic.Ext.applyExtLemma","kind":"def","docLink":"./Std/Tactic/Ext.html#Std.Tactic.Ext.applyExtLemma","doc":"Apply a single extensionality lemma to `goal`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Ext.lean#L66-L73","name":"Std.Tactic.Ext.«termExt_iff_type%___»","kind":"def","docLink":"./Std/Tactic/Ext.html#Std.Tactic.Ext.«termExt_iff_type%___»","doc":"Creates the type of the iff-variant of the extensionality lemma for the given structure,\nelaborating to `x = y ↔ x.1 = y.1 ∧ x.2 = y.2`, for example.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Ext.lean#L61-L64","name":"Std.Tactic.Ext.mkAndN","kind":"def","docLink":"./Std/Tactic/Ext.html#Std.Tactic.Ext.mkAndN","doc":"Make an n-ary `And` application. `mkAndN []` returns `True`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Ext.lean#L58-L58","name":"Std.Tactic.Ext.mkIff","kind":"def","docLink":"./Std/Tactic/Ext.html#Std.Tactic.Ext.mkIff","doc":"Make an `Iff` application. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Ext.lean#L47-L55","name":"Std.Tactic.Ext.«termExt_type%___»","kind":"def","docLink":"./Std/Tactic/Ext.html#Std.Tactic.Ext.«termExt_type%___»","doc":"Creates the type of the extensionality lemma for the given structure,\nelaborating to `x.1 = y.1 → x.2 = y.2 → x = y`, for example.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Ext.lean#L19-L45","name":"Std.Tactic.Ext.withExtHyps","kind":"def","docLink":"./Std/Tactic/Ext.html#Std.Tactic.Ext.withExtHyps","doc":"Constructs the hypotheses for the extensionality lemma.\nCalls the continuation `k` with the list of parameters to the structure,\ntwo structure variables `x` and `y`, and a list of pairs `(field, ty)`\nwhere `ty` is `x.field = y.field` or `HEq x.field y.field`.\n"}]}