{"name":"Mathlib.Util.AddRelatedDecl","instances":[],"imports":["Init","Lean"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/AddRelatedDecl.lean#L42-L74","name":"Mathlib.Tactic.addRelatedDecl","kind":"def","docLink":"./Mathlib/Util/AddRelatedDecl.html#Mathlib.Tactic.addRelatedDecl","doc":"A helper function for constructing a related declaration from an existing one.\n\nThis is currently used by the attributes `reassoc` and `elementwise`,\nand has been factored out to avoid code duplication.\nFeel free to add features as needed for other applications.\n\nThis helper:\n* calls `addDeclarationRanges`, so jump-to-definition works,\n* copies the `protected` status of the existing declaration, and\n* supports copying attributes.\n\nArguments:\n* `src : Name` is the existing declaration that we are modifying.\n* `suffix : String` will be appended to `src` to form the name of the new declaration.\n* `ref : Syntax` is the syntax where the user requested the related declaration.\n* `construct type value levels : MetaM (Expr Ã— List Name)`\n  given the type, value, and universe variables of the original declaration,\n  should construct the value of the new declaration,\n  along with the names of its universe variables.\n* `attrs` is the attributes that should be applied to both the new and the original declaration,\n  e.g. in the usage `@[reassoc (attr := simp)]`.\n  We apply it to both declarations, to have the same behavior as `to_additive`, and to shorten some\n  attribute commands. Note that `@[elementwise (attr := simp), reassoc (attr := simp)]` will try\n  to apply `simp` twice to the current declaration, but that causes no issues.\n"}]}