{"name":"Std.Tactic.Lint.Basic","instances":[],"imports":["Init","Std.Util.TermUnsafe","Std.Lean.NameMapAttribute"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Basic.lean#L130-L131","name":"Std.Tactic.Lint.shouldBeLinted","kind":"def","docLink":"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.shouldBeLinted","doc":"Returns true if `decl` should be checked\nusing `linter`, i.e., if there is no `nolint` attribute. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Basic.lean#L113-L126","name":"Std.Tactic.Lint.nolintAttr","kind":"opaque","docLink":"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.nolintAttr","doc":"Defines the user attribute `nolint` for skipping `#lint` "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Basic.lean#L109-L111","name":"Std.Tactic.Lint.nolint","kind":"def","docLink":"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.nolint","doc":"`@[nolint linterName]` omits the tagged declaration from being checked by\nthe linter with name `linterName`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Basic.lean#L84-L91","name":"Std.Tactic.Lint.std_linter","kind":"def","docLink":"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.std_linter","doc":"Defines the `@[std_linter]` attribute for adding a linter to the default set.\nThe form `@[std_linter disabled]` will not add the linter to the default set,\nbut it will be shown by `#list_linters` and can be selected by the `#lint` command.\n\nLinters are named using their declaration names, without the namespace. These must be distinct.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Basic.lean#L72-L82","name":"Std.Tactic.Lint.stdLinterExt","kind":"opaque","docLink":"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.stdLinterExt","doc":"Defines the `std_linter` extension for adding a linter to the default set. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Basic.lean#L69-L70","name":"Std.Tactic.Lint.getLinter","kind":"def","docLink":"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.getLinter","doc":"Gets a linter by declaration name. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Basic.lean#L66-L66","name":"Std.Tactic.Lint.NamedLinter.declName","kind":"def","docLink":"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter.declName","doc":"The linter declaration name "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Basic.lean#L64-L64","name":"Std.Tactic.Lint.NamedLinter.name","kind":"def","docLink":"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter.name","doc":"The name of the named linter. This is just the declaration name without the namespace. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Basic.lean#L62-L66","name":"Std.Tactic.Lint.NamedLinter","kind":"structure","docLink":"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter","doc":"A `NamedLinter` is a linter associated to a particular declaration. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Basic.lean#L59-L59","name":"Std.Tactic.Lint.Linter.isFast","kind":"def","docLink":"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter.isFast","doc":"If `isFast` is false, this test will be omitted from `#lint-`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Basic.lean#L57-L57","name":"Std.Tactic.Lint.Linter.errorsFound","kind":"def","docLink":"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter.errorsFound","doc":"`errorsFound` is printed when at least one test is positive "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Basic.lean#L55-L55","name":"Std.Tactic.Lint.Linter.noErrorsFound","kind":"def","docLink":"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter.noErrorsFound","doc":"`noErrorsFound` is the message printed when all tests are negative "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Basic.lean#L53-L53","name":"Std.Tactic.Lint.Linter.test","kind":"def","docLink":"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter.test","doc":"`test` defines a test to perform on every declaration. It should never fail. Returning `none`\nsignifies a passing test. Returning `some msg` reports a failing test with error `msg`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Basic.lean#L50-L59","name":"Std.Tactic.Lint.Linter","kind":"structure","docLink":"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter","doc":"A linting test for the `#lint` command. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Basic.lean#L33-L47","name":"Std.Tactic.Lint.isAutoDecl","kind":"def","docLink":"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.isAutoDecl","doc":"Returns true if `decl` is an automatically generated declaration.\n\nAlso returns true if `decl` is an internal name or created during macro\nexpansion.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Basic.lean#L1-L1","name":"Std.Tactic.Lint.NamedLinter.mk","kind":"ctor","docLink":"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter.mk","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Lint/Basic.lean#L1-L1","name":"Std.Tactic.Lint.Linter.mk","kind":"ctor","docLink":"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter.mk","doc":""}]}