{"name":"Mathlib.Analysis.Convolution","instances":[],"imports":["Init","Mathlib.Analysis.Calculus.BumpFunctionInner","Mathlib.Analysis.Calculus.ParametricIntegral","Mathlib.MeasureTheory.Constructions.Prod.Integral","Mathlib.MeasureTheory.Function.LocallyIntegrable","Mathlib.MeasureTheory.Group.Integration","Mathlib.MeasureTheory.Group.Prod","Mathlib.MeasureTheory.Integral.IntervalIntegral"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1665-L1674","name":"integral_posConvolution","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#integral_posConvolution","doc":"The integral over `Ioi 0` of a forward convolution of two functions is equal to the product\nof their integrals over this set. (Compare `integral_convolution` for the two-sided convolution.) "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1653-L1660","name":"integrable_posConvolution","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#integrable_posConvolution","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1605-L1650","name":"posConvolution_eq_convolution_indicator","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#posConvolution_eq_convolution_indicator","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1600-L1602","name":"posConvolution","kind":"def","docLink":"./Mathlib/Analysis/Convolution.html#posConvolution","doc":"The forward convolution of two functions `f` and `g` on `ℝ`, with respect to a continuous\nbilinear map `L` and measure `ν`. It is defined to be the function mapping `x` to\n`∫ t in 0..x, L (f t) (g (x - t)) ∂ν` if `0 < x`, and 0 otherwise. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1584-L1588","name":"HasCompactSupport.contDiff_convolution_left","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#HasCompactSupport.contDiff_convolution_left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1576-L1581","name":"HasCompactSupport.contDiff_convolution_right","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#HasCompactSupport.contDiff_convolution_right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1566-L1573","name":"contDiffOn_convolution_left_with_param_comp","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#contDiffOn_convolution_left_with_param_comp","doc":"The convolution `g * f` is `C^n` when `f` is locally integrable and `g` is `C^n` and compactly\nsupported. Version where `g` depends on an additional parameter in an open subset `s` of a\nparameter space `P` (and the compact support `k` is independent of the parameter in `s`),\ngiven in terms of composition with additional smooth functions. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1554-L1559","name":"contDiffOn_convolution_left_with_param","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#contDiffOn_convolution_left_with_param","doc":"The convolution `g * f` is `C^n` when `f` is locally integrable and `g` is `C^n` and compactly\nsupported. Version where `g` depends on an additional parameter in an open subset `s` of a\nparameter space `P` (and the compact support `k` is independent of the parameter in `s`). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1542-L1548","name":"contDiffOn_convolution_right_with_param_comp","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#contDiffOn_convolution_right_with_param_comp","doc":"The convolution `f * g` is `C^n` when `f` is locally integrable and `g` is `C^n` and compactly\nsupported. Version where `g` depends on an additional parameter in an open subset `s` of a\nparameter space `P` (and the compact support `k` is independent of the parameter in `s`),\ngiven in terms of composition with an additional smooth function. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1471-L1535","name":"contDiffOn_convolution_right_with_param","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#contDiffOn_convolution_right_with_param","doc":"The convolution `f * g` is `C^n` when `f` is locally integrable and `g` is `C^n` and compactly\nsupported. Version where `g` depends on an additional parameter in an open subset `s` of a\nparameter space `P` (and the compact support `k` is independent of the parameter in `s`). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1422-L1465","name":"contDiffOn_convolution_right_with_param_aux","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#contDiffOn_convolution_right_with_param_aux","doc":"The convolution `f * g` is `C^n` when `f` is locally integrable and `g` is `C^n` and compactly\nsupported. Version where `g` depends on an additional parameter in an open subset `s` of a\nparameter space `P` (and the compact support `k` is independent of the parameter in `s`).\nIn this version, all the types belong to the same universe (to get an induction working in the\nproof). Use instead `contDiffOn_convolution_right_with_param`, which removes this restriction. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1276-L1414","name":"hasFDerivAt_convolution_right_with_param","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#hasFDerivAt_convolution_right_with_param","doc":"The derivative of the convolution `f * g` is given by `f * Dg`, when `f` is locally integrable\nand `g` is `C^1` and compactly supported. Version where `g` depends on an additional parameter in an\nopen subset `s` of a parameter space `P` (and the compact support `k` is independent of the\nparameter in `s`). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1254-L1258","name":"HasCompactSupport.hasDerivAt_convolution_left","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#HasCompactSupport.hasDerivAt_convolution_left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1246-L1251","name":"HasCompactSupport.hasDerivAt_convolution_right","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#HasCompactSupport.hasDerivAt_convolution_right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1213-L1217","name":"HasCompactSupport.hasFDerivAt_convolution_left","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#HasCompactSupport.hasFDerivAt_convolution_left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1179-L1210","name":"HasCompactSupport.hasFDerivAt_convolution_right","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#HasCompactSupport.hasFDerivAt_convolution_right","doc":"Compute the total derivative of `f ⋆ g` if `g` is `C^1` with compact support and `f` is locally\nintegrable. To write down the total derivative as a convolution, we use\n`ContinuousLinearMap.precompR`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1165-L1170","name":"convolution_precompR_apply","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#convolution_precompR_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1116-L1158","name":"convolution_assoc","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#convolution_assoc","doc":"Convolution is associative. This requires that\n* all maps are a.e. strongly measurable w.r.t one of the measures\n* `f ⋆[L, ν] g` exists almost everywhere\n* `‖g‖ ⋆[μ] ‖k‖` exists almost everywhere\n* `‖f‖ ⋆[ν] (‖g‖ ⋆[μ] ‖k‖)` exists at `x₀` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1089-L1108","name":"convolution_assoc'","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#convolution_assoc'","doc":"Convolution is associative. This has a weak but inconvenient integrability condition.\nSee also `convolution_assoc`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1077-L1082","name":"integral_convolution","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#integral_convolution","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1024-L1028","name":"ContDiffBump.convolution_tendsto_right_of_continuous","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#ContDiffBump.convolution_tendsto_right_of_continuous","doc":"Special case of `ContDiffBump.convolution_tendsto_right` where `g` is continuous,\nand the limit is taken only in the first function. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1012-L1019","name":"ContDiffBump.convolution_tendsto_right","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#ContDiffBump.convolution_tendsto_right","doc":"`(φ i ⋆ g i) (k i)` tends to `z₀` as `i` tends to some filter `l` if\n* `φ` is a sequence of normed bump functions such that `(φ i).R` tends to `0` as `i` tends to `l`;\n* `g i` is `mu`-a.e. strongly measurable as `i` tends to `l`;\n* `g i x` tends to `z₀` as `(i, x)` tends to `l ×ˢ 𝓝 x₀`;\n* `k i` tends to `x₀`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L1000-L1004","name":"ContDiffBump.dist_normed_convolution_le","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#ContDiffBump.dist_normed_convolution_le","doc":"If `φ` is a normed bump function, approximate `(φ ⋆ g) x₀` if `g` is near `g x₀` on a ball with\nradius `φ.R` around `x₀`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L990-L993","name":"ContDiffBump.normed_convolution_eq_right","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#ContDiffBump.normed_convolution_eq_right","doc":"If `φ` is a normed bump function, compute `φ ⋆ g` if `g` is constant on `Metric.ball x₀ φ.R`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L978-L980","name":"ContDiffBump.convolution_eq_right","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#ContDiffBump.convolution_eq_right","doc":"If `φ` is a bump function, compute `(φ ⋆ g) x₀` if `g` is constant on `Metric.ball x₀ φ.R`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L935-L960","name":"convolution_tendsto_right","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#convolution_tendsto_right","doc":"`(φ i ⋆ g i) (k i)` tends to `z₀` as `i` tends to some filter `l` if\n* `φ` is a sequence of nonnegative functions with integral `1` as `i` tends to `l`;\n* The support of `φ` tends to small neighborhoods around `(0 : G)` as `i` tends to `l`;\n* `g i` is `mu`-a.e. strongly measurable as `i` tends to `l`;\n* `g i x` tends to `z₀` as `(i, x)` tends to `l ×ˢ 𝓝 x₀`;\n* `k i` tends to `x₀`.\n\nSee also `ContDiffBump.convolution_tendsto_right`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L915-L923","name":"dist_convolution_le","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#dist_convolution_le","doc":"Approximate `f ⋆ g` if the support of the `f` is bounded within a ball, and `g` is near `g x₀`\non a ball with the same radius around `x₀`.\n\nThis is a special case of `dist_convolution_le'` where `L` is `(•)`, `f` has integral 1 and `f` is\nnonnegative. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L870-L905","name":"dist_convolution_le'","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#dist_convolution_le'","doc":"Approximate `(f ⋆ g) x₀` if the support of the `f` is bounded within a ball, and `g` is near\n`g x₀` on a ball with the same radius around `x₀`. See `dist_convolution_le` for a special case.\n\nWe can simplify the second argument of `dist` further if we add some extra type-classes on `E`\nand `𝕜` or if `L` is scalar multiplication. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L847-L858","name":"convolution_eq_right'","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#convolution_eq_right'","doc":"Compute `(f ⋆ g) x₀` if the support of the `f` is within `Metric.ball 0 R`, and `g` is constant\non `Metric.ball x₀ R`.\n\nWe can simplify the RHS further if we assume `f` is integrable, but also if `L = (•)` or more\ngenerally if `L` has a `AntilipschitzWith`-condition. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L829-L833","name":"BddAbove.continuous_convolution_left_of_integrable","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#BddAbove.continuous_convolution_left_of_integrable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L822-L826","name":"HasCompactSupport.continuous_convolution_left","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#HasCompactSupport.continuous_convolution_left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L802-L811","name":"convolution_neg_of_neg_eq","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#convolution_neg_of_neg_eq","doc":"The convolution of two even functions is also even. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L796-L798","name":"convolution_mul_swap","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#convolution_mul_swap","doc":"The symmetric definition of convolution where the bilinear operator is multiplication. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L790-L792","name":"convolution_lsmul_swap","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#convolution_lsmul_swap","doc":"The symmetric definition of convolution where the bilinear operator is scalar multiplication. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L785-L786","name":"convolution_eq_swap","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#convolution_eq_swap","doc":"The symmetric definition of convolution. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L777-L781","name":"convolution_flip","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#convolution_flip","doc":"Commutativity of convolution "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L764-L765","name":"support_convolution_subset","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#support_convolution_subset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L743-L755","name":"BddAbove.continuous_convolution_right_of_integrable","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#BddAbove.continuous_convolution_right_of_integrable","doc":"The convolution is continuous if one function is integrable and the other is bounded and\ncontinuous. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L731-L738","name":"HasCompactSupport.continuous_convolution_right","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#HasCompactSupport.continuous_convolution_right","doc":"The convolution is continuous if one function is locally integrable and the other has compact\nsupport and is continuous. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L722-L726","name":"continuousOn_convolution_right_with_param_comp","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#continuousOn_convolution_right_with_param_comp","doc":"The convolution `f * g` is continuous if `f` is locally integrable and `g` is continuous and\ncompactly supported. Version where `g` depends on an additional parameter in an open subset `s` of\na parameter space `P` (and the compact support `k` is independent of the parameter in `s`),\ngiven in terms of compositions with an additional continuous map. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L708-L715","name":"continuousOn_convolution_right_with_param_comp'","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#continuousOn_convolution_right_with_param_comp'","doc":"The convolution `f * g` is continuous if `f` is locally integrable and `g` is continuous and\ncompactly supported. Version where `g` depends on an additional parameter in an open subset `s` of\na parameter space `P` (and the compact support `k` is independent of the parameter in `s`),\ngiven in terms of compositions with an additional continuous map.\nVersion not assuming `T2Space G`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L696-L700","name":"continuousOn_convolution_right_with_param","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#continuousOn_convolution_right_with_param","doc":"The convolution `f * g` is continuous if `f` is locally integrable and `g` is continuous and\ncompactly supported. Version where `g` depends on an additional parameter in a subset `s` of\na parameter space `P` (and the compact support `k` is independent of the parameter in `s`). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L602-L690","name":"continuousOn_convolution_right_with_param'","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#continuousOn_convolution_right_with_param'","doc":"The convolution `f * g` is continuous if `f` is locally integrable and `g` is continuous and\ncompactly supported. Version where `g` depends on an additional parameter in a subset `s` of\na parameter space `P` (and the compact support `k` is independent of the parameter in `s`),\nnot assuming `T2Space G`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L588-L593","name":"HasCompactSupport.convolution","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#HasCompactSupport.convolution","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L577-L579","name":"MeasureTheory.Integrable.integrable_convolution","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#MeasureTheory.Integrable.integrable_convolution","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L559-L570","name":"support_convolution_subset_swap","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#support_convolution_subset_swap","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L548-L556","name":"convolution_congr","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#convolution_congr","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L536-L543","name":"convolution_mono_right_of_nonneg","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#convolution_mono_right_of_nonneg","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L527-L533","name":"convolution_mono_right","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#convolution_mono_right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L521-L524","name":"ConvolutionExists.add_distrib","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#ConvolutionExists.add_distrib","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L515-L518","name":"ConvolutionExistsAt.add_distrib","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#ConvolutionExistsAt.add_distrib","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L509-L512","name":"ConvolutionExists.distrib_add","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#ConvolutionExists.distrib_add","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L503-L506","name":"ConvolutionExistsAt.distrib_add","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#ConvolutionExistsAt.distrib_add","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L498-L500","name":"convolution_zero","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#convolution_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L492-L494","name":"zero_convolution","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#zero_convolution","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L487-L488","name":"convolution_smul","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#convolution_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L483-L484","name":"smul_convolution","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#smul_convolution","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L474-L476","name":"convolution_mul","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#convolution_mul","doc":"The definition of convolution where the bilinear operator is multiplication. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L468-L470","name":"convolution_lsmul","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#convolution_lsmul","doc":"The definition of convolution where the bilinear operator is scalar multiplication.\nNote: it often helps the elaborator to give the type of the convolution explicitly. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L462-L463","name":"convolution_def","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#convolution_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L456-L458","name":"Convolution.«term_⋆_»","kind":"def","docLink":"./Mathlib/Analysis/Convolution.html#Convolution.«term_⋆_»","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L452-L453","name":"Convolution.«term_⋆[_]_»","kind":"def","docLink":"./Mathlib/Analysis/Convolution.html#Convolution.«term_⋆[_]_»","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L449-L449","name":"Convolution.«term_⋆[_,_]_»","kind":"def","docLink":"./Mathlib/Analysis/Convolution.html#Convolution.«term_⋆[_,_]_»","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L443-L445","name":"convolution","kind":"def","docLink":"./Mathlib/Analysis/Convolution.html#convolution","doc":"The convolution of two functions `f` and `g` with respect to a continuous bilinear map `L` and\nmeasure `μ`. It is defined to be `(f ⋆[L, μ] g) x = ∫ t, L (f t) (g (x - t)) ∂μ`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L430-L432","name":"HasCompactSupport.convolutionExistsRightOfContinuousLeft","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#HasCompactSupport.convolutionExistsRightOfContinuousLeft","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L425-L427","name":"HasCompactSupport.convolutionExistsLeft","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#HasCompactSupport.convolutionExistsLeft","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L415-L417","name":"convolutionExistsAt_iff_integrable_swap","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#convolutionExistsAt_iff_integrable_swap","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L409-L412","name":"ConvolutionExistsAt.integrable_swap","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#ConvolutionExistsAt.integrable_swap","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L401-L406","name":"convolutionExistsAt_flip","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#convolutionExistsAt_flip","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L387-L396","name":"BddAbove.convolutionExistsAt","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#BddAbove.convolutionExistsAt","doc":"A sufficient condition to prove that `f ⋆[L, μ] g` exists.\nWe assume that the integrand has compact support and `g` is bounded on this support (note that\nboth properties hold if `g` is continuous with compact support). We also require that `f` is\nintegrable on the support of the integrand, and that both functions are strongly measurable.\n\nThis is a variant of `BddAbove.convolutionExistsAt'` in an abelian group with a left-invariant\nmeasure. This allows us to state the boundedness and measurability of `g` in a more natural way. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L361-L367","name":"HasCompactSupport.convolutionExists_left_of_continuous_right","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#HasCompactSupport.convolutionExists_left_of_continuous_right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L352-L358","name":"HasCompactSupport.convolutionExists_right","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#HasCompactSupport.convolutionExists_right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L333-L349","name":"HasCompactSupport.convolutionExistsAt","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#HasCompactSupport.convolutionExistsAt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L322-L326","name":"MeasureTheory.Integrable.ae_convolution_exists","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#MeasureTheory.Integrable.ae_convolution_exists","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L303-L319","name":"MeasureTheory.Integrable.convolution_integrand","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#MeasureTheory.Integrable.convolution_integrand","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L296-L300","name":"MeasureTheory.AEStronglyMeasurable.convolution_integrand","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#MeasureTheory.AEStronglyMeasurable.convolution_integrand","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L281-L286","name":"ConvolutionExistsAt.ofNorm","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#ConvolutionExistsAt.ofNorm","doc":"If `‖f‖ *[μ] ‖g‖` exists, then `f *[L, μ] g` exists. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L271-L277","name":"MeasureTheory.AEStronglyMeasurable.convolution_integrand_swap_snd","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#MeasureTheory.AEStronglyMeasurable.convolution_integrand_swap_snd","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L264-L268","name":"MeasureTheory.AEStronglyMeasurable.convolution_integrand_snd","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#MeasureTheory.AEStronglyMeasurable.convolution_integrand_snd","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L248-L255","name":"ConvolutionExistsAt.ofNorm'","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#ConvolutionExistsAt.ofNorm'","doc":"If `‖f‖ *[μ] ‖g‖` exists, then `f *[L, μ] g` exists. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L224-L244","name":"BddAbove.convolutionExistsAt'","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#BddAbove.convolutionExistsAt'","doc":"A sufficient condition to prove that `f ⋆[L, μ] g` exists.\nWe assume that `f` is integrable on a set `s` and `g` is bounded and ae strongly measurable\non `x₀ - s` (note that both properties hold if `g` is continuous with compact support). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L215-L218","name":"MeasureTheory.AEStronglyMeasurable.convolution_integrand_swap_snd'","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#MeasureTheory.AEStronglyMeasurable.convolution_integrand_swap_snd'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L208-L212","name":"MeasureTheory.AEStronglyMeasurable.convolution_integrand_snd'","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#MeasureTheory.AEStronglyMeasurable.convolution_integrand_snd'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L197-L201","name":"MeasureTheory.AEStronglyMeasurable.convolution_integrand'","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#MeasureTheory.AEStronglyMeasurable.convolution_integrand'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L186-L188","name":"ConvolutionExistsAt.integrable","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#ConvolutionExistsAt.integrable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L177-L179","name":"ConvolutionExists","kind":"def","docLink":"./Mathlib/Analysis/Convolution.html#ConvolutionExists","doc":"The convolution of `f` and `g` exists when the function `t ↦ L (f t) (g (x - t))` is integrable\nfor all `x : G`. There are various conditions on `f` and `g` to prove this. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L170-L172","name":"ConvolutionExistsAt","kind":"def","docLink":"./Mathlib/Analysis/Convolution.html#ConvolutionExistsAt","doc":"The convolution of `f` and `g` exists at `x` when the function `t ↦ L (f t) (g (x - t))` is\nintegrable. There are various conditions on `f` and `g` to prove this. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L153-L158","name":"HasCompactSupport.convolution_integrand_bound_left","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#HasCompactSupport.convolution_integrand_bound_left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L148-L150","name":"Continuous.convolution_integrand_fst","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#Continuous.convolution_integrand_fst","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L142-L145","name":"HasCompactSupport.convolution_integrand_bound_right","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#HasCompactSupport.convolution_integrand_bound_right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L135-L139","name":"HasCompactSupport.convolution_integrand_bound_right_of_subset","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#HasCompactSupport.convolution_integrand_bound_right_of_subset","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/Convolution.lean#L122-L132","name":"convolution_integrand_bound_right_of_le_of_subset","kind":"theorem","docLink":"./Mathlib/Analysis/Convolution.html#convolution_integrand_bound_right_of_le_of_subset","doc":""}]}