{"name":"Mathlib.Computability.DFA","instances":[{"typeNames":["DFA"],"name":"DFA.instInhabitedDFA","className":"Inhabited"}],"imports":["Init","Mathlib.Data.Fintype.Card","Mathlib.Computability.Language","Mathlib.Tactic.NormNum"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/DFA.lean#L155-L170","name":"DFA.pumping_lemma","kind":"theorem","docLink":"./Mathlib/Computability/DFA.html#DFA.pumping_lemma","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/DFA.lean#L141-L152","name":"DFA.evalFrom_of_pow","kind":"theorem","docLink":"./Mathlib/Computability/DFA.html#DFA.evalFrom_of_pow","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/DFA.lean#L104-L138","name":"DFA.evalFrom_split","kind":"theorem","docLink":"./Mathlib/Computability/DFA.html#DFA.evalFrom_split","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/DFA.lean#L101-L101","name":"DFA.mem_accepts","kind":"theorem","docLink":"./Mathlib/Computability/DFA.html#DFA.mem_accepts","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/DFA.lean#L98-L98","name":"DFA.accepts","kind":"def","docLink":"./Mathlib/Computability/DFA.html#DFA.accepts","doc":"`M.accepts` is the language of `x` such that `M.eval x` is an accept state. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/DFA.lean#L92-L94","name":"DFA.evalFrom_of_append","kind":"theorem","docLink":"./Mathlib/Computability/DFA.html#DFA.evalFrom_of_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/DFA.lean#L88-L89","name":"DFA.eval_append_singleton","kind":"theorem","docLink":"./Mathlib/Computability/DFA.html#DFA.eval_append_singleton","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/DFA.lean#L83-L84","name":"DFA.eval_singleton","kind":"theorem","docLink":"./Mathlib/Computability/DFA.html#DFA.eval_singleton","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/DFA.lean#L78-L79","name":"DFA.eval_nil","kind":"theorem","docLink":"./Mathlib/Computability/DFA.html#DFA.eval_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/DFA.lean#L73-L74","name":"DFA.eval","kind":"def","docLink":"./Mathlib/Computability/DFA.html#DFA.eval","doc":"`M.eval x` evaluates `M` with input `x` starting from the state `M.start`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/DFA.lean#L67-L69","name":"DFA.evalFrom_append_singleton","kind":"theorem","docLink":"./Mathlib/Computability/DFA.html#DFA.evalFrom_append_singleton","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/DFA.lean#L62-L63","name":"DFA.evalFrom_singleton","kind":"theorem","docLink":"./Mathlib/Computability/DFA.html#DFA.evalFrom_singleton","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/DFA.lean#L57-L58","name":"DFA.evalFrom_nil","kind":"theorem","docLink":"./Mathlib/Computability/DFA.html#DFA.evalFrom_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/DFA.lean#L52-L53","name":"DFA.evalFrom","kind":"def","docLink":"./Mathlib/Computability/DFA.html#DFA.evalFrom","doc":"`M.evalFrom s x` evaluates `M` with input `x` starting from the state `s`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/DFA.lean#L48-L49","name":"DFA.instInhabitedDFA","kind":"instance","docLink":"./Mathlib/Computability/DFA.html#DFA.instInhabitedDFA","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/DFA.lean#L41-L41","name":"DFA.accept","kind":"def","docLink":"./Mathlib/Computability/DFA.html#DFA.accept","doc":"Set of acceptance states. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/DFA.lean#L39-L39","name":"DFA.start","kind":"def","docLink":"./Mathlib/Computability/DFA.html#DFA.start","doc":"Starting state. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/DFA.lean#L37-L37","name":"DFA.step","kind":"def","docLink":"./Mathlib/Computability/DFA.html#DFA.step","doc":"A transition function from state to state labelled by the alphabet. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/DFA.lean#L35-L35","name":"DFA.mk","kind":"ctor","docLink":"./Mathlib/Computability/DFA.html#DFA.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Computability/DFA.lean#L35-L41","name":"DFA","kind":"structure","docLink":"./Mathlib/Computability/DFA.html#DFA","doc":"A DFA is a set of states (`Ïƒ`), a transition function from state to state labelled by the\nalphabet (`step`), a starting state (`start`) and a set of acceptance states (`accept`). "}]}