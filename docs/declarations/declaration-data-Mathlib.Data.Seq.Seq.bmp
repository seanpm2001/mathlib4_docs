{"name":"Mathlib.Data.Seq.Seq","instances":[{"typeNames":["Stream'.Seq"],"name":"Stream'.Seq.instInhabitedSeq","className":"Inhabited"},{"typeNames":["Stream'.Seq.TerminatedAt"],"name":"Stream'.Seq.terminatedAtDecidable","className":"Decidable"},{"typeNames":["Stream'.Seq"],"name":"Stream'.Seq.instMembershipSeq","className":"Membership"},{"typeNames":["List","Stream'.Seq"],"name":"Stream'.Seq.coeList","className":"Coe"},{"typeNames":["Stream'","Stream'.Seq"],"name":"Stream'.Seq.coeStream","className":"Coe"},{"typeNames":["LazyList","Stream'.Seq"],"name":"Stream'.Seq.coeLazyList","className":"Coe"},{"typeNames":["Stream'.Seq"],"name":"Stream'.Seq.instFunctorSeq","className":"Functor"},{"typeNames":["Stream'.Seq","Stream'.Seq.instFunctorSeq"],"name":"Stream'.Seq.instLawfulFunctorSeqInstFunctorSeq","className":"LawfulFunctor"},{"typeNames":["Stream'.Seq1","Stream'.Seq"],"name":"Stream'.Seq1.coeSeq","className":"Coe"},{"typeNames":["Stream'.Seq1"],"name":"Stream'.Seq1.instInhabitedSeq1","className":"Inhabited"},{"typeNames":["Stream'.Seq1"],"name":"Stream'.Seq1.monad","className":"Monad"},{"typeNames":["Stream'.Seq1","Stream'.Seq1.monad"],"name":"Stream'.Seq1.lawfulMonad","className":"LawfulMonad"}],"imports":["Init","Mathlib.Data.List.Basic","Mathlib.Data.LazyList","Mathlib.Data.Nat.Basic","Mathlib.Data.Stream.Init","Mathlib.Data.Seq.Computation"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L1062-L1066","name":"Stream'.Seq1.lawfulMonad","kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.lawfulMonad","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L1056-L1059","name":"Stream'.Seq1.monad","kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.monad","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L1038-L1053","name":"Stream'.Seq1.bind_assoc","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.bind_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L1014-L1034","name":"Stream'.Seq1.join_join","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.join_join","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L1009-L1010","name":"Stream'.Seq1.map_join","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map_join","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L989-L1005","name":"Stream'.Seq1.map_join'","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map_join'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L982-L985","name":"Stream'.Seq1.ret_bind","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.ret_bind","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L973-L978","name":"Stream'.Seq1.bind_ret","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.bind_ret","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L968-L969","name":"Stream'.Seq1.join_map_ret","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.join_map_ret","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L963-L964","name":"Stream'.Seq1.bind","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.bind","doc":"The `bind` operator for the `Seq1` monad,\nwhich maps `f` on each element of `s` and appends the results together.\n(Not all of `s` may be evaluated, because the first few elements of `s`\nmay already produce an infinite result.) "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L956-L957","name":"Stream'.Seq1.instInhabitedSeq1","kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.instInhabitedSeq1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L952-L953","name":"Stream'.Seq1.ret","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.ret","doc":"The `return` operator for the `Seq1` monad,\nwhich produces a singleton sequence. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L945-L947","name":"Stream'.Seq1.join_cons","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.join_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L940-L941","name":"Stream'.Seq1.join_nil","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.join_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L932-L936","name":"Stream'.Seq1.join","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.join","doc":"Flatten a nonempty sequence of nonempty sequences "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L927-L928","name":"Stream'.Seq1.map_id","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map_id","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L925-L925","name":"Stream'.Seq1.map_pair","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map_pair","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L920-L921","name":"Stream'.Seq1.map","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.map","doc":"Map a function on a `Seq1` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L915-L916","name":"Stream'.Seq1.coeSeq","kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.coeSeq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L911-L912","name":"Stream'.Seq1.toSeq","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1.toSeq","doc":"Convert a `Seq1` to a sequence. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L894-L899","name":"Stream'.Seq.enum_cons","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.enum_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L889-L890","name":"Stream'.Seq.mem_append_left","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.mem_append_left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L869-L886","name":"Stream'.Seq.of_mem_append","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.of_mem_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L860-L866","name":"Stream'.Seq.exists_of_mem_map","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.exists_of_mem_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L856-L857","name":"Stream'.Seq.mem_map","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.mem_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L851-L853","name":"Stream'.Seq.head_dropn","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.head_dropn","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L846-L847","name":"Stream'.Seq.dropn_tail","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.dropn_tail","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L841-L843","name":"Stream'.Seq.dropn_add","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.dropn_add","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L832-L838","name":"Stream'.Seq.toList'","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.toList'","doc":"Convert a sequence into a list, embedded in a computation to allow for\nthe possibility of infinite sequences (in which case the computation\nnever returns anything). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L824-L826","name":"Stream'.Seq.ofStream_append","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofStream_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L819-L820","name":"Stream'.Seq.ofList_append","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofList_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L814-L815","name":"Stream'.Seq.ofStream_cons","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofStream_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L790-L810","name":"Stream'.Seq.join_append","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.join_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L768-L786","name":"Stream'.Seq.join_cons","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.join_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L762-L764","name":"Stream'.Seq.join_cons_cons","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.join_cons_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L757-L758","name":"Stream'.Seq.join_cons_nil","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.join_cons_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L752-L753","name":"Stream'.Seq.join_nil","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.join_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L746-L749","name":"Stream'.Seq.instLawfulFunctorSeqInstFunctorSeq","kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.instLawfulFunctorSeqInstFunctorSeq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L744-L744","name":"Stream'.Seq.instFunctorSeq","kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.instFunctorSeq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L740-L741","name":"Stream'.Seq.map_get?","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map_get?","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L723-L736","name":"Stream'.Seq.map_append","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L715-L719","name":"Stream'.Seq.map_comp","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L711-L712","name":"Stream'.Seq.map_tail","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map_tail","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L704-L707","name":"Stream'.Seq.map_id","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map_id","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L699-L700","name":"Stream'.Seq.map_cons","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L694-L695","name":"Stream'.Seq.map_nil","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L675-L690","name":"Stream'.Seq.append_assoc","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.append_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L664-L671","name":"Stream'.Seq.append_nil","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.append_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L657-L660","name":"Stream'.Seq.cons_append","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L645-L653","name":"Stream'.Seq.nil_append","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.nil_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L640-L641","name":"Stream'.Seq.toListOrStream","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.toListOrStream","doc":"Convert a sequence into either a list or a stream depending on whether\nit is finite or infinite. (Without decidability of the infiniteness predicate,\nthis is not constructively possible.) "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L633-L634","name":"Stream'.Seq.toStream","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.toStream","doc":"Convert a sequence which is known not to terminate into a stream "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L628-L629","name":"Stream'.Seq.toList","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.toList","doc":"Convert a sequence which is known to terminate into a list "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L623-L624","name":"Stream'.Seq.enum_nil","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.enum_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L618-L619","name":"Stream'.Seq.get?_enum","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_enum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L613-L614","name":"Stream'.Seq.enum","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.enum","doc":"Enumerate a sequence by tagging each element with its index. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L608-L609","name":"Stream'.Seq.unzip","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.unzip","doc":"Separate a sequence of pairs into two sequences "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L602-L604","name":"Stream'.Seq.get?_zip","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_zip","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L598-L599","name":"Stream'.Seq.zip","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.zip","doc":"Pair two sequences into a sequence of pairs "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L590-L592","name":"Stream'.Seq.get?_zipWith","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_zipWith","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L582-L584","name":"Stream'.Seq.zipWith","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.zipWith","doc":"Combine two sequences with a function "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L569-L576","name":"Stream'.Seq.splitAt","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.splitAt","doc":"Split a sequence at `n`, producing a finite initial segment\nand an infinite tail. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L559-L564","name":"Stream'.Seq.take","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.take","doc":"Take the first `n` elements of the sequence (producing a list) "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L551-L553","name":"Stream'.Seq.drop","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.drop","doc":"Remove the first `n` elements from the sequence. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L538-L547","name":"Stream'.Seq.join","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.join","doc":"Flatten a sequence of sequences. (It is required that the\nsequences be nonempty to ensure productivity; in the case\nof an infinite sequence of `nil`, the first element is never\ngenerated.) "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L524-L531","name":"Stream'.Seq.map","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.map","doc":"Map a function over a sequence. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L514-L520","name":"Stream'.Seq.append","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.append","doc":"Append two sequences. If `s₁` is infinite, then `s₁ ++ s₂ = s₁`,\notherwise it puts `s₂` at the location of the `nil` in `s₁`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L508-L509","name":"Stream'.Seq.nats_get?","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.nats_get?","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L503-L504","name":"Stream'.Seq.nats","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.nats","doc":"The sequence of natural numbers some 0, some 1, ... "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L498-L499","name":"Stream'.Seq.forceToList","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.forceToList","doc":"Translate a sequence to a list. This function will run forever if\nrun on an infinite sequence. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L489-L493","name":"Stream'.Seq.toLazyList","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.toLazyList","doc":"Translate a sequence into a `LazyList`. Since `LazyList` and `List`\nare isomorphic as non-meta types, this function is necessarily meta. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L483-L484","name":"Stream'.Seq.coeLazyList","kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.coeLazyList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L476-L480","name":"Stream'.Seq.ofLazyList","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofLazyList","doc":"Embed a `LazyList α` as a sequence. Note that even though this\nis non-meta, it will produce infinite sequences if used with\ncyclic `LazyList`s created by meta constructions. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L469-L470","name":"Stream'.Seq.coeStream","kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.coeStream","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L465-L466","name":"Stream'.Seq.ofStream","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofStream","doc":"Embed an infinite stream as a sequence "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L459-L460","name":"Stream'.Seq.ofList_cons","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofList_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L454-L455","name":"Stream'.Seq.ofList_nth","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofList_nth","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L449-L450","name":"Stream'.Seq.ofList_nil","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofList_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L444-L445","name":"Stream'.Seq.coeList","kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.coeList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L438-L441","name":"Stream'.Seq.ofList","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ofList","doc":"Embed a list as a sequence "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L425-L433","name":"Stream'.Seq.coinduction2","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.coinduction2","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L417-L422","name":"Stream'.Seq.coinduction","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.coinduction","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L383-L412","name":"Stream'.Seq.eq_of_bisim","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.eq_of_bisim","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L378-L379","name":"Stream'.Seq.IsBisimulation","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.IsBisimulation","doc":"a relation is bisimilar if it meets the `BisimO` test"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L369-L372","name":"Stream'.Seq.BisimO","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.BisimO","doc":"Bisimilarity relation over `Option` of `Seq1 α`"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L345-L359","name":"Stream'.Seq.corec_eq","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.corec_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L325-L341","name":"Stream'.Seq.corec","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.corec","doc":"Corecursor for `Seq α` as a coinductive type. Iterates `f` to produce new elements\nof the sequence until `none` is obtained. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L314-L319","name":"Stream'.Seq.Corec.f","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.Corec.f","doc":"Corecursor over pairs of `Option` values"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L293-L310","name":"Stream'.Seq.mem_rec_on","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.mem_rec_on","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L283-L290","name":"Stream'.Seq.recOn","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.recOn","doc":"Recursion principle for sequences, compare with `List.recOn`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L278-L279","name":"Stream'.Seq.get?_tail","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_tail","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L271-L274","name":"Stream'.Seq.tail_cons","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.tail_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L266-L267","name":"Stream'.Seq.tail_nil","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.tail_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L261-L262","name":"Stream'.Seq.head_cons","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.head_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L256-L257","name":"Stream'.Seq.head_nil","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.head_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L251-L252","name":"Stream'.Seq.head_eq_destruct","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.head_eq_destruct","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L243-L247","name":"Stream'.Seq.destruct_cons","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L238-L239","name":"Stream'.Seq.destruct_nil","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L223-L234","name":"Stream'.Seq.destruct_eq_cons","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct_eq_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L213-L220","name":"Stream'.Seq.destruct_eq_nil","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct_eq_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L209-L210","name":"Stream'.Seq.destruct","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.destruct","doc":"Destructor for a sequence, resulting in either `none` (for `nil`) or\n`some (a, s)` (for `cons a s`). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L203-L204","name":"Stream'.Seq.mem_cons_iff","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.mem_cons_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L198-L199","name":"Stream'.Seq.eq_or_mem_of_mem_cons","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.eq_or_mem_of_mem_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L194-L195","name":"Stream'.Seq.mem_cons_of_mem","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.mem_cons_of_mem","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L190-L191","name":"Stream'.Seq.mem_cons","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.mem_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L187-L187","name":"Stream'.Seq.not_mem_nil","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.not_mem_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L180-L184","name":"Stream'.Seq.ge_stable","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ge_stable","doc":"If `s.get? n = some aₙ` for some value `aₙ`, then there is also some value `aₘ` such\nthat `s.get? = some aₘ` for `m ≤ n`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L173-L174","name":"Stream'.Seq.terminated_stable","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.terminated_stable","doc":"If a sequence terminated at position `n`, it also terminated at `m ≥ n `. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L166-L169","name":"Stream'.Seq.le_stable","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.le_stable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L163-L164","name":"Stream'.Seq.instMembershipSeq","kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.instMembershipSeq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L159-L160","name":"Stream'.Seq.Mem","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.Mem","doc":"member definition for `Seq`"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L152-L155","name":"Stream'.Seq.tail","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.tail","doc":"Get the tail of a sequence (or `nil` if the sequence is `nil`) "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L147-L148","name":"Stream'.Seq.head","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.head","doc":"Get the first element of a sequence "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L141-L143","name":"Stream'.Seq.omap","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.omap","doc":"Functorial action of the functor `Option (α × _)` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L135-L136","name":"Stream'.Seq.not_terminates_iff","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.not_terminates_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L131-L132","name":"Stream'.Seq.Terminates","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.Terminates","doc":"A sequence terminates if there is some position `n` at which it has terminated. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L126-L127","name":"Stream'.Seq.terminatedAtDecidable","kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.terminatedAtDecidable","doc":"It is decidable whether a sequence terminates at a given position. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L121-L122","name":"Stream'.Seq.TerminatedAt","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.TerminatedAt","doc":"A sequence has terminated at position `n` if the value at position `n` equals `none`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L116-L117","name":"Stream'.Seq.cons_right_injective","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons_right_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L112-L113","name":"Stream'.Seq.cons_left_injective","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons_left_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L107-L109","name":"Stream'.Seq.cons_injective2","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons_injective2","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L103-L104","name":"Stream'.Seq.ext","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.ext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L98-L99","name":"Stream'.Seq.get?_cons_succ","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_cons_succ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L93-L94","name":"Stream'.Seq.get?_cons_zero","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_cons_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L88-L89","name":"Stream'.Seq.get?_nil","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L83-L84","name":"Stream'.Seq.get?_mk","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?_mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L78-L79","name":"Stream'.Seq.get?","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?","doc":"Get the nth element of a sequence (if it exists) "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L73-L74","name":"Stream'.Seq.val_cons","kind":"theorem","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.val_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L65-L69","name":"Stream'.Seq.cons","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.cons","doc":"Prepend an element to a sequence "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L61-L62","name":"Stream'.Seq.instInhabitedSeq","kind":"instance","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.instInhabitedSeq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L57-L58","name":"Stream'.Seq.nil","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.nil","doc":"The empty sequence "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L48-L49","name":"Stream'.Seq1","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1","doc":"`Seq1 α` is the type of nonempty sequences. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L43-L44","name":"Stream'.Seq","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.Seq","doc":"`Seq α` is the type of possibly infinite lists (referred here as sequences).\nIt is encoded as an infinite stream of options such that if `f n = none`, then\n`f m = none` for all `m ≥ n`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Seq/Seq.lean#L36-L37","name":"Stream'.IsSeq","kind":"def","docLink":"./Mathlib/Data/Seq/Seq.html#Stream'.IsSeq","doc":"A stream `s : Option α` is a sequence if `s.nth n = none` implies `s.nth (n + 1) = none`.\n"}]}