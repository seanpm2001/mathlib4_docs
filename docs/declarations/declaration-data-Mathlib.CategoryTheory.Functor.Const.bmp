{"name":"Mathlib.CategoryTheory.Functor.Const","instances":[{"typeNames":["CategoryTheory.Functor","CategoryTheory.Functor.category","CategoryTheory.Functor.const"],"name":"CategoryTheory.Functor.instFaithfulFunctorCategoryConst","className":"CategoryTheory.Faithful"}],"imports":["Init","Mathlib.CategoryTheory.Opposites"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Functor/Const.lean#L107-L108","name":"CategoryTheory.Functor.instFaithfulFunctorCategoryConst","kind":"instance","docLink":"./Mathlib/CategoryTheory/Functor/Const.html#CategoryTheory.Functor.instFaithfulFunctorCategoryConst","doc":"If `J` is nonempty, then the constant functor over `J` is faithful. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Functor/Const.lean#L100-L103","name":"CategoryTheory.Functor.constComp","kind":"def","docLink":"./Mathlib/CategoryTheory/Functor/Const.html#CategoryTheory.Functor.constComp","doc":"These are actually equal, of course, but not definitionally equal\n(the equality requires F.map (ùüô _) = ùüô _). A natural isomorphism is\nmore convenient than an equality between functors (compare id_to_iso). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Functor/Const.lean#L99-L99","name":"CategoryTheory.Functor.constComp_inv_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Functor/Const.html#CategoryTheory.Functor.constComp_inv_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Functor/Const.lean#L99-L99","name":"CategoryTheory.Functor.constComp_hom_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Functor/Const.html#CategoryTheory.Functor.constComp_hom_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Functor/Const.lean#L85-L87","name":"CategoryTheory.Functor.const.unop_functor_op_obj_map","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Functor/Const.html#CategoryTheory.Functor.const.unop_functor_op_obj_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Functor/Const.lean#L80-L81","name":"CategoryTheory.Functor.const.opObjUnop_inv_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Functor/Const.html#CategoryTheory.Functor.const.opObjUnop_inv_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Functor/Const.lean#L75-L76","name":"CategoryTheory.Functor.const.opObjUnop_hom_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Functor/Const.html#CategoryTheory.Functor.const.opObjUnop_hom_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Functor/Const.lean#L67-L70","name":"CategoryTheory.Functor.const.opObjUnop","kind":"def","docLink":"./Mathlib/CategoryTheory/Functor/Const.html#CategoryTheory.Functor.const.opObjUnop","doc":"The constant functor `J·µí·µñ ‚•§ C` sending everything to `unop X`\nis (naturally isomorphic to) the opposite of\nthe constant functor `J ‚•§ C·µí·µñ` sending everything to `X`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Functor/Const.lean#L57-L60","name":"CategoryTheory.Functor.const.opObjOp","kind":"def","docLink":"./Mathlib/CategoryTheory/Functor/Const.html#CategoryTheory.Functor.const.opObjOp","doc":"The constant functor `J·µí·µñ ‚•§ C·µí·µñ` sending everything to `op X`\nis (naturally isomorphic to) the opposite of the constant functor `J ‚•§ C` sending everything to `X`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Functor/Const.lean#L56-L56","name":"CategoryTheory.Functor.const.opObjOp_hom_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Functor/Const.html#CategoryTheory.Functor.const.opObjOp_hom_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Functor/Const.lean#L56-L56","name":"CategoryTheory.Functor.const.opObjOp_inv_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Functor/Const.html#CategoryTheory.Functor.const.opObjOp_inv_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Functor/Const.lean#L39-L44","name":"CategoryTheory.Functor.const","kind":"def","docLink":"./Mathlib/CategoryTheory/Functor/Const.html#CategoryTheory.Functor.const","doc":"The functor sending `X : C` to the constant functor `J ‚•§ C` sending everything to `X`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Functor/Const.lean#L38-L38","name":"CategoryTheory.Functor.const_map_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Functor/Const.html#CategoryTheory.Functor.const_map_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Functor/Const.lean#L38-L38","name":"CategoryTheory.Functor.const_obj_map","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Functor/Const.html#CategoryTheory.Functor.const_obj_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Functor/Const.lean#L38-L38","name":"CategoryTheory.Functor.const_obj_obj","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Functor/Const.html#CategoryTheory.Functor.const_obj_obj","doc":""}]}