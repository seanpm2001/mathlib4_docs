{"name":"Mathlib.Combinatorics.SetFamily.Shadow","instances":[],"imports":["Init","Mathlib.Data.Finset.Slice","Mathlib.Logic.Function.Iterate"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L295-L302","name":"Finset.upShadow_image_compl","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.upShadow_image_compl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L284-L291","name":"Finset.shadow_image_compl","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.shadow_image_compl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L255-L280","name":"Finset.mem_upShadow_iff_exists_mem_card_add","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.mem_upShadow_iff_exists_mem_card_add","doc":"`t ∈ ∂^k 𝒜` iff `t` is exactly `k` elements more than something in `𝒜`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L249-L251","name":"Finset.exists_subset_of_mem_upShadow","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.exists_subset_of_mem_upShadow","doc":"Being in the upper shadow of `𝒜` means we have a superset in `𝒜`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L236-L245","name":"Finset.mem_upShadow_iff_exists_mem_card_add_one","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.mem_upShadow_iff_exists_mem_card_add_one","doc":"`s ∈ ∂⁺ 𝒜` iff `s` is exactly one element less than something from `𝒜`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L226-L232","name":"Finset.mem_upShadow_iff_erase_mem","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.mem_upShadow_iff_erase_mem","doc":"`t` is in the upper shadow of `𝒜` iff we can remove an element from it so that the resulting\nfinset is in `𝒜`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L217-L221","name":"Finset.Set.Sized.upShadow","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.Set.Sized.upShadow","doc":"The upper shadow of a family of `r`-sets is a family of `r + 1`-sets. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L212-L213","name":"Finset.insert_mem_upShadow","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.insert_mem_upShadow","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L208-L209","name":"Finset.mem_upShadow_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.mem_upShadow_iff","doc":"`s` is in the upper shadow of `𝒜` iff there is an `t ∈ 𝒜` from which we can remove one element\nto get `s`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L202-L203","name":"Finset.upShadow_monotone","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.upShadow_monotone","doc":"The upper shadow is monotone. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L196-L197","name":"Finset.upShadow_empty","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.upShadow_empty","doc":"The upper shadow of the empty set is empty. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L192-L192","name":"FinsetFamily.«term∂⁺»","kind":"def","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#FinsetFamily.«term∂⁺»","doc":"The upper shadow of a set family `𝒜` is all sets we can get by adding one element to any set in\n`𝒜`, and the (`k` times) iterated upper shadow (`up_shadow^[k]`) is all sets we can get by adding\n`k` elements from any set in `𝒜`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L186-L187","name":"Finset.upShadow","kind":"def","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.upShadow","doc":"The upper shadow of a set family `𝒜` is all sets we can get by adding one element to any set in\n`𝒜`, and the (`k` times) iterated upper shadow (`up_shadow^[k]`) is all sets we can get by adding\n`k` elements from any set in `𝒜`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L147-L172","name":"Finset.mem_shadow_iff_exists_mem_card_add","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.mem_shadow_iff_exists_mem_card_add","doc":"`t ∈ ∂^k 𝒜` iff `t` is exactly `k` elements less than something in `𝒜`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L141-L143","name":"Finset.exists_subset_of_mem_shadow","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.exists_subset_of_mem_shadow","doc":"Being in the shadow of `𝒜` means we have a superset in `𝒜`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L127-L137","name":"Finset.mem_shadow_iff_exists_mem_card_add_one","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.mem_shadow_iff_exists_mem_card_add_one","doc":"`s ∈ ∂ 𝒜` iff `s` is exactly one element less than something from `𝒜` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L119-L123","name":"Finset.sized_shadow_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.sized_shadow_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L112-L116","name":"Finset.Set.Sized.shadow","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.Set.Sized.shadow","doc":"The shadow of a family of `r`-sets is a family of `r - 1`-sets. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L102-L108","name":"Finset.mem_shadow_iff_insert_mem","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.mem_shadow_iff_insert_mem","doc":"`t` is in the shadow of `𝒜` iff we can add an element to it so that the resulting finset is in\n`𝒜`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L96-L97","name":"Finset.erase_mem_shadow","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.erase_mem_shadow","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L92-L93","name":"Finset.mem_shadow_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.mem_shadow_iff","doc":"`s` is in the shadow of `𝒜` iff there is an `t ∈ 𝒜` from which we can remove one element to\nget `s`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L86-L87","name":"Finset.shadow_monotone","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.shadow_monotone","doc":"The shadow is monotone. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L79-L80","name":"Finset.shadow_singleton_empty","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.shadow_singleton_empty","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L74-L75","name":"Finset.shadow_empty","kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.shadow_empty","doc":"The shadow of the empty set is empty. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L68-L68","name":"FinsetFamily.«term∂»","kind":"def","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#FinsetFamily.«term∂»","doc":"The shadow of a set family `𝒜` is all sets we can get by removing one element from any set in\n`𝒜`, and the (`k` times) iterated shadow (`shadow^[k]`) is all sets we can get by removing `k`\nelements from any set in `𝒜`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SetFamily/Shadow.lean#L62-L63","name":"Finset.shadow","kind":"def","docLink":"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.shadow","doc":"The shadow of a set family `𝒜` is all sets we can get by removing one element from any set in\n`𝒜`, and the (`k` times) iterated shadow (`shadow^[k]`) is all sets we can get by removing `k`\nelements from any set in `𝒜`. "}]}