{"name":"Mathlib.Tactic.NormNum.IsCoprime","instances":[],"imports":["Init","Mathlib.RingTheory.Coprime.Lemmas","Mathlib.Tactic.NormNum.GCD"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/IsCoprime.lean#L49-L60","name":"Tactic.NormNum.evalIntIsCoprime","kind":"def","docLink":"./Mathlib/Tactic/NormNum/IsCoprime.html#Tactic.NormNum.evalIntIsCoprime","doc":"Evaluates the `IsCoprime` predicate over `â„¤`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/IsCoprime.lean#L38-L45","name":"Tactic.NormNum.proveIntIsCoprime","kind":"def","docLink":"./Mathlib/Tactic/NormNum/IsCoprime.html#Tactic.NormNum.proveIntIsCoprime","doc":"Evaluates `IsCoprime` for the given integer number literals.\nPanics if `ex` or `ey` aren't integer number literals. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/IsCoprime.lean#L32-L34","name":"Tactic.NormNum.isInt_not_isCoprime","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/IsCoprime.html#Tactic.NormNum.isInt_not_isCoprime","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/IsCoprime.lean#L28-L30","name":"Tactic.NormNum.isInt_isCoprime","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/IsCoprime.html#Tactic.NormNum.isInt_isCoprime","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormNum/IsCoprime.lean#L23-L26","name":"Tactic.NormNum.int_not_isCoprime_helper","kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/IsCoprime.html#Tactic.NormNum.int_not_isCoprime_helper","doc":""}]}