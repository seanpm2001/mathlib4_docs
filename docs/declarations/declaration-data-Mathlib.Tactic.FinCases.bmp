{"name":"Mathlib.Tactic.FinCases","instances":[],"imports":["Init","Mathlib.Tactic.Core","Mathlib.Lean.Expr.Basic","Mathlib.Data.Fintype.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/FinCases.lean#L71-L84","name":"Lean.Elab.Tactic.finCases","kind":"def","docLink":"./Mathlib/Tactic/FinCases.html#Lean.Elab.Tactic.finCases","doc":"`fin_cases h` performs case analysis on a hypothesis of the form\n`h : A`, where `[Fintype A]` is available, or\n`h : a ∈ A`, where `A : Finset X`, `A : Multiset X` or `A : List X`.\n\nAs an example, in\n```\nexample (f : ℕ → Prop) (p : Fin 3) (h0 : f 0) (h1 : f 1) (h2 : f 2) : f p.val := by\n  fin_cases *; simp\n  all_goals assumption\n```\nafter `fin_cases p; simp`, there are three goals, `f 0`, `f 1`, and `f 2`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/FinCases.lean#L55-L69","name":"Lean.Elab.Tactic.finCasesAt","kind":"opaque","docLink":"./Mathlib/Tactic/FinCases.html#Lean.Elab.Tactic.finCasesAt","doc":"Implementation of the `fin_cases` tactic. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/FinCases.lean#L46-L52","name":"Lean.Elab.Tactic.unfoldCases","kind":"opaque","docLink":"./Mathlib/Tactic/FinCases.html#Lean.Elab.Tactic.unfoldCases","doc":"Recursively runs the `cases` tactic on a hypothesis `h`.\nAs long as two goals are produced, `cases` is called recursively on the second goal,\nand we return a list of the first goals which appeared.\n\nThis is useful for hypotheses of the form `h : a ∈ [l₁, l₂, ...]`,\nwhich will be transformed into a sequence of goals with hypotheses `h : a = l₁`, `h : a = l₂`,\nand so on.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/FinCases.lean#L26-L35","name":"Lean.Elab.Tactic.getMemType","kind":"def","docLink":"./Mathlib/Tactic/FinCases.html#Lean.Elab.Tactic.getMemType","doc":"If `e` is of the form `x ∈ (A : List α)`, `x ∈ (A : Finset α)`, or `x ∈ (A : Multiset α)`,\nreturn `some α`, otherwise `none`. "}]}