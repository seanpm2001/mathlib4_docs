{"name":"Std.Tactic.GuardMsgs","instances":[{"typeNames":["Std.Tactic.GuardMsgs.GuardMsgFailure"],"name":"Std.Tactic.GuardMsgs.instTypeNameGuardMsgFailure","className":"TypeName"}],"imports":["Init","Lean.Elab.Command","Std.CodeAction.Basic","Std.Lean.Position"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/GuardMsgs.lean#L165-L194","name":"Std.Tactic.GuardMsgs.guardMsgsCodeAction","kind":"def","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.guardMsgsCodeAction","doc":"A code action which will update the doc comment on a `#guard_msgs` invocation. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/GuardMsgs.lean#L136-L136","name":"Std.Tactic.GuardMsgs.instTypeNameGuardMsgFailure","kind":"instance","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.instTypeNameGuardMsgFailure","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/GuardMsgs.lean#L135-L135","name":"Std.Tactic.GuardMsgs.GuardMsgFailure.res","kind":"def","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.GuardMsgFailure.res","doc":"The result of the nested command "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/GuardMsgs.lean#L133-L136","name":"Std.Tactic.GuardMsgs.GuardMsgFailure","kind":"structure","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.GuardMsgFailure","doc":"An info tree node corresponding to a failed `#guard_msgs` invocation,\nused for code action support. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/GuardMsgs.lean#L108-L129","name":"Std.Tactic.GuardMsgs.parseGuardMsgsSpec","kind":"def","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.parseGuardMsgsSpec","doc":"Parses a `guardMsgsSpec`.\n- No specification: check everything.\n- With a specification: interpret the spec, and if nothing applies pass it through. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/GuardMsgs.lean#L102-L103","name":"Std.Tactic.GuardMsgs.SpecResult.passthrough","kind":"ctor","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.SpecResult.passthrough","doc":"Do not capture the message. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/GuardMsgs.lean#L100-L101","name":"Std.Tactic.GuardMsgs.SpecResult.drop","kind":"ctor","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.SpecResult.drop","doc":"Drop the message and delete it. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/GuardMsgs.lean#L98-L99","name":"Std.Tactic.GuardMsgs.SpecResult.check","kind":"ctor","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.SpecResult.check","doc":"Capture the message and check it matches the docstring. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/GuardMsgs.lean#L97-L103","name":"Std.Tactic.GuardMsgs.SpecResult","kind":"inductive","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.SpecResult","doc":"The decision made by a specification for a message. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/GuardMsgs.lean#L26-L80","name":"Std.Tactic.GuardMsgs.guardMsgsCmd","kind":"def","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.guardMsgsCmd","doc":"`#guard_msgs` captures the messages generated by another command and checks that they\nmatch the contents of the docstring attached to the `#guard_msgs` command.\n\nBasic example:\n```lean\n/--\nerror: unknown identifier 'x'\n-/\n#guard_msgs in\nexample : α := x\n```\nThis checks that there is such an error and then consumes the message entirely.\n\nBy default, the command intercepts all messages, but there is a way to specify which types\nof messages to consider. For example, we can select only warnings:\n```lean\n/--\nwarning: declaration uses 'sorry'\n-/\n#guard_msgs(warning) in\nexample : α := sorry\n```\nor only errors\n```lean\n#guard_msgs(error) in\nexample : α := sorry\n```\nIn this last example, since the message is not intercepted there is a warning on `sorry`.\nWe can drop the warning completely with\n```lean\n#guard_msgs(error, drop warning) in\nexample : α := sorry\n```\n\nSyntax description:\n```\n#guard_msgs (drop? info|warning|error|all,*)? in cmd\n```\n\nIf there is no specification, `#guard_msgs` intercepts all messages.\nOtherwise, if there is one, the specification is considered in left-to-right order, and the first\nthat applies chooses the outcome of the message:\n- `info`, `warning`, `error`: intercept a message with the given severity level.\n- `all`: intercept any message (so `#guard_msgs in cmd` and `#guard_msgs (all) in cmd`\n  are equivalent).\n- `drop info`, `drop warning`, `drop error`: intercept a message with the given severity\n  level and then drop it. These messages are not checked.\n- `drop all`: intercept a message and drop it.\n\nFor example, `#guard_msgs (error, drop all) in cmd` means to check warnings and then drop\neverything else.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/GuardMsgs.lean#L23-L24","name":"Std.Tactic.GuardMsgs.guardMsgsSpec","kind":"def","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.guardMsgsSpec","doc":"Specification for `#guard_msgs` command. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/GuardMsgs.lean#L20-L21","name":"Std.Tactic.GuardMsgs.guardMsgsSpecElt","kind":"def","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.guardMsgsSpecElt","doc":"Element that can be part of a `#guard_msgs` specification. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/GuardMsgs.lean#L1-L1","name":"Std.Tactic.GuardMsgs.GuardMsgFailure.mk","kind":"ctor","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.GuardMsgFailure.mk","doc":""}]}