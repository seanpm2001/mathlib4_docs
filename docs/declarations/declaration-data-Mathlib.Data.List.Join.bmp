{"name":"Mathlib.Data.List.Join","instances":[],"imports":["Init","Mathlib.Data.List.BigOperators.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L228-L230","name":"List.join_reverse","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.join_reverse","doc":"Joining a reverse is the same as reversing all parts and reversing the joined result. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L220-L224","name":"List.reverse_join","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.reverse_join","doc":"Reversing a join is the same as reversing the order of parts and reversing all parts. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L212-L216","name":"List.append_join_map_append","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.append_join_map_append","doc":"We can rebracket `x ++ (l₁ ++ x) ++ (l₂ ++ x) ++ ... ++ (lₙ ++ x)` to\n`(x ++ l₁) ++ (x ++ l₂) ++ ... ++ (x ++ lₙ) ++ x` where `L = [l₁, l₂, ..., lₙ]`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L203-L207","name":"List.join_drop_length_sub_one","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.join_drop_length_sub_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L192-L200","name":"List.eq_iff_join_eq","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.eq_iff_join_eq","doc":"Two lists of sublists are equal iff their joins coincide, as well as the lengths of the\nsublists. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L182-L187","name":"List.nthLe_join","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.nthLe_join","doc":"The `n`-th element in a join of sublists is the `j`-th element of the `i`th sublist,\nwhere `n` can be obtained in terms of `i` and `j` by adding the lengths of all the sublists\nof index `< i`, and adding `j`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L170-L174","name":"List.sum_take_map_length_lt2","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.sum_take_map_length_lt2","doc":"Auxiliary lemma to control elements in a join. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L161-L164","name":"List.sum_take_map_length_lt1","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.sum_take_map_length_lt1","doc":"Auxiliary lemma to control elements in a join. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L150-L155","name":"List.drop_take_succ_join_eq_nthLe","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.drop_take_succ_join_eq_nthLe","doc":"In a join of sublists, taking the slice between the indices `A` and `B - 1` gives back the\noriginal sublist of index `i` if `A` is the sum of the lengths of sublists of index `< i`, and\n`B` is the sum of the lengths of sublists of index `≤ i`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L138-L143","name":"List.drop_take_succ_join_eq_get","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.drop_take_succ_join_eq_get","doc":"In a join of sublists, taking the slice between the indices `A` and `B - 1` gives back the\noriginal sublist of index `i` if `A` is the sum of the lengths of sublists of index `< i`, and\n`B` is the sum of the lengths of sublists of index `≤ i`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L120-L132","name":"List.drop_take_succ_eq_cons_nthLe","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.drop_take_succ_eq_cons_nthLe","doc":"Taking only the first `i+1` elements in a list, and then dropping the first `i` ones, one is\nleft with a list of length `1` made of the `i`-th element of the original list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L108-L114","name":"List.drop_take_succ_eq_cons_get","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.drop_take_succ_eq_cons_get","doc":"Taking only the first `i+1` elements in a list, and then dropping the first `i` ones, one is\nleft with a list of length `1` made of the `i`-th element of the original list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L99-L103","name":"List.drop_sum_join","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.drop_sum_join","doc":"In a join, dropping all the elements up to an index which is the sum of the lengths of the\nfirst `i` sublists, is the same as taking the join after dropping the first `i` sublists. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L90-L94","name":"List.take_sum_join","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.take_sum_join","doc":"In a join, taking the first elements up to an index which is the sum of the lengths of the\nfirst `i` sublists, is the same as taking the join of the first `i` sublists. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L83-L85","name":"List.bind_eq_nil","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.bind_eq_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L78-L79","name":"List.length_bind","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.length_bind","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L73-L74","name":"List.length_join","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.length_join","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L68-L69","name":"List.join_join","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.join_join","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L63-L65","name":"List.join_filter_ne_nil","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.join_filter_ne_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L52-L59","name":"List.join_filter_isEmpty_eq_false","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.join_filter_isEmpty_eq_false","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L45-L45","name":"List.join_concat","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.join_concat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L39-L42","name":"List.join_append","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.join_append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L33-L35","name":"List.join_eq_nil","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.join_eq_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/List/Join.lean#L29-L29","name":"List.join_singleton","kind":"theorem","docLink":"./Mathlib/Data/List/Join.html#List.join_singleton","doc":""}]}