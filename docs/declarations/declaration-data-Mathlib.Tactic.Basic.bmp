{"name":"Mathlib.Tactic.Basic","instances":[],"imports":["Init","Lean","Std","Mathlib.Tactic.Cases"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Basic.lean#L249-L260","name":"Mathlib.Tactic.clearValue","kind":"def","docLink":"./Mathlib/Tactic/Basic.html#Mathlib.Tactic.clearValue","doc":"`clear_value n₁ n₂ ...` clears the bodies of the local definitions `n₁, n₂ ...`, changing them\ninto regular hypotheses. A hypothesis `n : α := t` is changed to `n : α`.\n\nThe order of `n₁ n₂ ...` does not matter, and values will be cleared in reverse order of\nwhere they appear in the context. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Basic.lean#L231-L247","name":"Lean.MVarId.clearValue","kind":"def","docLink":"./Mathlib/Tactic/Basic.html#Lean.MVarId.clearValue","doc":"Clears the value of the local definition `fvarId`. Ensures that the resulting goal state\nis still type correct. Throws an error if it is a local hypothesis without a value. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Basic.lean#L221-L227","name":"Mathlib.Tactic.clearAuxDecl","kind":"def","docLink":"./Mathlib/Tactic/Basic.html#Mathlib.Tactic.clearAuxDecl","doc":"This tactic clears all auxiliary declarations from the context. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Basic.lean#L215-L219","name":"Mathlib.Tactic.tacticMatch_target_","kind":"def","docLink":"./Mathlib/Tactic/Basic.html#Mathlib.Tactic.tacticMatch_target_","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Basic.lean#L213-L213","name":"Mathlib.Tactic.tacticAssumption'","kind":"def","docLink":"./Mathlib/Tactic/Basic.html#Mathlib.Tactic.tacticAssumption'","doc":"Try calling `assumption` on all goals; succeeds if it closes at least one goal. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Basic.lean#L207-L210","name":"Mathlib.Tactic.evalIntrov.intro1PStep","kind":"def","docLink":"./Mathlib/Tactic/Basic.html#Mathlib.Tactic.evalIntrov.intro1PStep","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Basic.lean#L199-L206","name":"Mathlib.Tactic.evalIntrov.introsDep","kind":"opaque","docLink":"./Mathlib/Tactic/Basic.html#Mathlib.Tactic.evalIntrov.introsDep","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Basic.lean#L190-L210","name":"Mathlib.Tactic.evalIntrov","kind":"def","docLink":"./Mathlib/Tactic/Basic.html#Mathlib.Tactic.evalIntrov","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Basic.lean#L157-L189","name":"Mathlib.Tactic.introv","kind":"def","docLink":"./Mathlib/Tactic/Basic.html#Mathlib.Tactic.introv","doc":"The tactic `introv` allows the user to automatically introduce the variables of a theorem and\nexplicitly name the non-dependent hypotheses.\nAny dependent hypotheses are assigned their default names.\n\nExamples:\n```\nexample : ∀ a b : Nat, a = b → b = a := by\n  introv h,\n  exact h.symm\n```\nThe state after `introv h` is\n```\na b : ℕ,\nh : a = b\n⊢ b = a\n```\n\n```\nexample : ∀ a b : Nat, a = b → ∀ c, b = c → a = c := by\n  introv h₁ h₂,\n  exact h₁.trans h₂\n```\nThe state after `introv h₁ h₂` is\n```\na b : ℕ,\nh₁ : a = b,\nc : ℕ,\nh₂ : b = c\n⊢ a = c\n```\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Basic.lean#L147-L147","name":"Mathlib.Tactic.tacticTransitivity___","kind":"def","docLink":"./Mathlib/Tactic/Basic.html#Mathlib.Tactic.tacticTransitivity___","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Basic.lean#L144-L145","name":"Mathlib.Tactic.tacticBy_cases_","kind":"def","docLink":"./Mathlib/Tactic/Basic.html#Mathlib.Tactic.tacticBy_cases_","doc":"`by_cases p` makes a case distinction on `p`,\nresulting in two subgoals `h : p ⊢` and `h : ¬ p ⊢`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Basic.lean#L89-L104","name":"Lean.MVarId.changeLocalDecl'","kind":"def","docLink":"./Mathlib/Tactic/Basic.html#Lean.MVarId.changeLocalDecl'","doc":"Replace the type of the free variable `fvarId` with `typeNew`.\n\nIf `checkDefEq = true` then throws an error if `typeNew` is not definitionally\nequal to the type of `fvarId`. Otherwise this function assumes `typeNew` and the type\nof `fvarId` are definitionally equal.\n\nThis function is the same as `Lean.MVarId.changeLocalDecl` but makes sure to push substitution\ninformation into the infotree.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Basic.lean#L67-L77","name":"Lean.MVarId.withReverted","kind":"def","docLink":"./Mathlib/Tactic/Basic.html#Lean.MVarId.withReverted","doc":"Function to help do the revert/intro pattern, running some code inside a context\nwhere certain variables have been reverted before re-introing them.\nIt will push `FVarId` alias information into info trees for you according to a simple protocol.\n\n- `fvarIds` is an array of `fvarIds` to revert. These are passed to\n  `Lean.MVarId.revert` with `preserveOrder := true`, hence the function\n  raises an error if they cannot be reverted in the provided order.\n- `k` is given the goal with all the variables reverted and\n  the array of reverted `FVarId`s, with the requested `FVarId`s at the beginning.\n  It must return a tuple of a value, an array describing which `FVarIds` to link,\n  and a mutated `MVarId`.\n\nThe `a : Array (Option FVarId)` array returned by `k` is interpreted in the following way.\nThe function will intro `a.size` variables, and then for each non-`none` entry we\ncreate an FVar alias between it and the corresponding `intro`ed variable.\nFor example, having `k` return `fvars.map .some` causes all reverted variables to be\n`intro`ed and linked.\n\nReturns the value returned by `k` along with the resulting goal.\n "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Basic.lean#L40-L45","name":"Mathlib.Tactic.pushFVarAliasInfo","kind":"def","docLink":"./Mathlib/Tactic/Basic.html#Mathlib.Tactic.pushFVarAliasInfo","doc":"Given two arrays of `FVarId`s, one from an old local context and the other from a new local\ncontext, pushes `FVarAliasInfo`s into the info tree for corresponding pairs of `FVarId`s.\nRecall that variables linked this way should be considered to be semantically identical.\n\nThe effect of this is, for example, the unused variable linter will see that variables\nfrom the first array are used if corresponding variables in the second array are used. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Basic.lean#L26-L32","name":"Mathlib.Tactic.expandLemma","kind":"def","docLink":"./Mathlib/Tactic/Basic.html#Mathlib.Tactic.expandLemma","doc":"Implementation of the `lemma` command, by macro expansion to `theorem`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Basic.lean#L21-L23","name":"Mathlib.Tactic.lemma","kind":"def","docLink":"./Mathlib/Tactic/Basic.html#Mathlib.Tactic.lemma","doc":"`lemma` means the same as `theorem`. It is used to denote \"less important\" theorems "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Basic.lean#L15-L19","name":"Mathlib.Tactic.elabVariables","kind":"def","docLink":"./Mathlib/Tactic/Basic.html#Mathlib.Tactic.elabVariables","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Basic.lean#L13-L13","name":"Mathlib.Tactic.variables","kind":"def","docLink":"./Mathlib/Tactic/Basic.html#Mathlib.Tactic.variables","doc":""}]}