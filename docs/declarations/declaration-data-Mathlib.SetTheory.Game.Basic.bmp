{"name":"Mathlib.SetTheory.Game.Basic","instances":[{"typeNames":["Game"],"name":"Game.instAddCommGroupWithOneGame","className":"AddCommGroupWithOne"},{"typeNames":["Game"],"name":"Game.instInhabitedGame","className":"Inhabited"},{"typeNames":["Game"],"name":"Game.instPartialOrderGame","className":"PartialOrder"},{"typeNames":["Game","Game.Lf"],"name":"Game.instIsTrichotomousGameLf","className":"IsTrichotomous"},{"typeNames":["Game","Game","Game","HAdd.hAdd","instHAdd","AddZeroClass.toAdd","AddMonoid.toAddZeroClass","AddMonoidWithOne.toAddMonoid","AddGroupWithOne.toAddMonoidWithOne","AddCommGroupWithOne.toAddGroupWithOne","Game.instAddCommGroupWithOneGame","Game","LE.le","Preorder.toLE","PartialOrder.toPreorder","Game.instPartialOrderGame"],"name":"Game.covariantClass_add_le","className":"CovariantClass"},{"typeNames":["Game","Game","Function.swap","Game","HAdd.hAdd","instHAdd","AddZeroClass.toAdd","AddMonoid.toAddZeroClass","AddMonoidWithOne.toAddMonoid","AddGroupWithOne.toAddMonoidWithOne","AddCommGroupWithOne.toAddGroupWithOne","Game.instAddCommGroupWithOneGame","Game","LE.le","Preorder.toLE","PartialOrder.toPreorder","Game.instPartialOrderGame"],"name":"Game.covariantClass_swap_add_le","className":"CovariantClass"},{"typeNames":["Game","Game","Game","HAdd.hAdd","instHAdd","AddZeroClass.toAdd","AddMonoid.toAddZeroClass","AddMonoidWithOne.toAddMonoid","AddGroupWithOne.toAddMonoidWithOne","AddCommGroupWithOne.toAddGroupWithOne","Game.instAddCommGroupWithOneGame","Game","LT.lt","Preorder.toLT","PartialOrder.toPreorder","Game.instPartialOrderGame"],"name":"Game.covariantClass_add_lt","className":"CovariantClass"},{"typeNames":["Game","Game","Function.swap","Game","HAdd.hAdd","instHAdd","AddZeroClass.toAdd","AddMonoid.toAddZeroClass","AddMonoidWithOne.toAddMonoid","AddGroupWithOne.toAddMonoidWithOne","AddCommGroupWithOne.toAddGroupWithOne","Game.instAddCommGroupWithOneGame","Game","LT.lt","Preorder.toLT","PartialOrder.toPreorder","Game.instPartialOrderGame"],"name":"Game.covariantClass_swap_add_lt","className":"CovariantClass"},{"typeNames":["Game"],"name":"Game.orderedAddCommGroup","className":"OrderedAddCommGroup"},{"typeNames":["PGame"],"name":"PGame.instMulPGame","className":"Mul"},{"typeNames":["PGame.LeftMoves","HMul.hMul","PGame","instHMul","PGame.instMulPGame","OfNat.ofNat","Zero.toOfNat0","PGame.instZeroPGame"],"name":"PGame.isEmpty_mul_zero_leftMoves","className":"IsEmpty"},{"typeNames":["PGame.RightMoves","HMul.hMul","PGame","instHMul","PGame.instMulPGame","OfNat.ofNat","Zero.toOfNat0","PGame.instZeroPGame"],"name":"PGame.isEmpty_mul_zero_rightMoves","className":"IsEmpty"},{"typeNames":["PGame.LeftMoves","HMul.hMul","PGame","instHMul","PGame.instMulPGame","OfNat.ofNat","Zero.toOfNat0","PGame.instZeroPGame"],"name":"PGame.isEmpty_zero_mul_leftMoves","className":"IsEmpty"},{"typeNames":["PGame.RightMoves","HMul.hMul","PGame","instHMul","PGame.instMulPGame","OfNat.ofNat","Zero.toOfNat0","PGame.instZeroPGame"],"name":"PGame.isEmpty_zero_mul_rightMoves","className":"IsEmpty"},{"typeNames":["PGame.InvTy","Bool.true"],"name":"PGame.instIsEmptyInvTyTrue","className":"IsEmpty"},{"typeNames":["PGame.InvTy","Bool.false"],"name":"PGame.InvTy.instInhabited","className":"Inhabited"},{"typeNames":["PGame.InvTy","Bool.false"],"name":"PGame.uniqueInvTy","className":"Unique"},{"typeNames":["PGame"],"name":"PGame.instInvPGame","className":"Inv"},{"typeNames":["PGame"],"name":"PGame.instDivPGame","className":"Div"}],"imports":["Init","Mathlib.SetTheory.Game.PGame","Mathlib.Tactic.Abel"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L958-L959","name":"PGame.inv_one_equiv","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.inv_one_equiv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L953-L955","name":"PGame.invOne","kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.invOne","doc":"`1⁻¹` has exactly the same moves as `1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L948-L949","name":"PGame.inv_eq_of_lf_zero","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.inv_eq_of_lf_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L944-L945","name":"PGame.inv_eq_of_pos","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.inv_eq_of_pos","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L940-L941","name":"PGame.inv_zero","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.inv_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L936-L936","name":"PGame.inv_eq_of_equiv_zero","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.inv_eq_of_equiv_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L933-L934","name":"PGame.instDivPGame","kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.instDivPGame","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L930-L931","name":"PGame.instInvPGame","kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.instInvPGame","doc":"The inverse of a pre-game in terms of the inverse on positive pre-games. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L925-L926","name":"PGame.inv'_one_equiv","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.inv'_one_equiv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L912-L922","name":"PGame.inv'One","kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.inv'One","doc":"`inv' 1` has exactly the same moves as `1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L907-L908","name":"PGame.inv'_zero_equiv","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.inv'_zero_equiv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L896-L904","name":"PGame.inv'Zero","kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.inv'Zero","doc":"`inv' 0` has exactly the same moves as `1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L889-L892","name":"PGame.zero_lf_inv'","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.zero_lf_inv'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L880-L886","name":"PGame.inv'","kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.inv'","doc":"The inverse of a positive surreal number `x = {L | R}` is\ngiven by `x⁻¹ = {0,\n  (1 + (R - x) * x⁻¹L) * R, (1 + (L - x) * x⁻¹R) * L |\n  (1 + (L - x) * x⁻¹L) * L, (1 + (R - x) * x⁻¹R) * R}`.\nBecause the two halves `x⁻¹L, x⁻¹R` of `x⁻¹` are used in their own\ndefinition, the sets and elements are inductively generated. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L867-L871","name":"PGame.invVal_isEmpty","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.invVal_isEmpty","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L857-L863","name":"PGame.invVal","kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.invVal","doc":"Because the two halves of the definition of `inv` produce more elements\nof each side, we have to define the two families inductively.\nThis is the function part, defined by recursion on `InvTy`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L846-L851","name":"PGame.uniqueInvTy","kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.uniqueInvTy","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L843-L844","name":"PGame.InvTy.instInhabited","kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.InvTy.instInhabited","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L840-L841","name":"PGame.instIsEmptyInvTyTrue","kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.instIsEmptyInvTyTrue","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L837-L837","name":"PGame.InvTy.right₂","kind":"ctor","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.InvTy.right₂","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L836-L836","name":"PGame.InvTy.right₁","kind":"ctor","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.InvTy.right₁","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L835-L835","name":"PGame.InvTy.left₂","kind":"ctor","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.InvTy.left₂","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L834-L834","name":"PGame.InvTy.left₁","kind":"ctor","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.InvTy.left₁","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L833-L833","name":"PGame.InvTy.zero","kind":"ctor","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.InvTy.zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L832-L837","name":"PGame.InvTy","kind":"inductive","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.InvTy","doc":"Because the two halves of the definition of `inv` produce more elements\non each side, we have to define the two families inductively.\nThis is the indexing set for the function, and `invVal` is the function part. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L825-L826","name":"PGame.mul_assoc_equiv","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.mul_assoc_equiv","doc":"`x * y * z` is equivalent to `x * (y * z).`"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L672-L821","name":"PGame.quot_mul_assoc","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.quot_mul_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L668-L669","name":"PGame.one_mul_equiv","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.one_mul_equiv","doc":"`1 * x` is equivalent to `x`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L663-L664","name":"PGame.quot_one_mul","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.quot_one_mul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L658-L659","name":"PGame.oneMulRelabelling","kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.oneMulRelabelling","doc":"`1 * x` has the same moves as `x`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L653-L654","name":"PGame.mul_one_equiv","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.mul_one_equiv","doc":"`x * 1` is equivalent to `x`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L648-L649","name":"PGame.quot_mul_one","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.quot_mul_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L627-L644","name":"PGame.mulOneRelabelling","kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.mulOneRelabelling","doc":"`x * 1` has the same moves as `x`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L621-L623","name":"PGame.quot_right_distrib_sub","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.quot_right_distrib_sub","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L616-L617","name":"PGame.right_distrib_equiv","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.right_distrib_equiv","doc":"`(x + y) * z` is equivalent to `x * z + y * z.`"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L611-L612","name":"PGame.quot_right_distrib","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.quot_right_distrib","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L605-L607","name":"PGame.quot_left_distrib_sub","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.quot_left_distrib_sub","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L600-L601","name":"PGame.left_distrib_equiv","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.left_distrib_equiv","doc":"`x * (y + z)` is equivalent to `x * y + x * z.`"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L501-L596","name":"PGame.quot_left_distrib","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.quot_left_distrib","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L496-L497","name":"PGame.quot_mul_neg","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.quot_mul_neg","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L491-L492","name":"PGame.mulNegRelabelling","kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.mulNegRelabelling","doc":"`x * -y` and `-(x * y)` have the same moves. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L486-L487","name":"PGame.quot_neg_mul","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.quot_neg_mul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L465-L482","name":"PGame.negMulRelabelling","kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.negMulRelabelling","doc":"`-x * y` and `-(x * y)` have the same moves. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L460-L461","name":"PGame.quot_zero_mul","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.quot_zero_mul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L455-L456","name":"PGame.zero_mul_equiv","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.zero_mul_equiv","doc":"`0 * x` is equivalent to `0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L450-L451","name":"PGame.zeroMulRelabelling","kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.zeroMulRelabelling","doc":"`0 * x` has exactly the same moves as `0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L445-L446","name":"PGame.quot_mul_zero","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.quot_mul_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L440-L441","name":"PGame.mul_zero_equiv","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.mul_zero_equiv","doc":"`x * 0` is equivalent to `0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L435-L436","name":"PGame.mulZeroRelabelling","kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.mulZeroRelabelling","doc":"`x * 0` has exactly the same moves as `0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L429-L431","name":"PGame.isEmpty_zero_mul_rightMoves","kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.isEmpty_zero_mul_rightMoves","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L424-L426","name":"PGame.isEmpty_zero_mul_leftMoves","kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.isEmpty_zero_mul_leftMoves","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L419-L421","name":"PGame.isEmpty_mul_zero_rightMoves","kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.isEmpty_mul_zero_rightMoves","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L414-L416","name":"PGame.isEmpty_mul_zero_leftMoves","kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.isEmpty_mul_zero_leftMoves","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L410-L411","name":"PGame.mul_comm_equiv","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.mul_comm_equiv","doc":"`x * y` is equivalent to `y * x`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L405-L406","name":"PGame.quot_mul_comm","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.quot_mul_comm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L390-L402","name":"PGame.mulCommRelabelling","kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.mulCommRelabelling","doc":"`x * y` and `y * x` have the same moves. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L380-L386","name":"PGame.rightMoves_mul_cases","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.rightMoves_mul_cases","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L371-L377","name":"PGame.leftMoves_mul_cases","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.leftMoves_mul_cases","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L365-L368","name":"PGame.neg_mk_mul_moveRight_inr","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.neg_mk_mul_moveRight_inr","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L358-L361","name":"PGame.neg_mk_mul_moveRight_inl","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.neg_mk_mul_moveRight_inl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L351-L354","name":"PGame.neg_mk_mul_moveLeft_inr","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.neg_mk_mul_moveLeft_inr","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L344-L347","name":"PGame.neg_mk_mul_moveLeft_inl","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.neg_mk_mul_moveLeft_inl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L335-L340","name":"PGame.mul_moveRight_inr","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.mul_moveRight_inr","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L328-L331","name":"PGame.mk_mul_moveRight_inr","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.mk_mul_moveRight_inr","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L319-L324","name":"PGame.mul_moveRight_inl","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.mul_moveRight_inl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L312-L315","name":"PGame.mk_mul_moveRight_inl","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.mk_mul_moveRight_inl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L303-L308","name":"PGame.mul_moveLeft_inr","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.mul_moveLeft_inr","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L296-L299","name":"PGame.mk_mul_moveLeft_inr","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.mk_mul_moveLeft_inr","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L287-L292","name":"PGame.mul_moveLeft_inl","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.mul_moveLeft_inl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L280-L283","name":"PGame.mk_mul_moveLeft_inl","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.mk_mul_moveLeft_inl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L274-L276","name":"PGame.toRightMovesMul","kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.toRightMovesMul","doc":"Turns a left and a right move for `x` and `y` into a right move for `x * y` and vice versa.\n\nEven though these types are the same (not definitionally so), this is the preferred way to convert\nbetween them. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L265-L267","name":"PGame.toLeftMovesMul","kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.toLeftMovesMul","doc":"Turns two left or right moves for `x` and `y` into a left move for `x * y` and vice versa.\n\nEven though these types are the same (not definitionally so), this is the preferred way to convert\nbetween them. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L255-L258","name":"PGame.rightMoves_mul","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.rightMoves_mul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L249-L252","name":"PGame.leftMoves_mul","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.leftMoves_mul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L238-L247","name":"PGame.instMulPGame","kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.instMulPGame","doc":"The product of `x = {xL | xR}` and `y = {yL | yR}` is\n`{xL*y + x*yL - xL*yL, xR*y + x*yR - xR*yR | xL*y + x*yR - xL*yR, x*yL + xR*y - xR*yL }`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L223-L228","name":"PGame.quot_eq_of_mk'_quot_eq","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.quot_eq_of_mk'_quot_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L219-L220","name":"PGame.quot_sub","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.quot_sub","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L214-L215","name":"PGame.quot_add","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.quot_add","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L209-L210","name":"PGame.quot_neg","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#PGame.quot_neg","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L199-L201","name":"Game.orderedAddCommGroup","kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game.orderedAddCommGroup","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L194-L196","name":"Game.add_lf_add_left","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game.add_lf_add_left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L189-L191","name":"Game.add_lf_add_right","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game.add_lf_add_right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L183-L186","name":"Game.covariantClass_swap_add_lt","kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game.covariantClass_swap_add_lt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L177-L180","name":"Game.covariantClass_add_lt","kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game.covariantClass_add_lt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L171-L174","name":"Game.covariantClass_swap_add_le","kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game.covariantClass_swap_add_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L165-L168","name":"Game.covariantClass_add_le","kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game.covariantClass_add_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L161-L162","name":"Game.PGame.fuzzy_iff_game_fuzzy","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game.PGame.fuzzy_iff_game_fuzzy","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L155-L156","name":"Game.Fuzzy","kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game.Fuzzy","doc":"The fuzzy, confused, or incomparable relation on games.\n\nIf `x ‖ 0`, then the first player can always win `x`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L148-L149","name":"Game.PGame.equiv_iff_game_eq","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game.PGame.equiv_iff_game_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L144-L145","name":"Game.PGame.lt_iff_game_lt","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game.PGame.lt_iff_game_lt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L140-L141","name":"Game.PGame.lf_iff_game_lf","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game.PGame.lf_iff_game_lf","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L136-L137","name":"Game.PGame.le_iff_game_le","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game.PGame.le_iff_game_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L123-L128","name":"Game.instIsTrichotomousGameLf","kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game.instIsTrichotomousGameLf","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L117-L119","name":"Game.not_lf","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game.not_lf","doc":"On `Game`, simp-normal inequalities should use as few negations as possible. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L110-L112","name":"Game.not_le","kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game.not_le","doc":"On `Game`, simp-normal inequalities should use as few negations as possible. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L102-L103","name":"Game.Lf","kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game.Lf","doc":"The less or fuzzy relation on games.\n\nIf `0 ⧏ x` (less or fuzzy with), then Left can win `x` as the first player. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L82-L97","name":"Game.instPartialOrderGame","kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game.instPartialOrderGame","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L79-L80","name":"Game.instInhabitedGame","kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game.instInhabitedGame","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L56-L77","name":"Game.instAddCommGroupWithOneGame","kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game.instAddCommGroupWithOneGame","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L54-L54","name":"Game.neg","kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game.neg","doc":"Negation of games. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/SetTheory/Game/Basic.lean#L46-L47","name":"Game","kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#Game","doc":"The type of combinatorial games. In ZFC, a combinatorial game is constructed from\ntwo sets of combinatorial games that have been constructed at an earlier\nstage. To do this in type theory, we say that a combinatorial pre-game is built\ninductively from two families of combinatorial games indexed over any type\nin Type u. The resulting type `PGame.{u}` lives in `Type (u+1)`,\nreflecting that it is a proper class in ZFC.\nA combinatorial game is then constructed by quotienting by the equivalence\n`x ≈ y ↔ x ≤ y ∧ y ≤ x`. "}]}