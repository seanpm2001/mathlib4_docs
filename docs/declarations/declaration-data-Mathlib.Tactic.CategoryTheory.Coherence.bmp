{"name":"Mathlib.Tactic.CategoryTheory.Coherence","instances":[{"typeNames":["CategoryTheory.MonoidalCategory.tensorUnit"],"name":"Mathlib.Tactic.Coherence.LiftObj_unit","className":"Mathlib.Tactic.Coherence.LiftObj"},{"typeNames":["CategoryTheory.MonoidalCategory.tensorObj"],"name":"Mathlib.Tactic.Coherence.LiftObj_tensor","className":"Mathlib.Tactic.Coherence.LiftObj"},{"typeNames":[],"name":"Mathlib.Tactic.Coherence.LiftObj_of","className":"Mathlib.Tactic.Coherence.LiftObj"},{"typeNames":["CategoryTheory.CategoryStruct.id","CategoryTheory.Category.toCategoryStruct"],"name":"Mathlib.Tactic.Coherence.LiftHom_id","className":"Mathlib.Tactic.Coherence.LiftHom"},{"typeNames":["CategoryTheory.MonoidalCategory.tensorObj","CategoryTheory.MonoidalCategory.tensorUnit'","Mathlib.Tactic.Coherence.LiftObj_tensor","CategoryTheory.MonoidalCategory.tensorUnit'","Mathlib.Tactic.Coherence.LiftObj_unit","CategoryTheory.Iso.hom","CategoryTheory.MonoidalCategory.tensorObj","CategoryTheory.MonoidalCategory.tensorUnit'","CategoryTheory.MonoidalCategory.leftUnitor"],"name":"Mathlib.Tactic.Coherence.LiftHom_left_unitor_hom","className":"Mathlib.Tactic.Coherence.LiftHom"},{"typeNames":["CategoryTheory.MonoidalCategory.tensorObj","CategoryTheory.MonoidalCategory.tensorUnit'","Mathlib.Tactic.Coherence.LiftObj_tensor","CategoryTheory.MonoidalCategory.tensorUnit'","Mathlib.Tactic.Coherence.LiftObj_unit","CategoryTheory.Iso.inv","CategoryTheory.MonoidalCategory.tensorObj","CategoryTheory.MonoidalCategory.tensorUnit'","CategoryTheory.MonoidalCategory.leftUnitor"],"name":"Mathlib.Tactic.Coherence.LiftHom_left_unitor_inv","className":"Mathlib.Tactic.Coherence.LiftHom"},{"typeNames":["CategoryTheory.MonoidalCategory.tensorObj","CategoryTheory.MonoidalCategory.tensorUnit'","Mathlib.Tactic.Coherence.LiftObj_tensor","CategoryTheory.MonoidalCategory.tensorUnit'","Mathlib.Tactic.Coherence.LiftObj_unit","CategoryTheory.Iso.hom","CategoryTheory.MonoidalCategory.tensorObj","CategoryTheory.MonoidalCategory.tensorUnit'","CategoryTheory.MonoidalCategory.rightUnitor"],"name":"Mathlib.Tactic.Coherence.LiftHom_right_unitor_hom","className":"Mathlib.Tactic.Coherence.LiftHom"},{"typeNames":["CategoryTheory.MonoidalCategory.tensorObj","CategoryTheory.MonoidalCategory.tensorUnit'","Mathlib.Tactic.Coherence.LiftObj_tensor","CategoryTheory.MonoidalCategory.tensorUnit'","Mathlib.Tactic.Coherence.LiftObj_unit","CategoryTheory.Iso.inv","CategoryTheory.MonoidalCategory.tensorObj","CategoryTheory.MonoidalCategory.tensorUnit'","CategoryTheory.MonoidalCategory.rightUnitor"],"name":"Mathlib.Tactic.Coherence.LiftHom_right_unitor_inv","className":"Mathlib.Tactic.Coherence.LiftHom"},{"typeNames":["CategoryTheory.MonoidalCategory.tensorObj","CategoryTheory.MonoidalCategory.tensorObj","Mathlib.Tactic.Coherence.LiftObj_tensor","CategoryTheory.MonoidalCategory.tensorObj","Mathlib.Tactic.Coherence.LiftObj_tensor","CategoryTheory.MonoidalCategory.tensorObj","CategoryTheory.Iso.hom","CategoryTheory.MonoidalCategory.tensorObj","CategoryTheory.MonoidalCategory.associator"],"name":"Mathlib.Tactic.Coherence.LiftHom_associator_hom","className":"Mathlib.Tactic.Coherence.LiftHom"},{"typeNames":["CategoryTheory.MonoidalCategory.tensorObj","CategoryTheory.MonoidalCategory.tensorObj","Mathlib.Tactic.Coherence.LiftObj_tensor","CategoryTheory.MonoidalCategory.tensorObj","Mathlib.Tactic.Coherence.LiftObj_tensor","CategoryTheory.MonoidalCategory.tensorObj","CategoryTheory.Iso.inv","CategoryTheory.MonoidalCategory.tensorObj","CategoryTheory.MonoidalCategory.associator"],"name":"Mathlib.Tactic.Coherence.LiftHom_associator_inv","className":"Mathlib.Tactic.Coherence.LiftHom"},{"typeNames":["CategoryTheory.CategoryStruct.comp","CategoryTheory.Category.toCategoryStruct"],"name":"Mathlib.Tactic.Coherence.LiftHom_comp","className":"Mathlib.Tactic.Coherence.LiftHom"},{"typeNames":["CategoryTheory.MonoidalCategory.tensorObj","CategoryTheory.MonoidalCategory.tensorObj","Mathlib.Tactic.Coherence.LiftObj_tensor","Mathlib.Tactic.Coherence.LiftObj_tensor","CategoryTheory.MonoidalCategory.tensorHom"],"name":"Mathlib.Tactic.Coherence.LiftHom_tensor","className":"Mathlib.Tactic.Coherence.LiftHom"},{"typeNames":[],"name":"Mathlib.Tactic.Coherence.MonoidalCoherence.refl","className":"Mathlib.Tactic.Coherence.MonoidalCoherence"},{"typeNames":["CategoryTheory.MonoidalCategory.tensorObj","CategoryTheory.MonoidalCategory.tensorObj","Mathlib.Tactic.Coherence.LiftObj_tensor","Mathlib.Tactic.Coherence.LiftObj_tensor"],"name":"Mathlib.Tactic.Coherence.MonoidalCoherence.tensor","className":"Mathlib.Tactic.Coherence.MonoidalCoherence"},{"typeNames":["CategoryTheory.MonoidalCategory.tensorObj","Mathlib.Tactic.Coherence.LiftObj_tensor"],"name":"Mathlib.Tactic.Coherence.MonoidalCoherence.tensor_right","className":"Mathlib.Tactic.Coherence.MonoidalCoherence"},{"typeNames":["CategoryTheory.MonoidalCategory.tensorObj","Mathlib.Tactic.Coherence.LiftObj_tensor"],"name":"Mathlib.Tactic.Coherence.MonoidalCoherence.tensor_right'","className":"Mathlib.Tactic.Coherence.MonoidalCoherence"},{"typeNames":["CategoryTheory.MonoidalCategory.tensorObj","CategoryTheory.MonoidalCategory.tensorUnit","Mathlib.Tactic.Coherence.LiftObj_tensor","CategoryTheory.MonoidalCategory.tensorUnit","Mathlib.Tactic.Coherence.LiftObj_unit"],"name":"Mathlib.Tactic.Coherence.MonoidalCoherence.left","className":"Mathlib.Tactic.Coherence.MonoidalCoherence"},{"typeNames":["CategoryTheory.MonoidalCategory.tensorObj","CategoryTheory.MonoidalCategory.tensorUnit","Mathlib.Tactic.Coherence.LiftObj_tensor","CategoryTheory.MonoidalCategory.tensorUnit","Mathlib.Tactic.Coherence.LiftObj_unit"],"name":"Mathlib.Tactic.Coherence.MonoidalCoherence.left'","className":"Mathlib.Tactic.Coherence.MonoidalCoherence"},{"typeNames":["CategoryTheory.MonoidalCategory.tensorObj","CategoryTheory.MonoidalCategory.tensorUnit","Mathlib.Tactic.Coherence.LiftObj_tensor","CategoryTheory.MonoidalCategory.tensorUnit","Mathlib.Tactic.Coherence.LiftObj_unit"],"name":"Mathlib.Tactic.Coherence.MonoidalCoherence.right","className":"Mathlib.Tactic.Coherence.MonoidalCoherence"},{"typeNames":["CategoryTheory.MonoidalCategory.tensorObj","CategoryTheory.MonoidalCategory.tensorUnit","Mathlib.Tactic.Coherence.LiftObj_tensor","CategoryTheory.MonoidalCategory.tensorUnit","Mathlib.Tactic.Coherence.LiftObj_unit"],"name":"Mathlib.Tactic.Coherence.MonoidalCoherence.right'","className":"Mathlib.Tactic.Coherence.MonoidalCoherence"},{"typeNames":["CategoryTheory.MonoidalCategory.tensorObj","Mathlib.Tactic.Coherence.LiftObj_tensor","CategoryTheory.MonoidalCategory.tensorObj"],"name":"Mathlib.Tactic.Coherence.MonoidalCoherence.assoc","className":"Mathlib.Tactic.Coherence.MonoidalCoherence"},{"typeNames":["CategoryTheory.MonoidalCategory.tensorObj","Mathlib.Tactic.Coherence.LiftObj_tensor","CategoryTheory.MonoidalCategory.tensorObj"],"name":"Mathlib.Tactic.Coherence.MonoidalCoherence.assoc'","className":"Mathlib.Tactic.Coherence.MonoidalCoherence"}],"imports":["Init","Mathlib.CategoryTheory.Monoidal.Free.Coherence","Mathlib.Tactic.CategoryTheory.BicategoryCoherence"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L348-L362","name":"Mathlib.Tactic.Coherence.coherence","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.coherence","doc":"Use the coherence theorem for monoidal categories to solve equations in a monoidal equation,\nwhere the two sides only differ by replacing strings of monoidal structural morphisms\n(that is, associators, unitors, and identities)\nwith different strings of structural morphisms with the same source and target.\n\nThat is, `coherence` can handle goals of the form\n`a ≫ f ≫ b ≫ g ≫ c = a' ≫ f ≫ b' ≫ g ≫ c'`\nwhere `a = a'`, `b = b'`, and `c = c'` can be proved using `pure_coherence`.\n\n(If you have very large equations on which `coherence` is unexpectedly failing,\nyou may need to increase the typeclass search depth,\nusing e.g. `set_option synthInstance.maxSize 500`.)\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L319-L346","name":"Mathlib.Tactic.Coherence.coherence_loop","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.coherence_loop","doc":"The main part of `coherence` tactic. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L304-L313","name":"Mathlib.Tactic.Coherence.insertTrailingIds","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.insertTrailingIds","doc":"If either the lhs or rhs is not a composition, compose it on the right with an identity. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L299-L301","name":"Mathlib.Tactic.Coherence.insert_id_rhs","kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.insert_id_rhs","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L295-L297","name":"Mathlib.Tactic.Coherence.insert_id_lhs","kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.insert_id_lhs","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L280-L293","name":"Mathlib.Tactic.Coherence.liftable_prefixes","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.liftable_prefixes","doc":"Internal tactic used in `coherence`.\n\nRewrites an equation `f = g` as `f₀ ≫ f₁ = g₀ ≫ g₁`,\nwhere `f₀` and `g₀` are maximal prefixes of `f` and `g` (possibly after reassociating)\nwhich are \"liftable\" (i.e. expressible as compositions of unitors and associators).\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L275-L278","name":"Mathlib.Tactic.Coherence.assoc_liftHom","kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.assoc_liftHom","doc":"Auxiliary simp lemma for the `coherence` tactic:\nthis moves brackets to the left in order to expose a maximal prefix\nbuilt out of unitors and associators.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L248-L264","name":"Mathlib.Tactic.Coherence.pure_coherence","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.pure_coherence","doc":"`pure_coherence` uses the coherence theorem for monoidal categories to prove the goal.\nIt can prove any equality made up only of associators, unitors, and identities.\n```lean\nexample {C : Type} [Category C] [MonoidalCategory C] :\n  (λ_ (𝟙_ C)).hom = (ρ_ (𝟙_ C)).hom :=\nby pure_coherence\n```\n\nUsers will typically just use the `coherence` tactic,\nwhich can also cope with identities of the form\n`a ≫ f ≫ b ≫ g ≫ c = a' ≫ f ≫ b' ≫ g ≫ c'`\nwhere `a = a'`, `b = b'`, and `c = c'` can be proved using `pure_coherence`\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L242-L244","name":"Mathlib.Tactic.Coherence.tacticMonoidal_coherence","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.tacticMonoidal_coherence","doc":"Coherence tactic for monoidal categories.\nUse `pure_coherence` instead, which is a frontend to this one. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L226-L240","name":"Mathlib.Tactic.Coherence.monoidal_coherence","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.monoidal_coherence","doc":"Coherence tactic for monoidal categories. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L220-L223","name":"Mathlib.Tactic.Coherence.mkProjectMapExpr","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.mkProjectMapExpr","doc":"Auxiliary definition for `monoidal_coherence`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L210-L215","name":"Mathlib.Tactic.Coherence.exception'","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.exception'","doc":"Helper function for throwing exceptions with respect to the main goal. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L207-L207","name":"Mathlib.Tactic.Coherence.exception","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.exception","doc":"Helper function for throwing exceptions. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L194-L196","name":"Mathlib.Tactic.Coherence.monoidalComp_refl","kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.monoidalComp_refl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L185-L186","name":"Mathlib.Tactic.Coherence.«term_≪⊗≫_»","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.«term_≪⊗≫_»","doc":"Compose two isomorphisms in a monoidal category,\ninserting unitors and associators between as necessary. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L181-L183","name":"Mathlib.Tactic.Coherence.monoidalIsoComp","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.monoidalIsoComp","doc":"Compose two isomorphisms in a monoidal category,\ninserting unitors and associators between as necessary. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L176-L177","name":"Mathlib.Tactic.Coherence.«term_⊗≫_»","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.«term_⊗≫_»","doc":"Compose two morphisms in a monoidal category,\ninserting unitors and associators between as necessary. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L172-L174","name":"Mathlib.Tactic.Coherence.monoidalComp","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.monoidalComp","doc":"Compose two morphisms in a monoidal category,\ninserting unitors and associators between as necessary. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L160-L161","name":"Mathlib.Tactic.Coherence.monoidalIso","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.monoidalIso","doc":"Construct an isomorphism between two objects in a monoidal category\nout of unitors and associators. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L152-L154","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.assoc'","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.assoc'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L151-L151","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.assoc'_hom","kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.assoc'_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L147-L149","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.assoc","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L146-L146","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.assoc_hom","kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.assoc_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L142-L144","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.right'","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.right'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L141-L141","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.right'_hom","kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.right'_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L137-L139","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.right","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L136-L136","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.right_hom","kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.right_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L132-L134","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.left'","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.left'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L131-L131","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.left'_hom","kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.left'_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L127-L129","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.left","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L126-L126","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.left_hom","kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.left_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L122-L124","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.tensor_right'","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.tensor_right'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L121-L121","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.tensor_right'_hom","kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.tensor_right'_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L117-L119","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.tensor_right","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.tensor_right","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L116-L116","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.tensor_right_hom","kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.tensor_right_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L112-L114","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.tensor","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.tensor","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L111-L111","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.tensor_hom","kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.tensor_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L109-L109","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.refl","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.refl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L108-L108","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.refl_hom","kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.refl_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L102-L102","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.isIso","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.isIso","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L101-L101","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.hom","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L100-L100","name":"Mathlib.Tactic.Coherence.MonoidalCoherence.mk","kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L100-L102","name":"Mathlib.Tactic.Coherence.MonoidalCoherence","kind":"class","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.MonoidalCoherence","doc":"A typeclass carrying a choice of monoidal structural isomorphism between two objects.\nUsed by the `⊗≫` monoidal composition operator, and the `coherence` tactic.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L91-L93","name":"Mathlib.Tactic.Coherence.LiftHom_tensor","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.LiftHom_tensor","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L87-L89","name":"Mathlib.Tactic.Coherence.LiftHom_comp","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.LiftHom_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L83-L85","name":"Mathlib.Tactic.Coherence.LiftHom_associator_inv","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.LiftHom_associator_inv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L79-L81","name":"Mathlib.Tactic.Coherence.LiftHom_associator_hom","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.LiftHom_associator_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L76-L77","name":"Mathlib.Tactic.Coherence.LiftHom_right_unitor_inv","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.LiftHom_right_unitor_inv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L73-L74","name":"Mathlib.Tactic.Coherence.LiftHom_right_unitor_hom","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.LiftHom_right_unitor_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L70-L71","name":"Mathlib.Tactic.Coherence.LiftHom_left_unitor_inv","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.LiftHom_left_unitor_inv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L67-L68","name":"Mathlib.Tactic.Coherence.LiftHom_left_unitor_hom","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.LiftHom_left_unitor_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L65-L65","name":"Mathlib.Tactic.Coherence.LiftHom_id","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.LiftHom_id","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L63-L63","name":"Mathlib.Tactic.Coherence.LiftHom.lift","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.LiftHom.lift","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L62-L62","name":"Mathlib.Tactic.Coherence.LiftHom.mk","kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.LiftHom.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L62-L63","name":"Mathlib.Tactic.Coherence.LiftHom","kind":"class","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.LiftHom","doc":"A typeclass carrying a choice of lift of a morphism from `C` to `FreeMonoidalCategory C`.\nIt must be the case that `projectMap id _ _ (LiftHom.lift f) = f` by defeq. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L58-L58","name":"Mathlib.Tactic.Coherence.LiftObj_of","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.LiftObj_of","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L55-L56","name":"Mathlib.Tactic.Coherence.LiftObj_tensor","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.LiftObj_tensor","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L53-L53","name":"Mathlib.Tactic.Coherence.LiftObj_unit","kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.LiftObj_unit","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L51-L51","name":"Mathlib.Tactic.Coherence.LiftObj.lift","kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.LiftObj.lift","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L50-L50","name":"Mathlib.Tactic.Coherence.LiftObj.mk","kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.LiftObj.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CategoryTheory/Coherence.lean#L50-L51","name":"Mathlib.Tactic.Coherence.LiftObj","kind":"class","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence.html#Mathlib.Tactic.Coherence.LiftObj","doc":"A typeclass carrying a choice of lift of an object from `C` to `FreeMonoidalCategory C`.\nIt must be the case that `projectObj id (LiftObj.lift x) = x` by defeq. "}]}