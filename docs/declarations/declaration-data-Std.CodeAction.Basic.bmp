{"name":"Std.CodeAction.Basic","instances":[],"imports":["Init","Lean.Elab.BuiltinTerm","Lean.Elab.BuiltinNotation","Std.Lean.Name","Std.Lean.InfoTree","Std.CodeAction.Attr"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Basic.lean#L213-L231","name":"Std.CodeAction.cmdCodeActionProvider","kind":"def","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.cmdCodeActionProvider","doc":"A code action which calls all `@[command_code_action]` code actions on each command.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Basic.lean#L166-L208","name":"Std.CodeAction.tacticCodeActionProvider","kind":"def","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.tacticCodeActionProvider","doc":"A code action which calls `@[tactic_code_action]` code actions. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Basic.lean#L146-L163","name":"Std.CodeAction.findInfoTree?","kind":"opaque","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.findInfoTree?","doc":"Returns the info tree corresponding to a syntax, using `kind` and `range` for identification.\n(This is not foolproof, but it is a fairly accurate proxy for `Syntax` equality and a lot cheaper\nthan deep comparison.)\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Basic.lean#L99-L139","name":"Std.CodeAction.findTactic?.go","kind":"opaque","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.findTactic?.go","doc":"Main recursion for `findTactic?`. This takes a `stack` context and a root syntax `stx`,\nand returns the best `FindTacticResult` it can find. It returns `none` (abort) if two or more\nresults are found, and `some none` (none yet) if no results are found. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Basic.lean#L92-L94","name":"Std.CodeAction.findTactic?.merge","kind":"def","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.findTactic?.merge","doc":"Merges the results of two `FindTacticResult`s. This just prefers the second (inner) one,\nunless the inner tactic is a dispreferred tactic sequence and the outer one is preferred.\nThis is used to implement whitespace-sensitive selection of tactic sequences. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Basic.lean#L82-L87","name":"Std.CodeAction.findTactic?.visit","kind":"def","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.findTactic?.visit","doc":"Returns `none` if we should not visit this syntax at all, and `some false` if we only\nwant to visit it in \"extended\" mode (where we include trailing characters). "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Basic.lean#L77-L139","name":"Std.CodeAction.findTactic?","kind":"def","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.findTactic?","doc":"Find the syntax on which to trigger tactic code actions.\nThis is a pure syntax pass, without regard to elaboration information.\n\n* `preferred : String.Pos → Bool`: used to select \"preferred `tacticSeq`s\" based on the cursor\n  column, when the cursor selection would otherwise be ambiguous. For example, in:\n  ```\n  · foo\n    · bar\n      baz\n    |\n  ```\n  where the cursor is at the `|`, we select the `tacticSeq` starting with `foo`, while if the\n  cursor was indented to align with `baz` then we would select the `bar; baz` sequence instead.\n\n* `range`: the cursor selection. We do not do much with range selections; if a range selection\n  covers more than one tactic then we abort.\n\n* `root`: the root syntax to process\n\nThe return value is either a selected tactic, or a selected point in a tactic sequence.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Basic.lean#L50-L53","name":"Std.CodeAction.FindTacticResult.tacticSeq","kind":"ctor","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.FindTacticResult.tacticSeq","doc":"The cursor is between tactics, and the nearest enclosing range is a tactic sequence.\nCode actions will insert tactics at index `insertIdx` into the syntax\n(which is a nullNode of `tactic;*` inside a `tacticSeqBracketed` or `tacticSeq1Indented`). "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Basic.lean#L48-L49","name":"Std.CodeAction.FindTacticResult.tactic","kind":"ctor","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.FindTacticResult.tactic","doc":"The nearest enclosing tactic is a tactic, with the given syntax stack. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Basic.lean#L47-L53","name":"Std.CodeAction.FindTacticResult","kind":"inductive","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.FindTacticResult","doc":"The return value of `findTactic?`.\nThis is the syntax for which code actions will be triggered.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/CodeAction/Basic.lean#L29-L41","name":"Std.CodeAction.holeCodeActionProvider","kind":"def","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.holeCodeActionProvider","doc":"A code action which calls all `@[hole_code_action]` code actions on each hole\n(`?_`, `_`, or `sorry`).\n"}]}