{"name":"Std.Tactic.Basic","instances":[],"imports":["Init","Std.Linter","Std.Tactic.NoMatch","Std.Tactic.GuardExpr","Std.Tactic.ByCases","Std.Tactic.SeqFocus","Std.Tactic.ShowTerm","Std.Tactic.SimpTrace","Lean.Elab.Tactic.ElabTerm","Std.Lean.Meta.Basic","Std.Lean.Tactic"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Basic.lean#L143-L143","name":"Std.Tactic.Conv.exact","kind":"def","docLink":"./Std/Tactic/Basic.html#Std.Tactic.Conv.exact","doc":"`conv` tactic to close a goal using an equality theorem. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Basic.lean#L139-L140","name":"Std.Tactic.triv","kind":"def","docLink":"./Std/Tactic/Basic.html#Std.Tactic.triv","doc":"Tries to solve the goal using a canonical proof of `True`, or the `rfl` tactic.\nUnlike `trivial` or `trivial'`, does not use the `contradiction` tactic.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Basic.lean#L120-L133","name":"Std.Tactic.tacticEapply_","kind":"def","docLink":"./Std/Tactic/Basic.html#Std.Tactic.tacticEapply_","doc":"`eapply e` is like `apply e` but it does not add subgoals for variables that appear\nin the types of other goals. Note that this can lead to a failure where there are\nno goals remaining but there are still metavariables in the term:\n```\nexample (h : ∀ x : Nat, x = x → True) : True := by\n  eapply h\n  rfl\n  -- no goals\n-- (kernel) declaration has metavariables '_example'\n```\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Basic.lean#L113-L118","name":"Std.Tactic.tacticFapply_","kind":"def","docLink":"./Std/Tactic/Basic.html#Std.Tactic.tacticFapply_","doc":"`fapply e` is like `apply e` but it adds goals in the order they appear,\nrather than putting the dependent goals first.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Basic.lean#L109-L110","name":"Std.Tactic.tacticSplit_ands","kind":"def","docLink":"./Std/Tactic/Basic.html#Std.Tactic.tacticSplit_ands","doc":"`split_ands` applies `And.intro` until it does not make progress. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Basic.lean#L106-L107","name":"Std.Tactic.tacticSubst_eqs","kind":"def","docLink":"./Std/Tactic/Basic.html#Std.Tactic.tacticSubst_eqs","doc":"`subst_eqs` applies `subst` to all equalities in the context as long as it makes progress. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Basic.lean#L104-L104","name":"Std.Tactic.tacticRepeat1_","kind":"def","docLink":"./Std/Tactic/Basic.html#Std.Tactic.tacticRepeat1_","doc":"`repeat1 tac` applies `tac` to main goal at least once. If the application succeeds,\nthe tactic is applied recursively to the generated subgoals until it eventually fails.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Basic.lean#L93-L98","name":"Std.Tactic.tacticRepeat'_","kind":"def","docLink":"./Std/Tactic/Basic.html#Std.Tactic.tacticRepeat'_","doc":"`repeat' tac` runs `tac` on all of the goals to produce a new list of goals,\nthen runs `tac` again on all of those goals, and repeats until `tac` fails on all remaining goals.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Basic.lean#L72-L84","name":"Std.Tactic.tacticIterate____","kind":"def","docLink":"./Std/Tactic/Basic.html#Std.Tactic.tacticIterate____","doc":"`iterate n tac` runs `tac` exactly `n` times.\n`iterate tac` runs `tac` repeatedly until failure.\n\nTo run multiple tactics, one can do `iterate (tac₁; tac₂; ⋯)` or\n```lean\niterate\n  tac₁\n  tac₂\n  ⋯\n```\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Basic.lean#L61-L70","name":"Std.Tactic.byContra","kind":"def","docLink":"./Std/Tactic/Basic.html#Std.Tactic.byContra","doc":"`by_contra h` proves `⊢ p` by contradiction,\nintroducing a hypothesis `h : ¬p` and proving `False`.\n* If `p` is a negation `¬q`, `h : q` will be introduced instead of `¬¬q`.\n* If `p` is decidable, it uses `Decidable.byContradiction` instead of `Classical.byContradiction`.\n* If `h` is omitted, the introduced variable `_: ¬p` will be anonymous.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Basic.lean#L46-L52","name":"Std.Tactic.exacts","kind":"def","docLink":"./Std/Tactic/Basic.html#Std.Tactic.exacts","doc":"Like `exact`, but takes a list of terms and checks that all goals are discharged after the tactic.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Basic.lean#L43-L44","name":"Std.Tactic.tacticRwa__","kind":"def","docLink":"./Std/Tactic/Basic.html#Std.Tactic.tacticRwa__","doc":"`rwa` calls `rw`, then closes any remaining goals using `assumption`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Basic.lean#L30-L31","name":"Std.Tactic.failIfSuccessConv","kind":"def","docLink":"./Std/Tactic/Basic.html#Std.Tactic.failIfSuccessConv","doc":"`fail_if_success t` fails if the tactic `t` succeeds. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Basic.lean#L28-L28","name":"Std.Tactic.tactic_","kind":"def","docLink":"./Std/Tactic/Basic.html#Std.Tactic.tactic_","doc":"`_` in tactic position acts like the `done` tactic: it fails and gives the list\nof goals if there are any. It is useful as a placeholder after starting a tactic block\nsuch as `by _` to make it syntactically correct and show the current goal.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Basic.lean#L21-L21","name":"Std.Tactic.tacticExfalso","kind":"def","docLink":"./Std/Tactic/Basic.html#Std.Tactic.tacticExfalso","doc":"`exfalso` converts a goal `⊢ tgt` into `⊢ False` by applying `False.elim`. "}]}