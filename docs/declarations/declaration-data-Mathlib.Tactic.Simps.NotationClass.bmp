{"name":"Mathlib.Tactic.Simps.NotationClass","instances":[{"typeNames":["Simps.AutomaticProjectionData"],"name":"Simps.instInhabitedAutomaticProjectionData","className":"Inhabited"}],"imports":["Init","Std.Lean.NameMapAttribute","Mathlib.Lean.Expr.Basic","Lean.Elab.Exception","Qq.MetaM","Std.Tactic.Lint"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Simps/NotationClass.lean#L103-L126","name":"Simps.notationClassAttr","kind":"opaque","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.notationClassAttr","doc":"`@[notation_class]` attribute. Note: this is *not* a `NameMapAttribute` because we key on the\nargument of the attribute, not the declaration name. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Simps/NotationClass.lean#L101-L101","name":"Simps.instInhabitedAutomaticProjectionData","kind":"instance","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.instInhabitedAutomaticProjectionData","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Simps/NotationClass.lean#L100-L100","name":"Simps.AutomaticProjectionData.findArgs","kind":"def","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData.findArgs","doc":"The method to find the arguments of the class. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Simps/NotationClass.lean#L98-L98","name":"Simps.AutomaticProjectionData.isNotation","kind":"def","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData.isNotation","doc":"`isNotation` is a boolean that specifies whether this is notation\n(false for the coercions `FunLike` and `SetLike`). If this is set to true, we add the current\nclass as hypothesis during type-class synthesis. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Simps/NotationClass.lean#L94-L94","name":"Simps.AutomaticProjectionData.className","kind":"def","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData.className","doc":"`className` is the name of the class we are looking for. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Simps/NotationClass.lean#L92-L101","name":"Simps.AutomaticProjectionData","kind":"structure","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData","doc":"Data needed to generate automatic projections. This data is associated to a name of a projection\nin a structure that must be used to trigger the search. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Simps/NotationClass.lean#L83-L88","name":"Simps.findCoercionArgs","kind":"def","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.findCoercionArgs","doc":"Find arguments of a coercion class (`FunLike` or `SetLike`) "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Simps/NotationClass.lean#L79-L80","name":"Simps.findOneArgs","kind":"def","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.findOneArgs","doc":"Find arguments for the `One` class. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Simps/NotationClass.lean#L75-L76","name":"Simps.findZeroArgs","kind":"def","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.findZeroArgs","doc":"Find arguments for the `Zero` class. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Simps/NotationClass.lean#L71-L72","name":"Simps.zsmulArgs","kind":"def","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.zsmulArgs","doc":"Find arguments by prepending `ℤ` and duplicating the first argument. Used for `zsmul`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Simps/NotationClass.lean#L67-L68","name":"Simps.nsmulArgs","kind":"def","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.nsmulArgs","doc":"Find arguments by prepending `ℕ` and duplicating the first argument. Used for `nsmul`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Simps/NotationClass.lean#L64-L64","name":"Simps.copySecond","kind":"def","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.copySecond","doc":"Find arguments by duplicating the first argument. Used for `smul`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Simps/NotationClass.lean#L61-L61","name":"Simps.copyFirst","kind":"def","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.copyFirst","doc":"Find arguments by duplicating the first argument. Used for `pow`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Simps/NotationClass.lean#L49-L58","name":"Simps.defaultfindArgs","kind":"def","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.defaultfindArgs","doc":"Find arguments for a notation class "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Simps/NotationClass.lean#L46-L46","name":"Simps.findArgType","kind":"def","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.findArgType","doc":"The type of methods to find arguments for automatic projections for `simps`.\nWe partly define this as a separate definition so that the unused arguments linter doesn't complain.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Simps/NotationClass.lean#L23-L37","name":"notation_class","kind":"def","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#notation_class","doc":"The `@[notation_class]` attribute specifies that this is a notation class,\nand this notation should be used instead of projections by `@[simps]`.\n* This is only important if the projection is written differently using notation, e.g.\n  `+` uses `HAdd.hAdd`, not `Add.add` and `0` uses `OfNat.ofNat` not `Zero.zero`.\n  We also add it to non-heterogenous notation classes, like `Neg`, but it doesn't do much for any\n  class that extends `Neg`.\n* `@[notation_class * <projName> Simps.findCoercionArgs]` is used to configure the\n  `SetLike` and `FunLike` coercions.\n* The first name argument is the projection name we use as the key to search for this class\n  (default: name of first projection of the class).\n* The second argument is the name of a declaration that has type\n  `findArgType` which is defined to be `Name → Name → Array Expr → MetaM (Array (Option Expr))`.\n  This declaration specifies how to generate the arguments of the notation class from the\n  arguments of classes that use the projection. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Simps/NotationClass.lean#L1-L1","name":"Simps.AutomaticProjectionData.mk","kind":"ctor","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData.mk","doc":""}]}