{"name":"Mathlib.Tactic.Nontriviality.Core","instances":[],"imports":["Init","Qq.MetaM","Mathlib.Logic.Nontrivial","Mathlib.Tactic.SolveByElim"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Nontriviality/Core.lean#L104-L125","name":"Mathlib.Tactic.Nontriviality.elabNontriviality","kind":"def","docLink":"./Mathlib/Tactic/Nontriviality/Core.html#Mathlib.Tactic.Nontriviality.elabNontriviality","doc":"Elaborator for the `nontriviality` tactic. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Nontriviality/Core.lean#L58-L101","name":"Mathlib.Tactic.Nontriviality.nontriviality","kind":"def","docLink":"./Mathlib/Tactic/Nontriviality/Core.html#Mathlib.Tactic.Nontriviality.nontriviality","doc":"Attempts to generate a `Nontrivial α` hypothesis.\n\nThe tactic first looks for an instance using `infer_instance`.\n\nIf the goal is an (in)equality, the type `α` is inferred from the goal.\nOtherwise, the type needs to be specified in the tactic invocation, as `nontriviality α`.\n\nThe `nontriviality` tactic will first look for strict inequalities amongst the hypotheses,\nand use these to derive the `Nontrivial` instance directly.\n\nOtherwise, it will perform a case split on `Subsingleton α ∨ Nontrivial α`, and attempt to discharge\nthe `Subsingleton` goal using `simp [lemmas, nontriviality]`, where `[lemmas]` is a list of\nadditional `simp` lemmas that can be passed to `nontriviality` using the syntax\n`nontriviality α using [lemmas]`.\n\n```\nexample {R : Type} [OrderedRing R] {a : R} (h : 0 < a) : 0 < a := by\n  nontriviality -- There is now a `nontrivial R` hypothesis available.\n  assumption\n```\n\n```\nexample {R : Type} [CommRing R] {r s : R} : r * s = s * r := by\n  nontriviality -- There is now a `nontrivial R` hypothesis available.\n  apply mul_comm\n```\n\n```\nexample {R : Type} [OrderedRing R] {a : R} (h : 0 < a) : (2 : ℕ) ∣ 4 := by\n  nontriviality R -- there is now a `nontrivial R` hypothesis available.\n  dec_trivial\n```\n\n```\ndef myeq {α : Type} (a b : α) : Prop := a = b\n\nexample {α : Type} (a b : α) (h : a = b) : myeq a b := by\n  success_if_fail nontriviality α -- Fails\n  nontriviality α using [myeq] -- There is now a `nontrivial α` hypothesis available\n  assumption\n```\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Nontriviality/Core.lean#L53-L56","name":"Mathlib.Tactic.Nontriviality.nontrivialityByAssumption","kind":"def","docLink":"./Mathlib/Tactic/Nontriviality/Core.html#Mathlib.Tactic.Nontriviality.nontrivialityByAssumption","doc":"Tries to generate a `Nontrivial α` instance using `nontrivial_of_ne` or `nontrivial_of_lt`\nand local hypotheses.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Nontriviality/Core.lean#L30-L47","name":"Mathlib.Tactic.Nontriviality.nontrivialityByElim","kind":"def","docLink":"./Mathlib/Tactic/Nontriviality/Core.html#Mathlib.Tactic.Nontriviality.nontrivialityByElim","doc":"Tries to generate a `Nontrivial α` instance by performing case analysis on\n`subsingleton_or_nontrivial α`,\nattempting to discharge the subsingleton branch using lemmas with `@[nontriviality]` attribute,\nincluding `Subsingleton.le` and `eq_iff_true_of_subsingleton`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Nontriviality/Core.lean#L20-L22","name":"Mathlib.Tactic.Nontriviality.subsingleton_or_nontrivial_elim","kind":"theorem","docLink":"./Mathlib/Tactic/Nontriviality/Core.html#Mathlib.Tactic.Nontriviality.subsingleton_or_nontrivial_elim","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Nontriviality/Core.lean#L15-L18","name":"Mathlib.Tactic.Nontriviality.Parser.Attr.nontriviality","kind":"def","docLink":"./Mathlib/Tactic/Nontriviality/Core.html#Mathlib.Tactic.Nontriviality.Parser.Attr.nontriviality","doc":"The `@[nontriviality]` simp set is used by the `nontriviality` tactic to automatically\ndischarge theorems about the trivial case (where we know `Subsingleton α` and many theorems\nin e.g. groups are trivially true). "}]}