{"name":"Mathlib.Data.LazyList.Basic","instances":[{"typeNames":["Eq","Thunk"],"name":"Thunk.instDecidableEqThunk","className":"Decidable"},{"typeNames":["Eq","LazyList"],"name":"LazyList.decidableEq","className":"Decidable"},{"typeNames":["LazyList"],"name":"LazyList.instTraversableLazyList","className":"Traversable"},{"typeNames":["LazyList","LazyList.instTraversableLazyList"],"name":"LazyList.instIsLawfulTraversableLazyListInstTraversableLazyList","className":"IsLawfulTraversable"},{"typeNames":["LazyList"],"name":"LazyList.instMonadLazyList","className":"Monad"},{"typeNames":["LazyList","LazyList.instMonadLazyList"],"name":"LazyList.instLawfulMonadLazyListInstMonadLazyList","className":"LawfulMonad"},{"typeNames":["LazyList"],"name":"LazyList.instMembershipLazyList","className":"Membership"},{"typeNames":["Membership.mem","LazyList","LazyList.instMembershipLazyList"],"name":"LazyList.Mem.decidable","className":"Decidable"},{"typeNames":["LazyList"],"name":"LazyList.instReprLazyList","className":"Repr"}],"imports":["Init","Mathlib.Control.Traversable.Equiv","Mathlib.Control.Traversable.Instances","Mathlib.Data.LazyList"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L286-L287","name":"LazyList.instReprLazyList","kind":"instance","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.instReprLazyList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L282-L283","name":"LazyList.attach","kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.attach","doc":"\"Attach\" the proof that the elements of `l` are in `l` to produce a new `LazyList`\nwith the same elements but in the type `{x // x ∈ l}`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L274-L277","name":"LazyList.pmap","kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.pmap","doc":"Partial map. If `f : ∀ a, p a → β` is a partial function defined on\n`a : α` satisfying `p`, then `pmap f l h` is essentially the same as `map f l`\nbut is defined only when all members of `l` satisfy `p`, using the proof\nto apply `f`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L261-L263","name":"LazyList.forall_mem_cons","kind":"theorem","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.forall_mem_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L256-L258","name":"LazyList.mem_cons","kind":"theorem","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.mem_cons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L251-L252","name":"LazyList.mem_nil","kind":"theorem","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.mem_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L235-L247","name":"LazyList.Mem.decidable","kind":"instance","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.Mem.decidable","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L232-L233","name":"LazyList.instMembershipLazyList","kind":"instance","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.instMembershipLazyList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L227-L229","name":"LazyList.Mem","kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.Mem","doc":"Membership in lazy lists "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L221-L223","name":"LazyList.mfirst","kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.mfirst","doc":"Try applying function `f` to every element of a `LazyList` and\nreturn the result of the first attempt that succeeds. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L193-L216","name":"LazyList.instLawfulMonadLazyListInstMonadLazyList","kind":"instance","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.instLawfulMonadLazyListInstMonadLazyList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L182-L190","name":"LazyList.append_bind","kind":"theorem","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.append_bind","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L173-L178","name":"LazyList.append_assoc","kind":"theorem","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.append_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L166-L170","name":"LazyList.append_nil","kind":"theorem","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.append_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L161-L163","name":"LazyList.instMonadLazyList","kind":"instance","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.instMonadLazyList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L157-L158","name":"LazyList.reverse","kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.reverse","doc":"Reverse the order of a `LazyList`.\nIt is done by converting to a `List` first because reversal involves evaluating all\nthe list and if the list is all evaluated, `List` is a better representation for\nit than a series of thunks. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L148-L150","name":"LazyList.bind","kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.bind","doc":"Monadic bind operation for `LazyList`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L142-L144","name":"LazyList.interleaveAll","kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.interleaveAll","doc":"`interleaveAll (xs::ys::zs::xss)` creates a list where elements of `xs`, `ys`\nand `zs` and the rest alternate. Every other element of the resulting list is taken from\n`xs`, every fourth is taken from `ys`, every eighth is taken from `zs` and so on. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L132-L136","name":"LazyList.interleave","kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.interleave","doc":"`interleave xs ys` creates a list where elements of `xs` and `ys` alternate. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L126-L128","name":"LazyList.find","kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.find","doc":"Return the first object contained in the list that satisfies\npredicate `p` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L115-L121","name":"LazyList.init","kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.init","doc":"`init xs`, if `xs` non-empty, drops the last element of the list.\nOtherwise, return the empty list. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L92-L111","name":"LazyList.instIsLawfulTraversableLazyListInstTraversableLazyList","kind":"instance","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.instIsLawfulTraversableLazyListInstTraversableLazyList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L88-L90","name":"LazyList.instTraversableLazyList","kind":"instance","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.instTraversableLazyList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L82-L85","name":"LazyList.traverse","kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.traverse","doc":"Traversal of lazy lists using an applicative effect. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L69-L79","name":"LazyList.decidableEq","kind":"instance","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.decidableEq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L52-L65","name":"LazyList.listEquivLazyList","kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.listEquivLazyList","doc":"Isomorphism between strict and lazy lists. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L39-L43","name":"Thunk.instDecidableEqThunk","kind":"instance","docLink":"./Mathlib/Data/LazyList/Basic.html#Thunk.instDecidableEqThunk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/LazyList/Basic.lean#L33-L37","name":"Thunk.ext","kind":"theorem","docLink":"./Mathlib/Data/LazyList/Basic.html#Thunk.ext","doc":""}]}