{"name":"Mathlib.Data.PNat.Defs","instances":[{"typeNames":["PNat"],"name":"instOnePNat","className":"One"},{"typeNames":["PNat","Nat"],"name":"coePNatNat","className":"Coe"},{"typeNames":["PNat"],"name":"instReprPNat","className":"Repr"},{"typeNames":["PNat","HAdd.hAdd","Nat","instHAdd","instAddNat","OfNat.ofNat","instOfNatNat"],"name":"instOfNatPNatHAddNatInstHAddInstAddNatOfNat","className":"OfNat"},{"typeNames":["Nat","Zero.ofOfNat0","Nat","instOfNatNat","PNat.val"],"name":"NeZero.pnat","className":"NeZero"},{"typeNames":["PNat"],"name":"PNat.instInhabitedPNat","className":"Inhabited"},{"typeNames":["PNat"],"name":"PNat.instWellFoundedRelationPNat","className":"WellFoundedRelation"},{"typeNames":["Nat","PNat","PNat.val","Nat","LT.lt","instLTNat","OfNat.ofNat","instOfNatNat"],"name":"Nat.canLiftPNat","className":"CanLift"},{"typeNames":["Int","PNat","PNat","Nat.cast","Int","instNatCastInt","PNat.val","Int","LT.lt","Int.instLTInt","OfNat.ofNat","instOfNatInt"],"name":"Int.canLiftPNat","className":"CanLift"}],"imports":["Init","Mathlib.Algebra.NeZero","Mathlib.Data.Nat.Cast.Defs","Mathlib.Order.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L290-L294","name":"Int.canLiftPNat","kind":"instance","docLink":"./Mathlib/Data/PNat/Defs.html#Int.canLiftPNat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L286-L287","name":"Nat.canLiftPNat","kind":"instance","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.canLiftPNat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L278-L279","name":"PNat.divExact","kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.divExact","doc":"If `h : k | m`, then `k * (div_exact m k) = m`. Note that this is not equal to `m / k`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L265-L274","name":"PNat.div_coe","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.div_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L253-L262","name":"PNat.mod_coe","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.mod_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L249-L250","name":"PNat.div","kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.div","doc":"We define `m / k` in the same way as for `ℕ` except that when `m = n * k` we take\n`m / k = n - 1`. This ensures that `m = (m % k) + k * (m / k)` in all cases. Later we\ndefine a function `div_exact` which gives the usual `m / k` in the case where `k` divides `m`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L241-L242","name":"PNat.mod","kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.mod","doc":"We define `m % k` in the same way as for `ℕ`\nexcept that when `m = n * k` we take `m % k = k` This ensures that `m % k` is always positive.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L234-L235","name":"PNat.modDiv","kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.modDiv","doc":"`mod_div m k = (m % k, m / k)`.\nWe define `m % k` and `m / k` in the same way as for `ℕ`\nexcept that when `m = n * k` we take `m % k = k` and\n`m / k = n - 1`.  This ensures that `m % k` is always positive\nand `m = (m % k) + k * (m / k)` in all cases.  Later we\ndefine a function `div_exact` which gives the usual `m / k`\nin the case where `k` divides `m`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L221-L223","name":"PNat.modDivAux","kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.modDivAux","doc":"We define `m % k` and `m / k` in the same way as for `ℕ`\nexcept that when `m = n * k` we take `m % k = k` and\n`m / k = n - 1`.  This ensures that `m % k` is always positive\nand `m = (m % k) + k * (m / k)` in all cases.  Later we\ndefine a function `div_exact` which gives the usual `m / k`\nin the case where `k` divides `m`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L209-L211","name":"PNat.strongInductionOn","kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.strongInductionOn","doc":"Strong induction on `ℕ+`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L205-L206","name":"PNat.instWellFoundedRelationPNat","kind":"instance","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.instWellFoundedRelationPNat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L201-L202","name":"PNat.coe_eq_one_iff","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.coe_eq_one_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L196-L197","name":"PNat.one_coe","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.one_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L191-L192","name":"PNat.mk_one","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.mk_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L186-L187","name":"PNat.instInhabitedPNat","kind":"instance","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.instInhabitedPNat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L182-L183","name":"PNat.not_lt_one","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.not_lt_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L177-L178","name":"PNat.one_le","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.one_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L172-L173","name":"PNat.coe_toPNat'","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.coe_toPNat'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L167-L168","name":"PNat.toPNat'_coe","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.toPNat'_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L163-L164","name":"NeZero.pnat","kind":"instance","docLink":"./Mathlib/Data/PNat/Defs.html#NeZero.pnat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L159-L160","name":"PNat.ne_zero","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.ne_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L154-L155","name":"PNat.coe_injective","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.coe_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L150-L151","name":"PNat.eq","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L146-L147","name":"PNat.pos","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.pos","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L141-L142","name":"PNat.coe_lt_coe","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.coe_lt_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L136-L137","name":"PNat.coe_le_coe","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.coe_le_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L131-L132","name":"PNat.mk_lt_mk","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.mk_lt_mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L126-L127","name":"PNat.mk_le_mk","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.mk_le_mk","doc":"We now define a long list of structures on ℕ+ induced by\nsimilar structures on ℕ. Most of these behave in a completely\nobvious way, but there are a few things to be said about\nsubtraction, division and powers.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L107-L111","name":"Nat.toPNat'_coe","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L102-L103","name":"Nat.toPNat'","kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'","doc":"Convert a natural number to a `PNat`. `n+1` is mapped to itself,\nand `0` becomes `1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L96-L97","name":"PNat.succPNat_natPred","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.succPNat_natPred","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L91-L92","name":"Nat.natPred_succPNat","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.natPred_succPNat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L86-L87","name":"Nat.succPNat_coe","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.succPNat_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L81-L82","name":"Nat.succPNat","kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.succPNat","doc":"Write a successor as an element of `ℕ+`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L76-L77","name":"Nat.toPNat","kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.toPNat","doc":"Convert a natural number to a positive natural number. The\npositivity assumption is inferred by `dec_trivial`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L66-L67","name":"PNat.natPred_eq_pred","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.natPred_eq_pred","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L61-L62","name":"PNat.natPred","kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.natPred","doc":"Predecessor of a `ℕ+`, as a `ℕ`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L56-L57","name":"PNat.mk_coe","kind":"theorem","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.mk_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L49-L50","name":"instOfNatPNatHAddNatInstHAddInstAddNatOfNat","kind":"instance","docLink":"./Mathlib/Data/PNat/Defs.html#instOfNatPNatHAddNatInstHAddInstAddNatOfNat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L45-L46","name":"instReprPNat","kind":"instance","docLink":"./Mathlib/Data/PNat/Defs.html#instReprPNat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L41-L42","name":"coePNatNat","kind":"instance","docLink":"./Mathlib/Data/PNat/Defs.html#coePNatNat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L39-L39","name":"PNat.val","kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.val","doc":"The underlying natural number "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L34-L35","name":"instOnePNat","kind":"instance","docLink":"./Mathlib/Data/PNat/Defs.html#instOnePNat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L31-L32","name":"«termℕ+»","kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#«termℕ+»","doc":"`ℕ+` is the type of positive natural numbers. It is defined as a subtype,\nand the VM representation of `ℕ+` is the same as `ℕ` because the proof\nis not stored. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/PNat/Defs.lean#L27-L28","name":"PNat","kind":"def","docLink":"./Mathlib/Data/PNat/Defs.html#PNat","doc":"`ℕ+` is the type of positive natural numbers. It is defined as a subtype,\nand the VM representation of `ℕ+` is the same as `ℕ` because the proof\nis not stored. "}]}