{"name":"Std.Tactic.OpenPrivate","instances":[{"typeNames":["Eq","Lean.ModuleIdx"],"name":"Lean.instDecidableEqModuleIdx","className":"Decidable"}],"imports":["Init","Lean.Elab.Command","Lean.Util.FoldConsts","Lean.Parser.Module"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/OpenPrivate.lean#L126-L143","name":"Lean.Elab.Command.elabExportPrivate","kind":"def","docLink":"./Std/Tactic/OpenPrivate.html#Lean.Elab.Command.elabExportPrivate","doc":"Elaborator for `export private`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/OpenPrivate.lean#L111-L123","name":"Lean.Elab.Command.exportPrivate","kind":"def","docLink":"./Std/Tactic/OpenPrivate.html#Lean.Elab.Command.exportPrivate","doc":"The command `export private a b c in foo bar` is similar to `open private`, but instead of opening\nthem in the current scope it will create public aliases to the private definition. The definition\nwill exist at exactly the original location and name, as if the `private` keyword was not used\noriginally.\n\nIt will also open the newly created alias definition under the provided short name, like\n`open private`.\nIt is also possible to specify the module instead with\n`export private a b c from Other.Module`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/OpenPrivate.lean#L106-L109","name":"Lean.Elab.Command.elabOpenPrivate","kind":"def","docLink":"./Std/Tactic/OpenPrivate.html#Lean.Elab.Command.elabOpenPrivate","doc":"Elaborator for `open private`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/OpenPrivate.lean#L91-L103","name":"Lean.Elab.Command.openPrivate","kind":"def","docLink":"./Std/Tactic/OpenPrivate.html#Lean.Elab.Command.openPrivate","doc":"The command `open private a b c in foo bar` will look for private definitions named `a`, `b`, `c`\nin declarations `foo` and `bar` and open them in the current scope. This does not make the\ndefinitions public, but rather makes them accessible in the current section by the short name `a`\ninstead of the (unnameable) internal name for the private declaration, something like\n`_private.Other.Module.0.Other.Namespace.foo.a`, which cannot be typed directly because of the `0`\nname component.\n\nIt is also possible to specify the module instead with\n`open private a b c from Other.Module`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/OpenPrivate.lean#L48-L89","name":"Lean.Elab.Command.elabOpenPrivateLike","kind":"def","docLink":"./Std/Tactic/OpenPrivate.html#Lean.Elab.Command.elabOpenPrivateLike","doc":"Core elaborator for `open private` and `export private`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/OpenPrivate.lean#L36-L43","name":"Lean.Elab.addModuleInfo","kind":"def","docLink":"./Std/Tactic/OpenPrivate.html#Lean.Elab.addModuleInfo","doc":"Add info to the info tree corresponding to a module name. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/OpenPrivate.lean#L32-L33","name":"Lean.Environment.declsInModuleIdx","kind":"def","docLink":"./Std/Tactic/OpenPrivate.html#Lean.Environment.declsInModuleIdx","doc":"Get the list of declarations in a module (referenced by index). "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/OpenPrivate.lean#L29-L29","name":"Lean.instDecidableEqModuleIdx","kind":"instance","docLink":"./Std/Tactic/OpenPrivate.html#Lean.instDecidableEqModuleIdx","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/OpenPrivate.lean#L26-L27","name":"Lean.Environment.moduleIdxForModule?","kind":"def","docLink":"./Std/Tactic/OpenPrivate.html#Lean.Environment.moduleIdxForModule?","doc":"Get the module index given a module name. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/OpenPrivate.lean#L15-L23","name":"Lean.Meta.collectPrivateIn","kind":"def","docLink":"./Std/Tactic/OpenPrivate.html#Lean.Meta.collectPrivateIn","doc":"Collects the names of private declarations referenced in definition `n`. "}]}