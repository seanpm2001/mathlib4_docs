{"name":"Mathlib.Tactic.SwapVar","instances":[],"imports":["Init","Mathlib.Util.Tactic"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SwapVar.lean#L22-L48","name":"Mathlib.Tactic.«tacticSwap_var__,,»","kind":"def","docLink":"./Mathlib/Tactic/SwapVar.html#Mathlib.Tactic.«tacticSwap_var__,,»","doc":"`swap_var swap_rule₁, swap_rule₂, ⋯` applies `swap_rule₁` then `swap_rule₂` then `⋯`.\n\nA *swap_rule* is of the form `x y` or `x ↔ y`, and \"applying it\" means swapping the variable name\n`x` by `y` and vice-versa on all hypotheses and the goal.\n\n```lean\nexample {P Q : Prop} (q : P) (p : Q) : P ∧ Q := by\n  swap_var p ↔ q\n  exact ⟨p, q⟩\n```\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SwapVar.lean#L19-L20","name":"Mathlib.Tactic.swapRule","kind":"def","docLink":"./Mathlib/Tactic/SwapVar.html#Mathlib.Tactic.swapRule","doc":"The parser for swap rules "}]}