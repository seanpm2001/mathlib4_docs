{"name":"Mathlib.Tactic.Inhabit","instances":[],"imports":["Init","Lean"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Inhabit.lean#L35-L50","name":"Lean.Elab.Tactic.evalInhabit","kind":"def","docLink":"./Mathlib/Tactic/Inhabit.html#Lean.Elab.Tactic.evalInhabit","doc":"`evalInhabit` takes in the MVarId of the main goal, runs the core portion of the inhabit tactic,\nand returns the resulting MVarId "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Inhabit.lean#L26-L31","name":"Lean.Elab.Tactic.inhabit","kind":"def","docLink":"./Mathlib/Tactic/Inhabit.html#Lean.Elab.Tactic.inhabit","doc":"`inhabit α` tries to derive a `Nonempty α` instance and\nthen uses it to make an `Inhabited α` instance.\nIf the target is a `Prop`, this is done constructively. Otherwise, it uses `Classical.choice`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Inhabit.lean#L23-L24","name":"Lean.Elab.Tactic.nonempty_prop_to_inhabited","kind":"def","docLink":"./Mathlib/Tactic/Inhabit.html#Lean.Elab.Tactic.nonempty_prop_to_inhabited","doc":"Derives `Inhabited α` from `Nonempty α` without `Classical.choice`\nassuming `α` is of type `Prop`"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Inhabit.lean#L18-L19","name":"Lean.Elab.Tactic.nonempty_to_inhabited","kind":"def","docLink":"./Mathlib/Tactic/Inhabit.html#Lean.Elab.Tactic.nonempty_to_inhabited","doc":"Derives `Inhabited α` from `Nonempty α` with `Classical.choice`"}]}