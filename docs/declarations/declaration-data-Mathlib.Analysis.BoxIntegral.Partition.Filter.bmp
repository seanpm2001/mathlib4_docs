{"name":"Mathlib.Analysis.BoxIntegral.Partition.Filter","instances":[{"typeNames":["BoxIntegral.IntegrationParams"],"name":"BoxIntegral.IntegrationParams.instPartialOrderIntegrationParams","className":"PartialOrder"},{"typeNames":["BoxIntegral.IntegrationParams","Preorder.toLE","BoxIntegral.IntegrationParams","PartialOrder.toPreorder","BoxIntegral.IntegrationParams.instPartialOrderIntegrationParams"],"name":"BoxIntegral.IntegrationParams.instBoundedOrderIntegrationParamsToLEToPreorderInstPartialOrderIntegrationParams","className":"BoundedOrder"},{"typeNames":["BoxIntegral.IntegrationParams"],"name":"BoxIntegral.IntegrationParams.instInhabitedIntegrationParams","className":"Inhabited"},{"typeNames":["BoxIntegral.IntegrationParams","LE.le","Preorder.toLE","PartialOrder.toPreorder","BoxIntegral.IntegrationParams.instPartialOrderIntegrationParams"],"name":"BoxIntegral.IntegrationParams.instDecidableRelIntegrationParamsLeToLEToPreorderInstPartialOrderIntegrationParams","className":"Decidable"},{"typeNames":["Eq","BoxIntegral.IntegrationParams"],"name":"BoxIntegral.IntegrationParams.instDecidableEqIntegrationParams","className":"Decidable"},{"typeNames":["BoxIntegral.TaggedPrepartition","BoxIntegral.IntegrationParams.toFilterDistortioniUnion","Max.max","NNReal","CanonicallyLinearOrderedSemifield.toMax","NNReal.instCanonicallyLinearOrderedSemifieldNNReal","BoxIntegral.Prepartition.distortion","BoxIntegral.Prepartition.compl","Finite.of_fintype"],"name":"BoxIntegral.IntegrationParams.toFilterDistortioniUnion_neBot'","className":"Filter.NeBot"},{"typeNames":["BoxIntegral.TaggedPrepartition","BoxIntegral.IntegrationParams.toFilterDistortion","BoxIntegral.Box.distortion"],"name":"BoxIntegral.IntegrationParams.toFilterDistortion_neBot","className":"Filter.NeBot"},{"typeNames":["BoxIntegral.TaggedPrepartition","BoxIntegral.IntegrationParams.toFilter"],"name":"BoxIntegral.IntegrationParams.toFilter_neBot","className":"Filter.NeBot"},{"typeNames":["BoxIntegral.TaggedPrepartition","BoxIntegral.IntegrationParams.toFilteriUnion"],"name":"BoxIntegral.IntegrationParams.toFilteriUnion_neBot","className":"Filter.NeBot"}],"imports":["Init","Mathlib.Analysis.BoxIntegral.Partition.SubboxInduction","Mathlib.Analysis.BoxIntegral.Partition.Split"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L565-L570","name":"BoxIntegral.IntegrationParams.eventually_isPartition","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.eventually_isPartition","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L559-L562","name":"BoxIntegral.IntegrationParams.toFilteriUnion_neBot","kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion_neBot","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L555-L556","name":"BoxIntegral.IntegrationParams.toFilter_neBot","kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter_neBot","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L550-L552","name":"BoxIntegral.IntegrationParams.toFilterDistortion_neBot","kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion_neBot","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L545-L547","name":"BoxIntegral.IntegrationParams.toFilterDistortioniUnion_neBot'","kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortioniUnion_neBot'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L538-L542","name":"BoxIntegral.IntegrationParams.toFilterDistortioniUnion_neBot","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortioniUnion_neBot","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L531-L535","name":"BoxIntegral.IntegrationParams.exists_memBaseSet_isPartition","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.exists_memBaseSet_isPartition","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L523-L528","name":"BoxIntegral.IntegrationParams.exists_memBaseSet_le_iUnion_eq","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.exists_memBaseSet_le_iUnion_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L506-L520","name":"BoxIntegral.IntegrationParams.tendsto_embedBox_toFilteriUnion_top","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.tendsto_embedBox_toFilteriUnion_top","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L500-L503","name":"BoxIntegral.IntegrationParams.hasBasis_toFilter","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilter","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L493-L497","name":"BoxIntegral.IntegrationParams.hasBasis_toFilteriUnion_top","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilteriUnion_top","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L486-L490","name":"BoxIntegral.IntegrationParams.hasBasis_toFilteriUnion","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilteriUnion","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L479-L483","name":"BoxIntegral.IntegrationParams.hasBasis_toFilterDistortioniUnion","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilterDistortioniUnion","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L470-L476","name":"BoxIntegral.IntegrationParams.hasBasis_toFilterDistortion","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilterDistortion","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L465-L467","name":"BoxIntegral.IntegrationParams.toFilteriUnion_congr","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion_congr","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L460-L462","name":"BoxIntegral.IntegrationParams.toFilteriUnion_mono","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion_mono","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L454-L456","name":"BoxIntegral.IntegrationParams.toFilter_mono","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter_mono","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L446-L450","name":"BoxIntegral.IntegrationParams.toFilterDistortion_mono","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion_mono","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L440-L442","name":"BoxIntegral.IntegrationParams.RCond.min","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond.min","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L435-L437","name":"BoxIntegral.IntegrationParams.RCond.mono","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond.mono","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L421-L431","name":"BoxIntegral.IntegrationParams.biUnionTagged_memBaseSet","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.biUnionTagged_memBaseSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L398-L418","name":"BoxIntegral.IntegrationParams.MemBaseSet.filter","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.filter","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L388-L395","name":"BoxIntegral.IntegrationParams.MemBaseSet.unionComplToSubordinate","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.unionComplToSubordinate","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L374-L385","name":"BoxIntegral.IntegrationParams.MemBaseSet.exists_common_compl","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.exists_common_compl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L369-L371","name":"BoxIntegral.IntegrationParams.MemBaseSet.mono","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.mono","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L360-L365","name":"BoxIntegral.IntegrationParams.MemBaseSet.mono'","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.mono'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L355-L357","name":"BoxIntegral.IntegrationParams.toFilter_inf_iUnion_eq","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter_inf_iUnion_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L349-L351","name":"BoxIntegral.IntegrationParams.rCond_of_bRiemann_eq_false","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.rCond_of_bRiemann_eq_false","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L345-L346","name":"BoxIntegral.IntegrationParams.toFilteriUnion","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion","doc":"A set `s : Set (TaggedPrepartition I)` belongs to `l.toFilteriUnion I π₀` if for any `c : ℝ≥0`\nthere exists a function `r : ℝⁿ → (0, ∞)` (or a constant `r` if `l.bRiemann = true`) such that `s`\ncontains each prepartition `π` such that `l.MemBaseSet I c r π` and `π.iUnion = π₀.iUnion`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L338-L339","name":"BoxIntegral.IntegrationParams.toFilterDistortioniUnion","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortioniUnion","doc":"A set `s : Set (TaggedPrepartition I)` belongs to `l.toFilterDistortioniUnion I c π₀` if\nthere exists a function `r : ℝⁿ → (0, ∞)` (or a constant `r` if `l.bRiemann = true`) such that `s`\ncontains each prepartition `π` such that `l.MemBaseSet I c r π` and `π.iUnion = π₀.iUnion`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L331-L332","name":"BoxIntegral.IntegrationParams.toFilter","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter","doc":"A set `s : Set (TaggedPrepartition I)` belongs to `l.toFilter I` if for any `c : ℝ≥0` there\nexists a function `r : ℝⁿ → (0, ∞)` (or a constant `r` if `l.bRiemann = true`) such that\n`s` contains each prepartition `π` such that `l.MemBaseSet I c r π`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L323-L325","name":"BoxIntegral.IntegrationParams.toFilterDistortion","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion","doc":"A set `s : Set (TaggedPrepartition I)` belongs to `l.toFilterDistortion I c` if there exists\na function `r : ℝⁿ → (0, ∞)` (or a constant `r` if `l.bRiemann = true`) such that `s` contains each\nprepartition `π` such that `l.MemBaseSet I c r π`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L316-L317","name":"BoxIntegral.IntegrationParams.RCond","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond","doc":"A predicate saying that in case `l.bRiemann = true`, the function `r` is a constant. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L311-L311","name":"BoxIntegral.IntegrationParams.MemBaseSet.exists_compl","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.exists_compl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L310-L310","name":"BoxIntegral.IntegrationParams.MemBaseSet.distortion_le","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.distortion_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L309-L309","name":"BoxIntegral.IntegrationParams.MemBaseSet.isHenstock","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.isHenstock","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L308-L308","name":"BoxIntegral.IntegrationParams.MemBaseSet.isSubordinate","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.isSubordinate","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L306-L307","name":"BoxIntegral.IntegrationParams.MemBaseSet.mk","kind":"ctor","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L306-L312","name":"BoxIntegral.IntegrationParams.MemBaseSet","kind":"structure","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet","doc":"The predicate corresponding to a base set of the filter defined by an\n`IntegrationParams`. It says that\n\n* if `l.bHenstock`, then `π` is a Henstock prepartition, i.e. each tag belongs to the corresponding\n  closed box;\n* `π` is subordinate to `r`;\n* if `l.bDistortion`, then the distortion of each box in `π` is less than or equal to `c`;\n* if `l.bDistortion`, then there exists a prepartition `π'` with distortion `≤ c` that covers\n  exactly `I \\ π.iUnion`.\n\nThe last condition is automatically verified for partitions, and is used in the proof of the\nSacks-Henstock inequality to compare two prepartitions covering the same part of the box.\n\nIt is also automatically satisfied for any `c > 1`, see TODO section of the module docstring for\ndetails. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L286-L287","name":"BoxIntegral.IntegrationParams.gp_le","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.gp_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L282-L282","name":"BoxIntegral.IntegrationParams.henstock_le_mcShane","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.henstock_le_mcShane","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L278-L278","name":"BoxIntegral.IntegrationParams.henstock_le_riemann","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.henstock_le_riemann","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L274-L274","name":"BoxIntegral.IntegrationParams.GP","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.GP","doc":"The `BoxIntegral.IntegrationParams` corresponding to the generalized Perron integral. In the\ncorresponding filter, we require that the tagged partition is subordinate to a (possibly,\ndiscontinuous) positive function `r` and each tag belongs to the corresponding closed box. We also\nrequire an upper estimate on the distortion of all boxes of the partition. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L265-L266","name":"BoxIntegral.IntegrationParams.McShane","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.McShane","doc":"The `BoxIntegral.IntegrationParams` corresponding to the McShane integral. In the\ncorresponding filter, we require that the tagged partition is subordinate to a (possibly,\ndiscontinuous) positive function `r`; the tags may be outside of the corresponding closed box\n(but still inside the ambient closed box `I.Icc`). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L256-L257","name":"BoxIntegral.IntegrationParams.Henstock","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.Henstock","doc":"The `BoxIntegral.IntegrationParams` corresponding to the Henstock-Kurzweil integral. In the\ncorresponding filter, we require that the tagged partition is subordinate to a (possibly,\ndiscontinuous) positive function `r` and each tag belongs to the corresponding closed box. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L246-L249","name":"BoxIntegral.IntegrationParams.Riemann","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.Riemann","doc":"The `BoxIntegral.IntegrationParams` corresponding to the Riemann integral. In the\ncorresponding filter, we require that the diameters of all boxes `J` of a tagged partition are\nbounded from above by a constant upper estimate that may not depend on the geometry of `J`, and each\ntag belongs to the corresponding closed box. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L239-L240","name":"BoxIntegral.IntegrationParams.instDecidableEqIntegrationParams","kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instDecidableEqIntegrationParams","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L236-L237","name":"BoxIntegral.IntegrationParams.instDecidableRelIntegrationParamsLeToLEToPreorderInstPartialOrderIntegrationParams","kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instDecidableRelIntegrationParamsLeToLEToPreorderInstPartialOrderIntegrationParams","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L233-L234","name":"BoxIntegral.IntegrationParams.instInhabitedIntegrationParams","kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instInhabitedIntegrationParams","doc":"The value `BoxIntegral.IntegrationParams.GP = ⊥`\n(`bRiemann = false`, `bHenstock = true`, `bDistortion = true`)\ncorresponds to a generalization of the Henstock integral such that the Divergence theorem holds true\nwithout additional integrability assumptions, see the module docstring for details. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L226-L227","name":"BoxIntegral.IntegrationParams.instBoundedOrderIntegrationParamsToLEToPreorderInstPartialOrderIntegrationParams","kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instBoundedOrderIntegrationParamsToLEToPreorderInstPartialOrderIntegrationParams","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L222-L223","name":"BoxIntegral.IntegrationParams.isoProd","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.isoProd","doc":"Auxiliary `OrderIso` with a product type used to lift a `BoundedOrder` structure. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L218-L219","name":"BoxIntegral.IntegrationParams.instPartialOrderIntegrationParams","kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instPartialOrderIntegrationParams","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L211-L215","name":"BoxIntegral.IntegrationParams.equivProd","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.equivProd","doc":"Auxiliary equivalence with a product type used to lift an order. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L203-L203","name":"BoxIntegral.IntegrationParams.bDistortion","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bDistortion","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L203-L203","name":"BoxIntegral.IntegrationParams.bHenstock","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bHenstock","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L203-L203","name":"BoxIntegral.IntegrationParams.bRiemann","kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bRiemann","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L202-L203","name":"BoxIntegral.IntegrationParams","kind":"structure","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams","doc":"An `IntegrationParams` is a structure holding 3 boolean values used to define a filter to be\nused in the definition of a box-integrable function.\n\n* `bRiemann`: the value `true` means that the filter corresponds to a Riemann-style integral, i.e.\n  in the definition of integrability we require a constant upper estimate `r` on the size of boxes\n  of a tagged partition; the value `false` means that the estimate may depend on the position of the\n  tag.\n\n* `bHenstock`: the value `true` means that we require that each tag belongs to its own closed box;\n  the value `false` means that we only require that tags belong to the ambient box.\n\n* `bDistortion`: the value `true` means that `r` can depend on the maximal ratio of sides of the\n  same box of a partition. Presence of this case makes quite a few proofs harder but we can prove\n  the divergence theorem only for the filter `BoxIntegral.IntegrationParams.GP = ⊥ =\n  {bRiemann := false, bHenstock := true, bDistortion := true}`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L201-L201","name":"BoxIntegral.IntegrationParams.ext_iff","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.ext_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L201-L201","name":"BoxIntegral.IntegrationParams.ext","kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.ext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L1-L1","name":"BoxIntegral.IntegrationParams.mk","kind":"ctor","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.mk","doc":""}]}