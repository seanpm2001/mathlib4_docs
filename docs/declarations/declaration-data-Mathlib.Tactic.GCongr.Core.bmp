{"name":"Mathlib.Tactic.GCongr.Core","instances":[{"typeNames":["Mathlib.Tactic.GCongr.GCongrLemma"],"name":"Mathlib.Tactic.GCongr.instInhabitedGCongrLemma","className":"Inhabited"},{"typeNames":["Mathlib.Tactic.GCongr.GCongrLemma"],"name":"Mathlib.Tactic.GCongr.instReprGCongrLemma","className":"Repr"}],"imports":["Init","Mathlib.Tactic.Backtracking","Mathlib.Tactic.GCongr.ForwardAttr"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/GCongr/Core.lean#L466-L488","name":"Mathlib.Tactic.GCongr.«tacticRel[_]»","kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.«tacticRel[_]»","doc":"The `rel` tactic applies \"generalized congruence\" rules to solve a relational goal by\n\"substitution\".  For example,\n```\nexample {a b x c d : ℝ} (h1 : a ≤ b) (h2 : c ≤ d) :\n    x ^ 2 * a + c ≤ x ^ 2 * b + d := by\n  rel [h1, h2]\n```\nIn this example we \"substitute\" the hypotheses `a ≤ b` and `c ≤ d` into the LHS `x ^ 2 * a + c` of\nthe goal and obtain the RHS `x ^ 2 * b + d`, thus proving the goal.\n\nThe \"generalized congruence\" rules used are the library lemmas which have been tagged with the\nattribute `@[gcongr]`.  For example, the first example constructs the proof term\n```\nadd_le_add (mul_le_mul_of_nonneg_left h1 (pow_bit0_nonneg x 1)) h2\n```\nusing the generalized congruence lemmas `add_le_add` and `mul_le_mul_of_nonneg_left`.  If there are\nno applicable generalized congruence lemmas, the tactic fails.\n\nThe tactic attempts to discharge side goals to these \"generalized congruence\" lemmas (such as the\nside goal `0 ≤ x ^ 2` in the above application of `mul_le_mul_of_nonneg_left`) using the tactic\n`gcongr_discharger`, which wraps `positivity` but can also be extended. If the side goals cannot\nbe discharged in this way, the tactic fails. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/GCongr/Core.lean#L396-L464","name":"Mathlib.Tactic.GCongr.tacticGcongr__With__","kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.tacticGcongr__With__","doc":"The `gcongr` tactic applies \"generalized congruence\" rules, reducing a relational goal\nbetween a LHS and RHS matching the same pattern to relational subgoals between the differing\ninputs to the pattern.  For example,\n```\nexample {a b x c d : ℝ} (h1 : a + 1 ≤ b + 1) (h2 : c + 2 ≤ d + 2) :\n    x ^ 2 * a + c ≤ x ^ 2 * b + d := by\n  gcongr\n  · linarith\n  · linarith\n```\nThis example has the goal of proving the relation `≤` between a LHS and RHS both of the pattern\n```\nx ^ 2 * ?_ + ?_\n```\n(with inputs `a`, `c` on the left and `b`, `d` on the right); after the use of\n`gcongr`, we have the simpler goals `a ≤ b` and `c ≤ d`.\n\nA pattern can be provided explicitly; this is useful if a non-maximal match is desired:\n```\nexample {a b c d x : ℝ} (h : a + c + 1 ≤ b + d + 1) :\n    x ^ 2 * (a + c) + 5 ≤ x ^ 2 * (b + d) + 5 := by\n  gcongr x ^ 2 * ?_ + 5\n  linarith\n```\n\nThe \"generalized congruence\" rules used are the library lemmas which have been tagged with the\nattribute `@[gcongr]`.  For example, the first example constructs the proof term\n```\nadd_le_add (mul_le_mul_of_nonneg_left _ (pow_bit0_nonneg x 1)) _\n```\nusing the generalized congruence lemmas `add_le_add` and `mul_le_mul_of_nonneg_left`.\n\nThe tactic attempts to discharge side goals to these \"generalized congruence\" lemmas (such as the\nside goal `0 ≤ x ^ 2` in the above application of `mul_le_mul_of_nonneg_left`) using the tactic\n`gcongr_discharger`, which wraps `positivity` but can also be extended. Side goals not discharged\nin this way are left for the user. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/GCongr/Core.lean#L394-L394","name":"Mathlib.Tactic.GCongr.tacticGcongr_discharger","kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.tacticGcongr_discharger","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/GCongr/Core.lean#L379-L392","name":"Lean.MVarId.gcongrForward","kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Lean.MVarId.gcongrForward","doc":"Attempt to resolve an (implicitly) relational goal by one of a provided list of hypotheses,\neither with such a hypothesis directly or by a limited palette of relational forward-reasoning from\nthese hypotheses. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/GCongr/Core.lean#L373-L374","name":"Mathlib.Tactic.GCongr.exact","kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.exact","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/GCongr/Core.lean#L370-L371","name":"Mathlib.Tactic.GCongr.symmExact","kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.symmExact","doc":"See if the term is `a ∼ b` with `∼` symmetric and the goal is `b ∼ a`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/GCongr/Core.lean#L366-L367","name":"Mathlib.Tactic.GCongr.exactLeOfLt","kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.exactLeOfLt","doc":"See if the term is `a < b` and the goal is `a ≤ b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/GCongr/Core.lean#L359-L363","name":"Mathlib.Tactic.GCongr.exactRefl","kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.exactRefl","doc":"See if the term is `a = b` and the goal is `a ∼ b` or `b ∼ a`, with `∼` reflexive. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/GCongr/Core.lean#L353-L356","name":"Lean.MVarId.exact","kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Lean.MVarId.exact","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/GCongr/Core.lean#L214-L348","name":"Lean.MVarId.gcongr","kind":"opaque","docLink":"./Mathlib/Tactic/GCongr/Core.html#Lean.MVarId.gcongr","doc":"The core of the `gcongr` tactic.  Parse a goal into the form `(f _ ... _) ∼ (f _ ... _)`,\nlook up any relevant @[gcongr] lemmas, try to apply them, recursively run the tactic itself on\n\"main\" goals which are generated, and run the discharger on side goals which are generated. If there\nis a user-provided template, first check that the template asks us to descend this far into the\nmatch. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/GCongr/Core.lean#L132-L138","name":"Mathlib.Tactic.GCongr.gcongrExt","kind":"opaque","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrExt","doc":"Environment extension for \"generalized congruence\" (`gcongr`) lemmas. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/GCongr/Core.lean#L130-L130","name":"Mathlib.Tactic.GCongr.instReprGCongrLemma","kind":"instance","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instReprGCongrLemma","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/GCongr/Core.lean#L130-L130","name":"Mathlib.Tactic.GCongr.instInhabitedGCongrLemma","kind":"instance","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instInhabitedGCongrLemma","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/GCongr/Core.lean#L129-L129","name":"Mathlib.Tactic.GCongr.GCongrLemma.varyingArgs","kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.varyingArgs","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/GCongr/Core.lean#L128-L128","name":"Mathlib.Tactic.GCongr.GCongrLemma.mainSubgoals","kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.mainSubgoals","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/GCongr/Core.lean#L127-L127","name":"Mathlib.Tactic.GCongr.GCongrLemma.declName","kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.declName","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/GCongr/Core.lean#L126-L130","name":"Mathlib.Tactic.GCongr.GCongrLemma","kind":"structure","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma","doc":"Structure recording the data for a \"generalized congruence\" (`gcongr`) lemma. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/GCongr/Core.lean#L1-L1","name":"Mathlib.Tactic.GCongr.GCongrLemma.mk","kind":"ctor","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.mk","doc":""}]}