{"name":"Mathlib.Tactic.Positivity.Basic","instances":[],"imports":["Init","Std.Lean.Parser","Mathlib.Data.Int.Order.Basic","Mathlib.Data.Nat.Factorial.Basic","Mathlib.Tactic.Positivity.Core","Mathlib.Algebra.GroupPower.Order","Mathlib.Algebra.Order.Field.Basic","Qq"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Basic.lean#L463-L465","name":"Mathlib.Meta.Positivity.evalFactorial","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalFactorial","doc":"Extension for Nat.factorial. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Basic.lean#L457-L459","name":"Mathlib.Meta.Positivity.evalNatSucc","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatSucc","doc":"Extension for Nat.succ. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Basic.lean#L431-L453","name":"Mathlib.Meta.Positivity.evalIntCast","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIntCast","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Basic.lean#L415-L428","name":"Mathlib.Meta.Positivity.evalNatCast","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatCast","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Basic.lean#L397-L412","name":"Mathlib.Meta.Positivity.evalNatAbs","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatAbs","doc":"Extension for the `positivity` tactic: `Int.natAbs` is positive when its input is.\nSince the output type of `Int.natAbs` is `ℕ`, the nonnegative case is handled by the default\n`positivity` tactic.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Basic.lean#L374-L387","name":"Mathlib.Meta.Positivity.evalAbs","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalAbs","doc":"The `positivity` extension which identifies expressions of the form `|a|`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Basic.lean#L337-L367","name":"Mathlib.Meta.Positivity.evalPow","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPow","doc":"The `positivity` extension which identifies expressions of the form `a ^ (b : ℕ)`,\nsuch that `positivity` successfully recognises both `a` and `b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Basic.lean#L329-L332","name":"Mathlib.Meta.Positivity.evalPowZeroInt","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPowZeroInt","doc":"The `positivity` extension which identifies expressions of the form `a ^ (0:ℤ)`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Basic.lean#L321-L325","name":"Mathlib.Meta.Positivity.evalPowZeroNat","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPowZeroNat","doc":"The `positivity` extension which identifies expressions of the form `a ^ (0:ℕ)`.\nThis extension is run in addition to the general `a ^ b` extension (they are overlapping). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Basic.lean#L299-L310","name":"Mathlib.Meta.Positivity.evalInv","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalInv","doc":"The `positivity` extension which identifies expressions of the form `a⁻¹`,\nsuch that `positivity` successfully recognises `a`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Basic.lean#L278-L294","name":"Mathlib.Meta.Positivity.evalDiv","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalDiv","doc":"The `positivity` extension which identifies expressions of the form `a / b`,\nsuch that `positivity` successfully recognises both `a` and `b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Basic.lean#L233-L257","name":"Mathlib.Meta.Positivity.evalIntDiv","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIntDiv","doc":"The `positivity` extension which identifies expressions of the form `a / b`,\nwhere `a` and `b` are integers. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Basic.lean#L194-L216","name":"Mathlib.Meta.Positivity.evalMul","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMul","doc":"The `positivity` extension which identifies expressions of the form `a * b`,\nsuch that `positivity` successfully recognises both `a` and `b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Basic.lean#L153-L174","name":"Mathlib.Meta.Positivity.evalAdd","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalAdd","doc":"The `positivity` extension which identifies expressions of the form `a + b`,\nsuch that `positivity` successfully recognises both `a` and `b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Basic.lean#L124-L149","name":"Mathlib.Meta.Positivity.evalMax","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMax","doc":"Extension for the `max` operator. The `max` of two numbers is nonnegative if at least one\nis nonnegative, strictly positive if at least one is positive, and nonzero if both are nonzero. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Basic.lean#L105-L120","name":"Mathlib.Meta.Positivity.evalMin","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMin","doc":"The `positivity` extension which identifies expressions of the form `min a b`,\nsuch that `positivity` successfully recognises both `a` and `b`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Positivity/Basic.lean#L52-L85","name":"Mathlib.Meta.Positivity.evalIte","kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIte","doc":"The `positivity` extension which identifies expressions of the form `ite p a b`,\nsuch that `positivity` successfully recognises both `a` and `b`. "}]}