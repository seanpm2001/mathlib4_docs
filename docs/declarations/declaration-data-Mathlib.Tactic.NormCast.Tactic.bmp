{"name":"Mathlib.Tactic.NormCast.Tactic","instances":[],"imports":["Init","Std.Tactic.NormCast.Ext","Std.Tactic.CoeExt","Mathlib.Tactic.SudoSetOption","Mathlib.Lean.Meta.Simp","Mathlib.Algebra.Group.Defs","Mathlib.Data.Nat.Cast.Defs"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L260-L264","name":"Tactic.NormCast.evalPushCast","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.evalPushCast","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L258-L259","name":"Tactic.NormCast.pushCast","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.pushCast","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L254-L256","name":"Tactic.NormCast.evalConvNormCast","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.evalConvNormCast","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L253-L253","name":"Tactic.NormCast.convNormCast","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.convNormCast","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L251-L251","name":"Tactic.NormCast.tacticApply_mod_cast_","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.tacticApply_mod_cast_","doc":"Normalize the goal and the given expression, then apply the expression to the goal.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L246-L246","name":"Tactic.NormCast.tacticExact_mod_cast_","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.tacticExact_mod_cast_","doc":"Normalize the goal and the given expression, then close the goal with exact.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L233-L236","name":"Tactic.NormCast.tacticRw_mod_cast___","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.tacticRw_mod_cast___","doc":"Rewrite with the given rules and normalize casts between steps.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L230-L231","name":"Tactic.NormCast.tacticNorm_cast_","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.tacticNorm_cast_","doc":"Normalize casts at the given locations by moving them \"upwards\".\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L225-L225","name":"Tactic.NormCast.tacticAssumption_mod_cast","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.tacticAssumption_mod_cast","doc":"`assumption_mod_cast` runs `norm_cast` on the goal. For each local hypothesis `h`, it also\nnormalizes `h` and tries to use that to close the goal. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L213-L221","name":"Tactic.NormCast.tacticNorm_cast0_","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.tacticNorm_cast0_","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L207-L211","name":"Tactic.NormCast.normCastHyp","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.normCastHyp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L201-L205","name":"Tactic.NormCast.normCastTarget","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.normCastTarget","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L186-L197","name":"Tactic.NormCast.termMod_cast_","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.termMod_cast_","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L149-L183","name":"Tactic.NormCast.derive","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.derive","doc":"The core simplification routine of `normCast`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L139-L144","name":"Tactic.NormCast.numeralToCoe","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.numeralToCoe","doc":"If possible, rewrite `(n : α)` to `(Nat.cast n : α)` where `n` is a numeral and `α ≠ ℕ`.\nReturns a pair of the new expression and proof that they are equal.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L128-L133","name":"Tactic.NormCast.upwardAndElim","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.upwardAndElim","doc":"Core rewriting function used in the \"squash\" step, which moves casts upwards\nand eliminates them.\n\nIt tries to rewrite an expression using the elim and move lemmas.\nOn failure, it calls the splitting procedure heuristic.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L117-L119","name":"Tactic.NormCast.prove","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.prove","doc":"Discharging function used during simplification in the \"squash\" step.\n\nTODO: normCast takes a list of expressions to use as lemmas for the discharger\nTODO: a tactic to print the results the discharger fails to prove\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L65-L109","name":"Tactic.NormCast.splittingProcedure","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.splittingProcedure","doc":"This is the main heuristic used alongside the elim and move lemmas.\nThe goal is to help casts move past operators by adding intermediate casts.\nAn expression of the shape: op (↑(x : α) : γ) (↑(y : β) : γ)\nis rewritten to:            op (↑(↑(x : α) : β) : γ) (↑(y : β) : γ)\nwhen (↑(↑(x : α) : β) : γ) = (↑(x : α) : γ) can be proven with a squash lemma\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L49-L56","name":"Tactic.NormCast.isNumeral?","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.isNumeral?","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L42-L47","name":"Tactic.NormCast.isCoeOf?","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.isCoeOf?","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L38-L40","name":"Tactic.NormCast.mkCoe","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.mkCoe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L34-L36","name":"Tactic.NormCast.proveEqUsingDown","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.proveEqUsingDown","doc":"Prove `a = b` by simplifying using move and squash lemmas. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/NormCast/Tactic.lean#L23-L31","name":"Tactic.NormCast.proveEqUsing","kind":"def","docLink":"./Mathlib/Tactic/NormCast/Tactic.html#Tactic.NormCast.proveEqUsing","doc":"Prove `a = b` using the given simp set. "}]}