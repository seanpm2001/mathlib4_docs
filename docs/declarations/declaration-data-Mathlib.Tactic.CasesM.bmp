{"name":"Mathlib.Tactic.CasesM","instances":[],"imports":["Init","Lean"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CasesM.lean#L151-L165","name":"Mathlib.Tactic.constructorM","kind":"def","docLink":"./Mathlib/Tactic/CasesM.html#Mathlib.Tactic.constructorM","doc":"* `constructorm p_1, ..., p_n` applies the `constructor` tactic to the main goal\n  if `type` matches one of the given patterns.\n* `constructorm* p` is a more efficient and compact version of `· repeat constructorm p`.\n  It is more efficient because the pattern is compiled once.\n\nExample: The following tactic proves any theorem like `True ∧ (True ∨ True)` consisting of\nand/or/true:\n```\nconstructorm* _ ∨ _, _ ∧ _, True\n```\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CasesM.lean#L142-L149","name":"Mathlib.Tactic.constructorMatching.go","kind":"opaque","docLink":"./Mathlib/Tactic/CasesM.html#Mathlib.Tactic.constructorMatching.go","doc":"Auxiliary for `constructorMatching`. Accumulates generated subgoals in `acc`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CasesM.lean#L127-L149","name":"Mathlib.Tactic.constructorMatching","kind":"def","docLink":"./Mathlib/Tactic/CasesM.html#Mathlib.Tactic.constructorMatching","doc":"Core tactic for `constructorm`. Calls `constructor` on all subgoals for which\n`matcher ldecl.type` returns true.\n* `recursive`: if true, it calls itself repeatedly on the resulting subgoals\n* `throwOnNoMatch`: if true, throws an error if no match is found\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CasesM.lean#L117-L119","name":"Mathlib.Tactic.casesType!","kind":"def","docLink":"./Mathlib/Tactic/CasesM.html#Mathlib.Tactic.casesType!","doc":"* `cases_type I` applies the `cases` tactic to a hypothesis `h : (I ...)`\n* `cases_type I_1 ... I_n` applies the `cases` tactic to a hypothesis\n  `h : (I_1 ...)` or ... or `h : (I_n ...)`\n* `cases_type* I` is shorthand for `· repeat cases_type I`\n* `cases_type! I` only applies `cases` if the number of resulting subgoals is <= 1.\n\nExample: The following tactic destructs all conjunctions and disjunctions in the current goal.\n```\ncases_type* Or And\n```\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CasesM.lean#L102-L115","name":"Mathlib.Tactic.casesType","kind":"def","docLink":"./Mathlib/Tactic/CasesM.html#Mathlib.Tactic.casesType","doc":"* `cases_type I` applies the `cases` tactic to a hypothesis `h : (I ...)`\n* `cases_type I_1 ... I_n` applies the `cases` tactic to a hypothesis\n  `h : (I_1 ...)` or ... or `h : (I_n ...)`\n* `cases_type* I` is shorthand for `· repeat cases_type I`\n* `cases_type! I` only applies `cases` if the number of resulting subgoals is <= 1.\n\nExample: The following tactic destructs all conjunctions and disjunctions in the current goal.\n```\ncases_type* Or And\n```\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CasesM.lean#L97-L100","name":"Mathlib.Tactic.elabCasesType","kind":"def","docLink":"./Mathlib/Tactic/CasesM.html#Mathlib.Tactic.elabCasesType","doc":"Common implementation of `cases_type` and `cases_type!`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CasesM.lean#L79-L94","name":"Mathlib.Tactic.casesM","kind":"def","docLink":"./Mathlib/Tactic/CasesM.html#Mathlib.Tactic.casesM","doc":"* `casesm p` applies the `cases` tactic to a hypothesis `h : type`\n  if `type` matches the pattern `p`.\n* `casesm p_1, ..., p_n` applies the `cases` tactic to a hypothesis `h : type`\n  if `type` matches one of the given patterns.\n* `casesm* p` is a more efficient and compact version of `· repeat casesm p`.\n  It is more efficient because the pattern is compiled once.\n\nExample: The following tactic destructs all conjunctions and disjunctions in the current context.\n```\ncasesm* _ ∨ _, _ ∧ _\n```\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CasesM.lean#L75-L77","name":"Mathlib.Tactic.matchPatterns","kind":"def","docLink":"./Mathlib/Tactic/CasesM.html#Mathlib.Tactic.matchPatterns","doc":"Returns true if any of the patterns match the expression. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CasesM.lean#L68-L72","name":"Mathlib.Tactic.elabPatterns","kind":"def","docLink":"./Mathlib/Tactic/CasesM.html#Mathlib.Tactic.elabPatterns","doc":"Elaborate a list of terms with holes into a list of patterns. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CasesM.lean#L56-L60","name":"Lean.MVarId.casesType","kind":"def","docLink":"./Mathlib/Tactic/CasesM.html#Lean.MVarId.casesType","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CasesM.lean#L32-L54","name":"Lean.MVarId.casesMatching.go","kind":"opaque","docLink":"./Mathlib/Tactic/CasesM.html#Lean.MVarId.casesMatching.go","doc":"Auxiliary for `casesMatching`. Accumulates generated subgoals in `acc`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/CasesM.lean#L23-L54","name":"Lean.MVarId.casesMatching","kind":"def","docLink":"./Mathlib/Tactic/CasesM.html#Lean.MVarId.casesMatching","doc":"Core tactic for `casesm` and `cases_type`. Calls `cases` on all fvars in `g` for which\n`matcher ldecl.type` returns true.\n* `recursive`: if true, it calls itself repeatedly on the resulting subgoals\n* `allowSplit`: if false, it will skip any hypotheses where `cases` returns more than one subgoal.\n* `throwOnNoMatch`: if true, then throws an error if no match is found\n"}]}