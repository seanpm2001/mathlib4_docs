{"name":"Mathlib.Lean.Expr.Basic","instances":[{"typeNames":["Lean.NameSet"],"name":"Lean.NameSet.instAppendNameSet","className":"Append"}],"imports":["Init","Lean","Std.Lean.Expr","Std.Data.List.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L413-L423","name":"Lean.Environment.requiredModules","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Environment.requiredModules","doc":"Return the names of the modules in which constants used in the current file were defined.\n\nNote that this will *not* account for tactics and syntax used in the file,\nso the results may not suffice as imports.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L402-L405","name":"Lean.Environment.getModuleFor?","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Environment.getModuleFor?","doc":"Return the name of the module in which a declaration was defined. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L397-L399","name":"Lean.getFieldsToParents","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.getFieldsToParents","doc":"Get the projections that are projections to parent structures. Similar to `getParentStructures`,\nexcept that this returns the (last component of the) projection names instead of the parent names.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L388-L392","name":"Lean.ConstantInfo.getUsedConstants","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.getUsedConstants","doc":"Return all names appearing in the type or value of a `ConstantInfo`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L382-L383","name":"Lean.Expr.rewriteType","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.rewriteType","doc":"Rewrites the type of `e` via some `eq`, then moves `e` into the new type via `Eq.mp`.\n\nRewrites with a fresh metavariable as the ambient goal.\nFails if the rewrite produces any subgoals.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L371-L374","name":"Lean.Expr.rewrite","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.rewrite","doc":"Rewrites `e` via some `eq`, producing a proof `e = e'` for some `e'`.\n\nRewrites with a fresh metavariable as the ambient goal.\nFails if the rewrite produces any subgoals.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L362-L363","name":"Lean.Expr.containsConst","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.containsConst","doc":"Returns true if `e` contains a name `n` where `p n` is true. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L349-L359","name":"Lean.Expr.mkProjection","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.mkProjection","doc":"If `e` has a structure as type with field `fieldName` (either directly or in a parent\nstructure), `mkProjection e fieldName` creates the projection expression `e.fieldName` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L340-L345","name":"Lean.Expr.mkDirectProjection","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.mkDirectProjection","doc":"If `e` has a structure as type with field `fieldName`, `mkDirectProjection e fieldName` creates\nthe projection expression `e.fieldName` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L330-L336","name":"Lean.Expr.addLocalVarInfoForBinderIdent","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.addLocalVarInfoForBinderIdent","doc":"Annotates a `binderIdent` with the binder information from an `fvar`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L323-L326","name":"Lean.Expr.getBinderName","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.getBinderName","doc":"`getBinderName e` returns `some n` if `e` is an expression of the form `∀ n, ...`\nand `none` otherwise. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L311-L318","name":"Lean.Expr.renameBVar","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.renameBVar","doc":"Traverses an expression `e` and renames bound variables named `old` to `new`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L304-L308","name":"Lean.Expr.modifyArgM","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyArgM","doc":"Given `f a₀ a₁ ... aₙ₋₁`, runs `modifier` on the `i`th argument.\nAn argument `n` may be provided which says how many arguments we are expecting `e` to have. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L299-L300","name":"Lean.Expr.getArg?","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.getArg?","doc":"Given `f a₀ a₁ ... aₙ₋₁`, returns the `i`th argument or none if out of bounds. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L293-L296","name":"Lean.Expr.getRevArg?","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.getRevArg?","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L290-L291","name":"Lean.Expr.modifyArg","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyArg","doc":"Given `f a₀ a₁ ... aₙ₋₁`, runs `modifier` on the `i`th argument or\nreturns the original expression if out of bounds. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L284-L286","name":"Lean.Expr.modifyRevArg","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyRevArg","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L281-L282","name":"Lean.Expr.modifyAppArg","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyAppArg","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L277-L279","name":"Lean.Expr.modifyAppArgM","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyAppArgM","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L272-L275","name":"Lean.Expr.zero?","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.zero?","doc":"Test if an expression is either `Nat.zero`, or `OfNat.ofNat 0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L259-L269","name":"Lean.Expr.numeral?","kind":"opaque","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.numeral?","doc":"Return `some n` if `e` is one of the following\n- A nat literal (numeral)\n- `Nat.zero`\n- `Nat.succ x` where `isNumeral x`\n- `OfNat.ofNat _ x _` where `isNumeral x` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L249-L251","name":"Lean.Expr.ofInt","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.ofInt","doc":"Construct the term of type `α` for a given integer\n(doing typeclass search for the `OfNat` and `Neg` instances required). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L244-L245","name":"Lean.Expr.ofNat","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.ofNat","doc":"Construct the term of type `α` for a given natural number\n(doing typeclass search for the `OfNat` instance required). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L237-L240","name":"Lean.Expr.ensureHasNoMVars","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.ensureHasNoMVars","doc":"Check that an expression contains no metavariables (after instantiation). "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L228-L231","name":"Lean.Expr.isConstantApplication.aux","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.isConstantApplication.aux","doc":"`aux depth e n` checks whether the body of the `n`-th lambda of `e` has loose bvar\n`depth - 1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L223-L231","name":"Lean.Expr.isConstantApplication","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.isConstantApplication","doc":"`isConstantApplication e` checks whether `e` is syntactically an application of the form\n`(fun x₁ ⋯ xₙ => H) y₁ ⋯ yₙ` where `H` does not contain the variable `xₙ`. In other words,\nit does a syntactic check that the expression does not depend on `yₙ`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L216-L218","name":"Lean.Expr.fvarId?","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.fvarId?","doc":"If an `Expr` has form `.fvar n`, then returns `some n`, otherwise `none`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L211-L213","name":"Lean.Expr.natLit!","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.natLit!","doc":"Turn an expression that is a natural number literal into a natural number. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L207-L208","name":"Lean.Expr.getUsedConstants'","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.getUsedConstants'","doc":"Like `Expr.getUsedConstants`, but produce a `NameSet`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L203-L204","name":"Lean.Expr.getAppFnArgs","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.getAppFnArgs","doc":"Return the function (name) and arguments of an application. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L198-L200","name":"Lean.Expr.bvarIdx?","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.bvarIdx?","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L195-L196","name":"Lean.Expr.constName","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.constName","doc":"If the expression is a constant, return that name. Otherwise return `Name.anonymous`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L187-L188","name":"Lean.mkConst'","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.mkConst'","doc":"Same as `mkConst`, but with fresh level metavariables. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L172-L180","name":"Lean.ConstantInfo.toDeclaration!","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.toDeclaration!","doc":"Turn a `ConstantInfo` into a declaration. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L165-L169","name":"Lean.ConstantInfo.updateValue","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateValue","doc":"Update the value of a `ConstantInfo`, if it has one. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L160-L162","name":"Lean.ConstantInfo.updateLevelParams","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateLevelParams","doc":"Update the level parameters of a `ConstantInfo`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L156-L157","name":"Lean.ConstantInfo.updateType","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateType","doc":"Update the type of a `ConstantInfo`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L152-L153","name":"Lean.ConstantInfo.updateName","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateName","doc":"Update the name of a `ConstantInfo`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L141-L149","name":"Lean.ConstantInfo.updateConstantVal","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateConstantVal","doc":"Update `ConstantVal` (the data common to all constructors of `ConstantInfo`)\nin a `ConstantInfo`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L135-L137","name":"Lean.ConstantInfo.isThm","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.isThm","doc":"Checks whether this `ConstantInfo` is a theorem, "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L130-L132","name":"Lean.ConstantInfo.isDef","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.isDef","doc":"Checks whether this `ConstantInfo` is a definition, "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L122-L123","name":"Lean.NameSet.instAppendNameSet","kind":"instance","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.NameSet.instAppendNameSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L119-L120","name":"Lean.NameSet.append","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.NameSet.append","doc":"The union of two `NameSet`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L104-L112","name":"Lean.Name.isBlackListed","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.isBlackListed","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L94-L98","name":"Lean.Name.isInternal'","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.isInternal'","doc":"Lean 4 makes declarations which are technically not internal\n(that is, head string does not start with `_`) but which sometimes should\nbe treated as such. For example, the `to_additive` attribute needs to\ntransform `proof_1` constants generated by `Lean.Meta.mkAuxDefinitionFor`.\nThis might be better fixed in core, but until then, this method can act\nas a polyfill. This method only looks at the name to decide whether it is probably internal.\nNote: this declaration also occurs as `shouldIgnore` in the Lean 4 file `test/lean/run/printDecls`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L78-L84","name":"Lean.Name.isPrefixOf?","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.isPrefixOf?","doc":"`isPrefixOf? pre nm` returns `some post` if `nm = pre ++ post`.\nNote that this includes the case where `nm` has multiple more namespaces.\nIf `pre` is not a prefix of `nm`, it returns `none`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L71-L73","name":"Lean.Name.splitAt","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.splitAt","doc":"`nm.splitAt n` splits a name `nm` in two parts, such that the *second* part has depth `n`, i.e.\n`(nm.splitAt n).2.getNumParts = n` (assuming `nm.getNumParts ≥ n`).\nExample: ``splitAt `foo.bar.baz.back.bat 1 = (`foo.bar.baz.back, `bat)``. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L63-L66","name":"Lean.Name.getString","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.getString","doc":"Get the last field of a name as a string.\nDoesn't raise an error when the last component is a numeric field. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L57-L59","name":"Lean.Name.updateLast","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.updateLast","doc":"Update the last component of a name. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L52-L54","name":"Lean.Name.fromComponents.go","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.fromComponents.go","doc":"Auxiliary for `Name.fromComponents` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L50-L54","name":"Lean.Name.fromComponents","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.fromComponents","doc":"Build a name from components. For example ``from_components [`foo, `bar]`` becomes\n``` `foo.bar```.\nIt is the inverse of `Name.components` on list of names that have single components. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L40-L45","name":"Lean.Name.mapPrefix","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.mapPrefix","doc":"Find the largest prefix `n` of a `Name` such that `f n != none`, then replace this prefix\nwith the value of `f n`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Lean/Expr/Basic.lean#L26-L30","name":"Lean.BinderInfo.brackets","kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.BinderInfo.brackets","doc":"The brackets corresponding to a given `BinderInfo`. "}]}