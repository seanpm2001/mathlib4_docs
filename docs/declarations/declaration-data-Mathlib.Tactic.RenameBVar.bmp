{"name":"Mathlib.Tactic.RenameBVar","instances":[],"imports":["Init","Lean","Mathlib.Util.Tactic"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/RenameBVar.lean#L24-L46","name":"Mathlib.Tactic.«tacticRename_bvar_→__»","kind":"def","docLink":"./Mathlib/Tactic/RenameBVar.html#Mathlib.Tactic.«tacticRename_bvar_→__»","doc":"* `rename_bvar old new` renames all bound variables named `old` to `new` in the target.\n* `rename_bvar old new at h` does the same in hypothesis `h`.\n\n```lean\nexample (P : ℕ →  ℕ → Prop) (h : ∀ n, ∃ m, P n m) : ∀ l, ∃ m, P l m :=\nbegin\n  rename_bvar n q at h, -- h is now ∀ (q : ℕ), ∃ (m : ℕ), P q m,\n  rename_bvar m n, -- target is now ∀ (l : ℕ), ∃ (n : ℕ), P k n,\n  exact h -- Lean does not care about those bound variable names\nend\n```\nNote: name clashes are resolved automatically.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/RenameBVar.lean#L21-L22","name":"Mathlib.Tactic.renameBVarTarget","kind":"def","docLink":"./Mathlib/Tactic/RenameBVar.html#Mathlib.Tactic.renameBVarTarget","doc":"Renames a bound variable in the target. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/RenameBVar.lean#L15-L18","name":"Mathlib.Tactic.renameBVarHyp","kind":"def","docLink":"./Mathlib/Tactic/RenameBVar.html#Mathlib.Tactic.renameBVarHyp","doc":"Renames a bound variable in a hypothesis. "}]}