{"name":"Mathlib.Data.SetLike.Basic","instances":[{"typeNames":["Set"],"name":"SetLike.instCoeTCSet","className":"CoeTC"},{"typeNames":[],"name":"SetLike.instMembership","className":"Membership"},{"typeNames":["_builtin_typeu"],"name":"SetLike.instCoeSortType","className":"CoeSort"},{"typeNames":[],"name":"SetLike.instPartialOrder","className":"PartialOrder"}],"imports":["Init","Mathlib.Data.Set.Basic","Mathlib.Tactic.Monotonicity.Attr"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L218-L219","name":"SetLike.lt_iff_le_and_exists","kind":"theorem","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.lt_iff_le_and_exists","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L214-L215","name":"SetLike.exists_of_lt","kind":"theorem","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.exists_of_lt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L210-L211","name":"SetLike.not_le_iff_exists","kind":"theorem","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.not_le_iff_exists","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L207-L207","name":"SetLike.coe_strictMono","kind":"theorem","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.coe_strictMono","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L202-L203","name":"SetLike.coe_ssubset_coe","kind":"theorem","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.coe_ssubset_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L198-L198","name":"SetLike.coe_mono","kind":"theorem","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.coe_mono","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L193-L194","name":"SetLike.coe_subset_coe","kind":"theorem","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.coe_subset_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L188-L189","name":"SetLike.le_def","kind":"theorem","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.le_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L184-L186","name":"SetLike.instPartialOrder","kind":"instance","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.instPartialOrder","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L181-L181","name":"SetLike.eta","kind":"theorem","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.eta","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L176-L177","name":"SetLike.coe_mem","kind":"theorem","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.coe_mem","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L168-L169","name":"SetLike.coe_eq_coe","kind":"theorem","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.coe_eq_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L163-L164","name":"SetLike.mem_coe","kind":"theorem","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.mem_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L158-L159","name":"SetLike.ext_iff","kind":"theorem","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.ext_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L154-L155","name":"SetLike.ext","kind":"theorem","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.ext","doc":"Note: implementers of `SetLike` must copy this lemma in order to tag it with `@[ext]`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L149-L150","name":"SetLike.ext'_iff","kind":"theorem","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.ext'_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L145-L146","name":"SetLike.ext'","kind":"theorem","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.ext'","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L141-L142","name":"SetLike.coe_set_eq","kind":"theorem","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.coe_set_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L136-L137","name":"SetLike.coe_injective","kind":"theorem","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.coe_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L132-L133","name":"SetLike.forall","kind":"theorem","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.forall","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L128-L129","name":"SetLike.exists","kind":"theorem","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.exists","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L122-L123","name":"SetLike.coe_sort_coe","kind":"theorem","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.coe_sort_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L116-L117","name":"SetLike.instCoeSortType","kind":"instance","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.instCoeSortType","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L113-L114","name":"SetLike.instMembership","kind":"instance","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.instMembership","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L111-L111","name":"SetLike.instCoeTCSet","kind":"instance","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.instCoeTCSet","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L103-L103","name":"SetLike.coe_injective'","kind":"def","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.coe_injective'","doc":"The coercion from a term of a `SetLike` to its corresponding `Set` is injective. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L101-L101","name":"SetLike.coe","kind":"def","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.coe","doc":"The coercion from a term of a `SetLike` to its corresponding `Set`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L99-L99","name":"SetLike.mk","kind":"ctor","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/SetLike/Basic.lean#L99-L103","name":"SetLike","kind":"class","docLink":"./Mathlib/Data/SetLike/Basic.html#SetLike","doc":"A class to indicate that there is a canonical injection between `A` and `Set B`.\n\nThis has the effect of giving terms of `A` elements of type `B` (through a `Membership`\ninstance) and a compatible coercion to `Type _` as a subtype.\n\nNote: if `SetLike.coe` is a projection, implementers should create a simp lemma such as\n```\n@[simp] lemma mem_carrier {p : MySubobject X} : x ∈ p.carrier ↔ x ∈ (p : Set X) := Iff.rfl\n```\nto normalize terms.\n\nIf you declare an unbundled subclass of `SetLike`, for example:\n```\nclass MulMemClass (S : Type _) (M : Type _) [Mul M] [SetLike S M] where\n  ...\n```\nThen you should *not* repeat the `outParam` declaration so `SetLike` will supply the value instead.\nThis ensures your subclass will not have issues with synthesis of the `[Mul M]` parameter starting\nbefore the value of `M` is known.\n"}]}