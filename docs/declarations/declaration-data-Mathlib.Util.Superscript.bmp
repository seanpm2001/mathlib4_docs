{"name":"Mathlib.Util.Superscript","instances":[{"typeNames":["Char"],"name":"Mathlib.Tactic.Superscript.instHashableChar","className":"Hashable"},{"typeNames":["Mathlib.Tactic.Superscript.Mapping"],"name":"Mathlib.Tactic.Superscript.instInhabitedMapping","className":"Inhabited"}],"imports":["Init","Lean","Std"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L260-L265","name":"Mathlib.Tactic.registerAlias","kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.registerAlias","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L253-L257","name":"Mathlib.Tactic.registerAliasCore","kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.registerAliasCore","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L248-L248","name":"Mathlib.Tactic.subscript.formatter","kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.subscript.formatter","doc":"Formatter for the subscript parser. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L245-L245","name":"Mathlib.Tactic.subscript.parenthesizer","kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.subscript.parenthesizer","doc":"Formatter for the subscript parser. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L241-L242","name":"Mathlib.Tactic.subscript","kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.subscript","doc":"The parser `subscript(term)` parses a subscript. Basic usage is:\n```\nlocal syntax:arg term:max subscript(term) : term\nlocal macro_rules | `($a:term $i:subscript) => `($a $i)\n```\nGiven a notation like this, the expression `(a)·µ¢` parses and expands to `a i`. (Either parentheses\nor a whitespace as in `a ·µ¢` is required, because `a·µ¢` is considered as an identifier.)\n\nNote that because of Unicode limitations, not many characters can actually be typed inside the\nsubscript, so this should not be used for complex expressions. Legal subscript characters:\n```\n‚ÇÄ‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚ÇÜ‚Çá‚Çà‚Çâ‚Çê‚Çë‚Çï·µ¢‚±º‚Çñ‚Çó‚Çò‚Çô‚Çí‚Çö·µ£‚Çõ‚Çú·µ§·µ•‚Çì·¥Ä ô·¥Ñ·¥Ö·¥áÍú∞…¢ ú…™·¥ä·¥ã ü·¥ç…¥·¥è·¥òÍûØ ÄÍú±·¥õ·¥ú·¥†·¥° è·¥¢·µ¶·µß·µ®·µ©·µ™‚Çä‚Çã‚Çå‚Çç‚Çé\n```\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L223-L223","name":"Mathlib.Tactic.superscript.formatter","kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.superscript.formatter","doc":"Formatter for the superscript parser. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L220-L220","name":"Mathlib.Tactic.superscript.parenthesizer","kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.superscript.parenthesizer","doc":"Formatter for the superscript parser. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L216-L217","name":"Mathlib.Tactic.superscript","kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.superscript","doc":"The parser `superscript(term)` parses a superscript. Basic usage is:\n```\nlocal syntax:arg term:max superscript(term) : term\nlocal macro_rules | `($a:term $b:superscript) => `($a ^ $b)\n```\nGiven a notation like this, the expression `2‚Å∂‚Å¥` parses and expands to `2 ^ 64`.\n\nNote that because of Unicode limitations, not many characters can actually be typed inside the\nsuperscript, so this should not be used for complex expressions. Legal superscript characters:\n```\n‚Å∞¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ·µÉ·µá·∂ú·µà·µâ·∂†·µç ∞‚Å± ≤·µèÀ°·µê‚Åø·µí·µñêû• ≥À¢·µó·µò·µõ ∑À£ ∏·∂ª·¥¨·¥Æ·¥∞·¥±·¥≥·¥¥·¥µ·¥∂·¥∑·¥∏·¥π·¥∫·¥º·¥æÍü¥·¥ø·µÄ·µÅ‚±Ω·µÇ·µù·µû·µü·µã·∂ø·∂•·∂π·µ†·µ°‚Å∫‚Åª‚Åº‚ÅΩ‚Åæ\n```\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L196-L198","name":"Mathlib.Tactic.Superscript.scriptParser.formatter","kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptParser.formatter","doc":"Formatter for the script parser. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L192-L193","name":"Mathlib.Tactic.Superscript.scriptParser.parenthesizer","kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptParser.parenthesizer","doc":"Parenthesizer for the script parser. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L180-L189","name":"Mathlib.Tactic.Superscript.scriptParser","kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptParser","doc":"The super/subscript parser.\n\n* `m`: the character mapping\n* `antiquotName`: the name to use for antiquotation bindings `$a:antiquotName`.\n  Note that the actual syntax kind bound will be the body kind (parsed by `p`), not `kind`.\n* `errorMsg`: shown when the parser does not match\n* `p`: the inner parser (usually `term`), to be called on the body of the superscript\n* `many`: if false, whitespace is not allowed inside the superscript\n* `kind`: the term will be wrapped in a node with this kind\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L158-L166","name":"Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignSyntax","kind":"opaque","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignSyntax","doc":"Applies the alignment mapping to a `Syntax`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L149-L156","name":"Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignInfo","kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignInfo","doc":"Applies the alignment mapping to a `SourceInfo`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L146-L147","name":"Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignSubstr","kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignSubstr","doc":"Applies the alignment mapping to a `Substring`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L138-L141","name":"Mathlib.Tactic.Superscript.scriptFnNoAntiquot.align","kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot.align","doc":"Applies the alignment mapping to a position. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L114-L168","name":"Mathlib.Tactic.Superscript.scriptFnNoAntiquot","kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot","doc":"The core function for super/subscript parsing. It consists of three stages:\n\n1. Parse a run of superscripted characters, skipping whitespace and stopping when we hit a\n   non-superscript character.\n2. Un-superscript the text and pass the body to the inner parser (usually `term`).\n3. Take the resulting `Syntax` object and align all the positions to fit back into the original\n   text (which as a side effect also rewrites all the substrings to be in subscript text).\n\nIf `many` is false, then whitespace (and comments) are not allowed inside the superscript.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L94-L102","name":"Mathlib.Tactic.Superscript.partitionPoint","kind":"opaque","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.partitionPoint","doc":"Given a predicate `leftOfPartition` which is true for indexes `< i` and false for `‚â• i`,\nreturns `i`, by binary search. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L80-L87","name":"Mathlib.Tactic.Superscript.satisfyTokensFn.loop","kind":"opaque","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.satisfyTokensFn.loop","doc":"Loop body of `satisfyTokensFn` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L69-L89","name":"Mathlib.Tactic.Superscript.satisfyTokensFn","kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.satisfyTokensFn","doc":"Collects runs of text satisfying `p` followed by whitespace. Fails if the first character does\nnot satisfy `p`. If `many` is true, it will parse 1 or more many whitespace-separated runs,\notherwise it will parse only 1. If successful, it passes the result to `k` as an array `(a, b, c)`\nwhere `a..b` is a token and `b..c` is whitespace.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L60-L62","name":"Mathlib.Tactic.Superscript.Mapping.subscript","kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.subscript","doc":"A mapping from subscripts to and from regular text. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L55-L57","name":"Mathlib.Tactic.Superscript.Mapping.superscript","kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.superscript","doc":"A mapping from superscripts to and from regular text. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L43-L52","name":"Mathlib.Tactic.Superscript.mkMapping","kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.mkMapping","doc":"Constructs a mapping (intended for compile time use). Panics on violated invariants. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L40-L40","name":"Mathlib.Tactic.Superscript.instInhabitedMapping","kind":"instance","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.instInhabitedMapping","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L39-L39","name":"Mathlib.Tactic.Superscript.Mapping.toSpecial","kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.toSpecial","doc":"Map from \"normal\" text to \"special\" (e.g. superscript) characters. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L37-L37","name":"Mathlib.Tactic.Superscript.Mapping.toNormal","kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.toNormal","doc":"Map from \"special\" (e.g. superscript) characters to \"normal\" characters. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L35-L40","name":"Mathlib.Tactic.Superscript.Mapping","kind":"structure","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping","doc":"A bidirectional character mapping. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L32-L32","name":"Mathlib.Tactic.Superscript.instHashableChar","kind":"instance","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.instHashableChar","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Util/Superscript.lean#L1-L1","name":"Mathlib.Tactic.Superscript.Mapping.mk","kind":"ctor","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.mk","doc":""}]}