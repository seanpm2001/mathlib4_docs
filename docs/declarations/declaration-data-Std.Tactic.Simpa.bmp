{"name":"Std.Tactic.Simpa","instances":[{"typeNames":["Lean.Elab.Term.UseImplicitLambdaResult"],"name":"Std.Tactic.Simpa.instReprUseImplicitLambdaResult","className":"Repr"}],"imports":["Init","Lean.Meta.Tactic.Assumption","Lean.Elab.Tactic.Simp","Lean.Linter.Util","Std.Lean.Meta.LCtx","Std.Lean.Parser","Std.Tactic.OpenPrivate"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Simpa.lean#L110-L110","name":"Std.Tactic.Simpa.instReprUseImplicitLambdaResult","kind":"instance","docLink":"./Std/Tactic/Simpa.html#Std.Tactic.Simpa.instReprUseImplicitLambdaResult","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Simpa.lean#L107-L108","name":"Std.Tactic.Simpa.getLinterUnnecessarySimpa","kind":"def","docLink":"./Std/Tactic/Simpa.html#Std.Tactic.Simpa.getLinterUnnecessarySimpa","doc":"Gets the value of the `linter.unnecessarySimpa` option. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Simpa.lean#L50-L51","name":"Std.Tactic.Simpa.tacticSimpa?!_","kind":"def","docLink":"./Std/Tactic/Simpa.html#Std.Tactic.Simpa.tacticSimpa?!_","doc":"This is a \"finishing\" tactic modification of `simp`. It has two forms.\n\n* `simpa [rules, ⋯] using e` will simplify the goal and the type of\n`e` using `rules`, then try to close the goal using `e`.\n\nSimplifying the type of `e` makes it more likely to match the goal\n(which has also been simplified). This construction also tends to be\nmore robust under changes to the simp lemma set.\n\n* `simpa [rules, ⋯]` will simplify the goal and the type of a\nhypothesis `this` if present in the context, then try to close the goal using\nthe `assumption` tactic.\n\n#TODO: implement `?`\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Simpa.lean#L48-L49","name":"Std.Tactic.Simpa.tacticSimpa?_","kind":"def","docLink":"./Std/Tactic/Simpa.html#Std.Tactic.Simpa.tacticSimpa?_","doc":"This is a \"finishing\" tactic modification of `simp`. It has two forms.\n\n* `simpa [rules, ⋯] using e` will simplify the goal and the type of\n`e` using `rules`, then try to close the goal using `e`.\n\nSimplifying the type of `e` makes it more likely to match the goal\n(which has also been simplified). This construction also tends to be\nmore robust under changes to the simp lemma set.\n\n* `simpa [rules, ⋯]` will simplify the goal and the type of a\nhypothesis `this` if present in the context, then try to close the goal using\nthe `assumption` tactic.\n\n#TODO: implement `?`\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Simpa.lean#L46-L47","name":"Std.Tactic.Simpa.tacticSimpa!_","kind":"def","docLink":"./Std/Tactic/Simpa.html#Std.Tactic.Simpa.tacticSimpa!_","doc":"This is a \"finishing\" tactic modification of `simp`. It has two forms.\n\n* `simpa [rules, ⋯] using e` will simplify the goal and the type of\n`e` using `rules`, then try to close the goal using `e`.\n\nSimplifying the type of `e` makes it more likely to match the goal\n(which has also been simplified). This construction also tends to be\nmore robust under changes to the simp lemma set.\n\n* `simpa [rules, ⋯]` will simplify the goal and the type of a\nhypothesis `this` if present in the context, then try to close the goal using\nthe `assumption` tactic.\n\n#TODO: implement `?`\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Simpa.lean#L29-L45","name":"Std.Tactic.Simpa.simpa","kind":"def","docLink":"./Std/Tactic/Simpa.html#Std.Tactic.Simpa.simpa","doc":"This is a \"finishing\" tactic modification of `simp`. It has two forms.\n\n* `simpa [rules, ⋯] using e` will simplify the goal and the type of\n`e` using `rules`, then try to close the goal using `e`.\n\nSimplifying the type of `e` makes it more likely to match the goal\n(which has also been simplified). This construction also tends to be\nmore robust under changes to the simp lemma set.\n\n* `simpa [rules, ⋯]` will simplify the goal and the type of a\nhypothesis `this` if present in the context, then try to close the goal using\nthe `assumption` tactic.\n\n#TODO: implement `?`\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Simpa.lean#L26-L27","name":"Std.Tactic.Simpa.simpaArgsRest","kind":"def","docLink":"./Std/Tactic/Simpa.html#Std.Tactic.Simpa.simpaArgsRest","doc":"The arguments to the `simpa` family tactics. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/Simpa.lean#L13-L20","name":"linter.unnecessarySimpa","kind":"opaque","docLink":"./Std/Tactic/Simpa.html#linter.unnecessarySimpa","doc":"Enables the 'unnecessary `simpa`' linter. This will report if a use of\n`simpa` could be proven using `simp` or `simp at h` instead.\n"}]}