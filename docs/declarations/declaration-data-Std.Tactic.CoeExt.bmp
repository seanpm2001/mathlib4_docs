{"name":"Std.Tactic.CoeExt","instances":[{"typeNames":["Std.Tactic.Coe.CoeFnType"],"name":"Std.Tactic.Coe.instInhabitedCoeFnType","className":"Inhabited"},{"typeNames":["Std.Tactic.Coe.CoeFnType"],"name":"Std.Tactic.Coe.instReprCoeFnType","className":"Repr"},{"typeNames":["Eq","Std.Tactic.Coe.CoeFnType"],"name":"Std.Tactic.Coe.instDecidableEqCoeFnType","className":"Decidable"},{"typeNames":["Std.Tactic.Coe.CoeFnType"],"name":"Std.Tactic.Coe.instToExprCoeFnType","className":"Lean.ToExpr"},{"typeNames":["Std.Tactic.Coe.CoeFnInfo"],"name":"Std.Tactic.Coe.instInhabitedCoeFnInfo","className":"Inhabited"},{"typeNames":["Std.Tactic.Coe.CoeFnInfo"],"name":"Std.Tactic.Coe.instReprCoeFnInfo","className":"Repr"},{"typeNames":["Std.Tactic.Coe.CoeFnInfo"],"name":"Std.Tactic.Coe.instToExprCoeFnInfo","className":"Lean.ToExpr"}],"imports":["Init","Lean.PrettyPrinter.Delaborator.Builtins","Std.Lean.Delaborator"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L89-L94","name":"Std.Tactic.Coe.Attr.coe","kind":"def","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.Attr.coe","doc":"The `@[coe]` attribute on a function (which should also appear in a\n`instance : Coe A B := ⟨myFn⟩` declaration) allows the delaborator to show\napplications of this function as `↑` when printing expressions.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L80-L87","name":"Std.Tactic.Coe.registerCoercion","kind":"def","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.registerCoercion","doc":"Add `name` to the coercion extension and add a coercion delaborator for the function. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L66-L77","name":"Std.Tactic.Coe.addCoeDelaborator","kind":"def","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.addCoeDelaborator","doc":"Add a coercion delaborator for the given function. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L61-L63","name":"Std.Tactic.Coe.coeDelaborator","kind":"def","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.coeDelaborator","doc":"This delaborator tries to elide functions which are known coercions.\nFor example, `Int.ofNat` is a coercion, so instead of printing `ofNat n` we just print `↑n`,\nand when re-parsing this we can (usually) recover the specific coercion being used.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L51-L52","name":"Std.Tactic.Coe.getCoeFnInfo?","kind":"def","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.getCoeFnInfo?","doc":"Lookup the coercion information for a given function "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L43-L48","name":"Std.Tactic.Coe.coeExt","kind":"opaque","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.coeExt","doc":"The environment extension for tracking coercion functions for delaboration "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L39-L41","name":"Std.Tactic.Coe.instToExprCoeFnInfo","kind":"instance","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.instToExprCoeFnInfo","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L37-L37","name":"Std.Tactic.Coe.instReprCoeFnInfo","kind":"instance","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.instReprCoeFnInfo","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L37-L37","name":"Std.Tactic.Coe.instInhabitedCoeFnInfo","kind":"instance","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.instInhabitedCoeFnInfo","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L36-L36","name":"Std.Tactic.Coe.CoeFnInfo.type","kind":"def","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo.type","doc":"The type of coercion "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L34-L34","name":"Std.Tactic.Coe.CoeFnInfo.coercee","kind":"def","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo.coercee","doc":"The argument index that represents the value being coerced "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L32-L32","name":"Std.Tactic.Coe.CoeFnInfo.numArgs","kind":"def","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo.numArgs","doc":"The number of arguments to the coercion function "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L30-L37","name":"Std.Tactic.Coe.CoeFnInfo","kind":"structure","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo","doc":"Information associated to a coercion function to enable sensible delaboration. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L22-L27","name":"Std.Tactic.Coe.instToExprCoeFnType","kind":"instance","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.instToExprCoeFnType","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L20-L20","name":"Std.Tactic.Coe.instDecidableEqCoeFnType","kind":"instance","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.instDecidableEqCoeFnType","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L20-L20","name":"Std.Tactic.Coe.instReprCoeFnType","kind":"instance","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.instReprCoeFnType","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L20-L20","name":"Std.Tactic.Coe.instInhabitedCoeFnType","kind":"instance","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.instInhabitedCoeFnType","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L18-L19","name":"Std.Tactic.Coe.CoeFnType.coeSort","kind":"ctor","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnType.coeSort","doc":"The coercion to a type, see `CoeSort.coe` "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L16-L17","name":"Std.Tactic.Coe.CoeFnType.coeFun","kind":"ctor","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnType.coeFun","doc":"The coercion to a function type, see `CoeFun.coe` "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L14-L15","name":"Std.Tactic.Coe.CoeFnType.coe","kind":"ctor","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnType.coe","doc":"The basic coercion `↑x`, see `CoeT.coe` "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L13-L20","name":"Std.Tactic.Coe.CoeFnType","kind":"inductive","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnType","doc":"The different types of coercions that are supported by the `coe` attribute. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Tactic/CoeExt.lean#L1-L1","name":"Std.Tactic.Coe.CoeFnInfo.mk","kind":"ctor","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo.mk","doc":""}]}