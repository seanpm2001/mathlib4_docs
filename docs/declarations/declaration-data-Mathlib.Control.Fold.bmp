{"name":"Mathlib.Control.Fold","instances":[],"imports":["Init","Mathlib.Algebra.Group.Opposite","Mathlib.Algebra.FreeMonoid.Basic","Mathlib.Control.Traversable.Instances","Mathlib.Control.Traversable.Lemmas","Mathlib.CategoryTheory.Endomorphism","Mathlib.CategoryTheory.Types","Mathlib.CategoryTheory.Category.KleisliCat"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L430-L431","name":"Traversable.foldrm_map","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Traversable.foldrm_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L424-L426","name":"Traversable.foldlm_map","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Traversable.foldlm_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L416-L420","name":"Traversable.foldrm_toList","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Traversable.foldrm_toList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L407-L413","name":"Traversable.foldlm_toList","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Traversable.foldlm_toList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L394-L402","name":"Traversable.length_toList","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Traversable.length_toList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L387-L391","name":"Traversable.toList_eq_self","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Traversable.toList_eq_self","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L382-L383","name":"Traversable.foldr_map","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Traversable.foldr_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L376-L378","name":"Traversable.foldl_map","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Traversable.foldl_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L370-L372","name":"Traversable.toList_map","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Traversable.toList_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L363-L367","name":"Traversable.foldr_toList","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Traversable.foldr_toList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L356-L360","name":"Traversable.foldl_toList","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Traversable.foldl_toList","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L352-L353","name":"Traversable.foldMap_map","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Traversable.foldMap_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L336-L349","name":"Traversable.toList_spec","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Traversable.toList_spec","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L330-L333","name":"Traversable.foldrm.ofFreeMonoid_comp_of","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Traversable.foldrm.ofFreeMonoid_comp_of","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L323-L326","name":"Traversable.foldlm.ofFreeMonoid_comp_of","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Traversable.foldlm.ofFreeMonoid_comp_of","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L317-L319","name":"Traversable.foldr.ofFreeMonoid_comp_of","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Traversable.foldr.ofFreeMonoid_comp_of","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L311-L313","name":"Traversable.foldl.ofFreeMonoid_comp_of","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Traversable.foldl.ofFreeMonoid_comp_of","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L293-L295","name":"Traversable.foldMap_hom_free","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Traversable.foldMap_hom_free","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L284-L290","name":"Traversable.foldMap_hom","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Traversable.foldMap_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L273-L275","name":"Traversable.foldl.unop_ofFreeMonoid","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Traversable.foldl.unop_ofFreeMonoid","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L268-L270","name":"Traversable.Free.map_eq_map","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Traversable.Free.map_eq_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L261-L265","name":"Traversable.mapFold","kind":"def","docLink":"./Mathlib/Control/Fold.html#Traversable.mapFold","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L249-L250","name":"Traversable.foldrm","kind":"def","docLink":"./Mathlib/Control/Fold.html#Traversable.foldrm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L245-L246","name":"Traversable.foldlm","kind":"def","docLink":"./Mathlib/Control/Fold.html#Traversable.foldlm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L239-L240","name":"Traversable.length","kind":"def","docLink":"./Mathlib/Control/Fold.html#Traversable.length","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L235-L236","name":"Traversable.toList","kind":"def","docLink":"./Mathlib/Control/Fold.html#Traversable.toList","doc":"Conceptually, `toList` collects all the elements of a collection\nin a list. This idea is formalized by\n\n  `lemma toList_spec (x : t α) : toList x = foldMap FreeMonoid.mk x`.\n\nThe definition of `toList` is based on `foldl` and `List.cons` for\nspeed. It is faster than using `foldMap FreeMonoid.mk` because, by\nusing `foldl` and `List.cons`, each insertion is done in constant\ntime. As a consequence, `toList` performs in linear.\n\nOn the other hand, `foldMap FreeMonoid.mk` creates a singleton list\naround each element and concatenates all the resulting lists. In\n`xs ++ ys`, concatenation takes a time proportional to `length xs`. Since\nthe order in which concatenation is evaluated is unspecified, nothing\nprevents each element of the traversable to be appended at the end\n`xs ++ [x]` which would yield a `O(n²)` run time. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L215-L216","name":"Traversable.foldr","kind":"def","docLink":"./Mathlib/Control/Fold.html#Traversable.foldr","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L211-L212","name":"Traversable.foldl","kind":"def","docLink":"./Mathlib/Control/Fold.html#Traversable.foldl","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L207-L208","name":"Traversable.foldMap","kind":"def","docLink":"./Mathlib/Control/Fold.html#Traversable.foldMap","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L190-L194","name":"Monoid.foldrM.ofFreeMonoid","kind":"def","docLink":"./Mathlib/Control/Fold.html#Monoid.foldrM.ofFreeMonoid","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L189-L189","name":"Monoid.foldrM.ofFreeMonoid_apply","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Monoid.foldrM.ofFreeMonoid_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L185-L186","name":"Monoid.foldrM.get","kind":"def","docLink":"./Mathlib/Control/Fold.html#Monoid.foldrM.get","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L181-L182","name":"Monoid.foldrM.mk","kind":"def","docLink":"./Mathlib/Control/Fold.html#Monoid.foldrM.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L177-L178","name":"Monoid.foldrM","kind":"def","docLink":"./Mathlib/Control/Fold.html#Monoid.foldrM","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L169-L173","name":"Monoid.foldlM.ofFreeMonoid","kind":"def","docLink":"./Mathlib/Control/Fold.html#Monoid.foldlM.ofFreeMonoid","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L168-L168","name":"Monoid.foldlM.ofFreeMonoid_apply","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Monoid.foldlM.ofFreeMonoid_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L164-L165","name":"Monoid.foldlM.get","kind":"def","docLink":"./Mathlib/Control/Fold.html#Monoid.foldlM.get","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L160-L161","name":"Monoid.foldlM.mk","kind":"def","docLink":"./Mathlib/Control/Fold.html#Monoid.foldlM.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L156-L157","name":"Monoid.foldlM","kind":"def","docLink":"./Mathlib/Control/Fold.html#Monoid.foldlM","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L148-L152","name":"Monoid.Foldr.ofFreeMonoid","kind":"def","docLink":"./Mathlib/Control/Fold.html#Monoid.Foldr.ofFreeMonoid","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L147-L147","name":"Monoid.Foldr.ofFreeMonoid_apply","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Monoid.Foldr.ofFreeMonoid_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L143-L144","name":"Monoid.Foldr.get","kind":"def","docLink":"./Mathlib/Control/Fold.html#Monoid.Foldr.get","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L139-L140","name":"Monoid.Foldr.mk","kind":"def","docLink":"./Mathlib/Control/Fold.html#Monoid.Foldr.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L135-L136","name":"Monoid.Foldr","kind":"def","docLink":"./Mathlib/Control/Fold.html#Monoid.Foldr","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L126-L131","name":"Monoid.Foldl.ofFreeMonoid","kind":"def","docLink":"./Mathlib/Control/Fold.html#Monoid.Foldl.ofFreeMonoid","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L125-L125","name":"Monoid.Foldl.ofFreeMonoid_apply","kind":"theorem","docLink":"./Mathlib/Control/Fold.html#Monoid.Foldl.ofFreeMonoid_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L121-L122","name":"Monoid.Foldl.get","kind":"def","docLink":"./Mathlib/Control/Fold.html#Monoid.Foldl.get","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L117-L118","name":"Monoid.Foldl.mk","kind":"def","docLink":"./Mathlib/Control/Fold.html#Monoid.Foldl.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Control/Fold.lean#L113-L114","name":"Monoid.Foldl","kind":"def","docLink":"./Mathlib/Control/Fold.html#Monoid.Foldl","doc":"For a list, foldl f x [y₀,y₁] reduces as follows:\n\n```\ncalc  foldl f x [y₀,y₁]\n    = foldl f (f x y₀) [y₁]      : rfl\n... = foldl f (f (f x y₀) y₁) [] : rfl\n... = f (f x y₀) y₁              : rfl\n```\nwith\n```\nf : α → β → α\nx : α\n[y₀,y₁] : List β\n```\n\nWe can view the above as a composition of functions:\n```\n... = f (f x y₀) y₁              : rfl\n... = flip f y₁ (flip f y₀ x)    : rfl\n... = (flip f y₁ ∘ flip f y₀) x  : rfl\n```\n\nWe can use traverse and const to construct this composition:\n```\ncalc   const.run (traverse (λ y, const.mk' (flip f y)) [y₀,y₁]) x\n     = const.run ((::) <$> const.mk' (flip f y₀) <*> traverse (λ y, const.mk' (flip f y)) [y₁]) x\n...  = const.run ((::) <$> const.mk' (flip f y₀) <*>\n         ( (::) <$> const.mk' (flip f y₁) <*> traverse (λ y, const.mk' (flip f y)) [] )) x\n...  = const.run ((::) <$> const.mk' (flip f y₀) <*>\n         ( (::) <$> const.mk' (flip f y₁) <*> pure [] )) x\n...  = const.run ( ((::) <$> const.mk' (flip f y₁) <*> pure []) ∘\n         ((::) <$> const.mk' (flip f y₀)) ) x\n...  = const.run ( const.mk' (flip f y₁) ∘ const.mk' (flip f y₀) ) x\n...  = const.run ( flip f y₁ ∘ flip f y₀ ) x\n...  = f (f x y₀) y₁\n```\n\nAnd this is how `const` turns a monoid into an applicative functor and\nhow the monoid of endofunctions define `Foldl`.\n"}]}