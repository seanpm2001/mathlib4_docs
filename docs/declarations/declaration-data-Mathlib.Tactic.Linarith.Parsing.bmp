{"name":"Mathlib.Tactic.Linarith.Parsing","instances":[{"typeNames":["Linarith.Monom"],"name":"Linarith.instOrdMonom","className":"Ord"}],"imports":["Init","Std.Data.RBMap.Basic","Mathlib.Tactic.Linarith.Datatypes"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L233-L238","name":"Linarith.linearFormsAndMaxVar","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.linearFormsAndMaxVar","doc":"`linearFormsAndMaxVar red pfs` is the main interface for computing the linear forms of a list\nof expressions. Given a list `pfs` of proofs of comparisons, it produces a list `c` of `Comp`s of\nthe same length, such that `c[i]` represents the linear form of the type of `pfs[i]`.\n\nIt also returns the largest variable index that appears in comparisons in `c`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L218-L224","name":"Linarith.toCompFold","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.toCompFold","doc":"`toCompFold red e_map exprs monom_map` folds `toComp` over `exprs`,\nupdating `e_map` and `monom_map` as it goes.\n "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L206-L212","name":"Linarith.toComp","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.toComp","doc":"`toComp red e e_map monom_map` converts an expression of the form `t < 0`, `t ≤ 0`, or `t = 0`\ninto a `comp` object.\n\n`e_map` maps atomic expressions to indices; `monom_map` maps monomials to indices.\nBoth of these are updated during processing and returned.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L190-L197","name":"Linarith.elimMonom","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.elimMonom","doc":"`elimMonom s map` eliminates the monomial level of the `Sum` `s`.\n\n`map` is a lookup map from monomials to variable numbers.\nThe output `RBMap ℕ ℤ` has the same structure as `s : Sum`,\nbut each monomial key is replaced with its index according to `map`.\nIf any new monomials are encountered, they are assigned variable numbers and `map` is updated.\n "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L152-L180","name":"Linarith.linearFormOfExpr","kind":"opaque","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.linearFormOfExpr","doc":"`linearFormOfExpr red map e` computes the linear form of `e`.\n\n`map` is a lookup map from atomic expressions to variable numbers.\nIf a new atomic expression is encountered, it is added to the map with a new number.\nIt matches atomic expressions up to reducibility given by `red`.\n\nBecause it matches up to definitional equality, this function must be in the `MetaM` monad,\nand forces some functions that call it into `MetaM` as well.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L133-L139","name":"Linarith.linearFormOfAtom","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.linearFormOfAtom","doc":"`linearFormOfAtom red map e` is the atomic case for `linear_form_of_expr`.\nIf `e` appears with index `k` in `map`, it returns the singleton sum `var k`.\nOtherwise it updates `map`, adding `e` with index `n`, and returns the singleton sum `var n`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L126-L126","name":"Linarith.ExprMap","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.ExprMap","doc":"`ExprMap` is used to record atomic expressions which have been seen while processing inequality\nexpressions.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L112-L113","name":"Linarith.var","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.var","doc":"A single variable `n` is represented by a sum with coefficient `1` and monomial `n`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L108-L109","name":"Linarith.scalar","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.scalar","doc":"A scalar `z` is represented by a `Sum` with coefficient `z` and monomial `one` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L105-L105","name":"Linarith.one","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.one","doc":"The unit monomial `one` is represented by the empty RBMap. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L101-L102","name":"Linarith.SumOfMonom","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.SumOfMonom","doc":"`SumOfMonom m` lifts `m` to a sum with coefficient `1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L96-L98","name":"Linarith.Sum.pow","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum.pow","doc":"The `n`th power of `s : Sum` is the `n`-fold product of `s`, with `s.pow 0 = Sum.one`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L91-L93","name":"Linarith.Sum.mul","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum.mul","doc":"`sum.mul s1 s2` distributes the multiplication of two sums. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L87-L88","name":"Linarith.Sum.scaleByMonom","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum.scaleByMonom","doc":"`Sum.scaleByMonom s m` multiplies every monomial in `s` by `m`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L84-L84","name":"Linarith.Sum.one","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum.one","doc":"`1` is represented as the singleton sum of the monomial `Monom.one` with coefficient 1. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L81-L81","name":"Linarith.Sum","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum","doc":"Linear combinations of monomials are represented by mapping monomials to coefficients. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L77-L78","name":"Linarith.instOrdMonom","kind":"instance","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.instOrdMonom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L72-L75","name":"Linarith.Monom.lt","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom.lt","doc":"Compare monomials by first comparing their keys and then their powers. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L69-L69","name":"Linarith.Monom.one","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom.one","doc":"`1` is represented by the empty monomial, the product of no variables. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L66-L66","name":"Linarith.Monom","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom","doc":"Variables (represented by natural numbers) map to their power. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L61-L61","name":"Linarith.Map","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Map","doc":"A local abbreviation for `RBMap` so we don't need to write `Ord.compare` each time. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L55-L56","name":"instAddRBMap","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#instAddRBMap","doc":"We introduce a local instance allowing addition of `RBMap`s,\nremoving any keys with value zero.\nWe don't need to prove anything about this addition, as it is only used in meta code.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/Linarith/Parsing.lean#L43-L47","name":"List.findDefeq","kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#List.findDefeq","doc":"`findDefeq red m e` looks for a key in `m` that is defeq to `e` (up to transparency `red`),\nand returns the value associated with this key if it exists.\nOtherwise, it fails.\n"}]}