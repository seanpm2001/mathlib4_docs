{"name":"Mathlib.Data.FunLike.Equiv","instances":[{"typeNames":[],"name":"EquivLike.toEmbeddingLike","className":"EmbeddingLike"}],"imports":["Init","Mathlib.Data.FunLike.Embedding"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L233-L234","name":"EquivLike.subsingleton_dom","kind":"theorem","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike.subsingleton_dom","doc":"This is not an instance to avoid slowing down every single `Subsingleton` typeclass search."},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L228-L229","name":"EquivLike.comp_bijective","kind":"theorem","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike.comp_bijective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L223-L224","name":"EquivLike.comp_surjective","kind":"theorem","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike.comp_surjective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L218-L219","name":"EquivLike.comp_injective","kind":"theorem","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike.comp_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L214-L215","name":"EquivLike.apply_inv_apply","kind":"theorem","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike.apply_inv_apply","doc":"This lemma is only supposed to be used in the generic context, when working with instances\nof classes extending `EquivLike`.\nFor concrete isomorphism types such as `Equiv`, you should use `Equiv.apply_symm_apply`\nor its equivalent.\n\nTODO: define a generic form of `Equiv.symm`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L203-L204","name":"EquivLike.inv_apply_apply","kind":"theorem","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike.inv_apply_apply","doc":"This lemma is only supposed to be used in the generic context, when working with instances\nof classes extending `EquivLike`.\nFor concrete isomorphism types such as `Equiv`, you should use `Equiv.symm_apply_apply`\nor its equivalent.\n\nTODO: define a generic form of `Equiv.symm`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L192-L193","name":"EquivLike.bijective_comp","kind":"theorem","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike.bijective_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L187-L188","name":"EquivLike.surjective_comp","kind":"theorem","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike.surjective_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L182-L183","name":"EquivLike.injective_comp","kind":"theorem","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike.injective_comp","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L177-L178","name":"EquivLike.apply_eq_iff_eq","kind":"theorem","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike.apply_eq_iff_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L173-L174","name":"EquivLike.bijective","kind":"theorem","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike.bijective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L169-L170","name":"EquivLike.surjective","kind":"theorem","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike.surjective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L165-L166","name":"EquivLike.injective","kind":"theorem","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike.injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L159-L163","name":"EquivLike.toEmbeddingLike","kind":"instance","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike.toEmbeddingLike","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L155-L156","name":"EquivLike.inv_injective","kind":"theorem","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike.inv_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L146-L146","name":"EquivLike.coe_injective'","kind":"def","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike.coe_injective'","doc":"If two coercions to functions are jointly injective. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L144-L144","name":"EquivLike.right_inv","kind":"def","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike.right_inv","doc":"The coercions are right inverses. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L142-L142","name":"EquivLike.left_inv","kind":"def","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike.left_inv","doc":"The coercions are left inverses. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L140-L140","name":"EquivLike.inv","kind":"def","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike.inv","doc":"The coercion to a function in the backwards direction. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L138-L138","name":"EquivLike.coe","kind":"def","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike.coe","doc":"The coercion to a function in the forward direction. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L136-L136","name":"EquivLike.mk","kind":"ctor","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/FunLike/Equiv.lean#L136-L146","name":"EquivLike","kind":"class","docLink":"./Mathlib/Data/FunLike/Equiv.html#EquivLike","doc":"The class `EquivLike E α β` expresses that terms of type `E` have an\ninjective coercion to bijections between `α` and `β`.\n\nThis typeclass is used in the definition of the homomorphism typeclasses,\nsuch as `ZeroEquivClass`, `MulEquivClass`, `MonoidEquivClass`, ....\n"}]}