{"name":"Mathlib.GroupTheory.FreeProduct","instances":[{"typeNames":["FreeProduct"],"name":"instMonoidFreeProduct","className":"Monoid"},{"typeNames":["FreeProduct"],"name":"instInhabitedFreeProduct","className":"Inhabited"},{"typeNames":["FreeProduct","DivInvMonoid.toMonoid","Group.toDivInvMonoid"],"name":"FreeProduct.instInvFreeProductToMonoidToDivInvMonoid","className":"Inv"},{"typeNames":["FreeProduct","DivInvMonoid.toMonoid","Group.toDivInvMonoid"],"name":"FreeProduct.instGroupFreeProductToMonoidToDivInvMonoid","className":"Group"},{"typeNames":["FreeProduct.Word"],"name":"FreeProduct.Word.instInhabitedWord","className":"Inhabited"},{"typeNames":["FreeProduct.Word.Pair"],"name":"FreeProduct.Word.instInhabitedPair","className":"Inhabited"},{"typeNames":["FreeProduct.Word"],"name":"FreeProduct.Word.summandAction","className":"MulAction"},{"typeNames":["FreeProduct","FreeProduct.Word","instMonoidFreeProduct"],"name":"FreeProduct.Word.instMulActionFreeProductWordInstMonoidFreeProduct","className":"MulAction"},{"typeNames":["Eq","FreeProduct.Word"],"name":"FreeProduct.Word.instDecidableEqWord","className":"Decidable"},{"typeNames":["Eq","FreeProduct"],"name":"FreeProduct.Word.instDecidableEqFreeProduct","className":"Decidable"},{"typeNames":["FreeProduct","DivInvMonoid.toMonoid","Group.toDivInvMonoid","FreeProduct.instGroupFreeProductToMonoidToDivInvMonoid"],"name":"FreeProduct.instIsFreeGroupFreeProductToMonoidToDivInvMonoidInstGroupFreeProductToMonoidToDivInvMonoid","className":"IsFreeGroup"}],"imports":["Init","Mathlib.Algebra.FreeMonoid.Basic","Mathlib.GroupTheory.Congruence","Mathlib.GroupTheory.IsFreeGroup","Mathlib.Data.List.Chain","Mathlib.SetTheory.Cardinal.Ordinal","Mathlib.Data.Set.Pointwise.SMul"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L903-L992","name":"FreeGroup.injective_lift_of_ping_pong","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeGroup.injective_lift_of_ping_pong","doc":"The Ping-Pong-Lemma.\n\nGiven a group action of `G` on `X` so that the generators of the free groups act in specific\nways on disjoint subsets `X i` and `Y i` we can prove that `lift f` is injective, and thus the image\nof `lift f` is isomorphic to the free group.\n\nOften the Ping-Pong-Lemma is stated with regard to group elements that generate the whole group;\nwe generalize to arbitrary group homomorphisms from the free group to `G`  and do not require the\ngroup to be generated by the elements.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L857-L863","name":"freeGroupEquivFreeProduct","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#freeGroupEquivFreeProduct","doc":"A free group is a free product of copies of the free_group over one generator. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L856-L856","name":"freeGroupEquivFreeProduct_apply","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#freeGroupEquivFreeProduct_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L856-L856","name":"freeGroupEquivFreeProduct_symm_apply","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#freeGroupEquivFreeProduct_symm_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L839-L851","name":"FreeProduct.instIsFreeGroupFreeProductToMonoidToDivInvMonoidInstGroupFreeProductToMonoidToDivInvMonoid","kind":"instance","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.instIsFreeGroupFreeProductToMonoidToDivInvMonoidInstGroupFreeProductToMonoidToDivInvMonoid","doc":"The free product of free groups is itself a free group "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L838-L838","name":"FreeProduct.instIsFreeGroupFreeProductToMonoidToDivInvMonoidInstGroupFreeProductToMonoidToDivInvMonoid_Generators","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.instIsFreeGroupFreeProductToMonoidToDivInvMonoidInstGroupFreeProductToMonoidToDivInvMonoid_Generators","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L838-L838","name":"FreeProduct.instIsFreeGroupFreeProductToMonoidToDivInvMonoidInstGroupFreeProductToMonoidToDivInvMonoid_MulEquiv'_symm_apply","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.instIsFreeGroupFreeProductToMonoidToDivInvMonoidInstGroupFreeProductToMonoidToDivInvMonoid_MulEquiv'_symm_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L838-L838","name":"FreeProduct.instIsFreeGroupFreeProductToMonoidToDivInvMonoidInstGroupFreeProductToMonoidToDivInvMonoid_MulEquiv'_apply","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.instIsFreeGroupFreeProductToMonoidToDivInvMonoidInstGroupFreeProductToMonoidToDivInvMonoid_MulEquiv'_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L825-L832","name":"FreeProduct.lift_injective_of_ping_pong","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.lift_injective_of_ping_pong","doc":"The Ping-Pong-Lemma.\n\nGiven a group action of `G` on `X` so that the `H i` acts in a specific way on disjoint subsets\n`X i` we can prove that `lift f` is injective, and thus the image of `lift f` is isomorphic to the\nfree product of the `H i`.\n\nOften the Ping-Pong-Lemma is stated with regard to subgroups `H i` that generate the whole group;\nwe generalize to arbitrary group homomorphisms `f i : H i →* G` and do not require the group to be\ngenerated by the images.\n\nUsually the Ping-Pong-Lemma requires that one group `H i` has at least three elements. This\ncondition is only needed if `# ι = 2`, and we accept `3 ≤ # ι` as an alternative.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L806-L809","name":"FreeProduct.empty_of_word_prod_eq_one","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.empty_of_word_prod_eq_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L773-L803","name":"FreeProduct.lift_word_prod_nontrivial_of_not_empty","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.lift_word_prod_nontrivial_of_not_empty","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L755-L768","name":"FreeProduct.lift_word_prod_nontrivial_of_head_card","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.lift_word_prod_nontrivial_of_head_card","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L750-L752","name":"FreeProduct.lift_word_prod_nontrivial_of_head_eq_last","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.lift_word_prod_nontrivial_of_head_eq_last","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L740-L745","name":"FreeProduct.lift_word_prod_nontrivial_of_other_i","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.lift_word_prod_nontrivial_of_other_i","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L727-L735","name":"FreeProduct.lift_word_ping_pong","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.lift_word_ping_pong","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L689-L690","name":"FreeProduct.NeWord.inv_last","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.inv_last","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L684-L685","name":"FreeProduct.NeWord.inv_head","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.inv_head","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L679-L680","name":"FreeProduct.NeWord.inv_prod","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.inv_prod","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L673-L675","name":"FreeProduct.NeWord.inv","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.inv","doc":"The inverse of a non-empty reduced word "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L657-L665","name":"FreeProduct.NeWord.mulHead_prod","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.mulHead_prod","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L649-L653","name":"FreeProduct.NeWord.mulHead_head","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.mulHead_head","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L644-L645","name":"FreeProduct.NeWord.mulHead","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.mulHead","doc":"One can multiply an element from the left to a non-empty reduced word if it does not cancel\nwith the first element in the word. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L635-L639","name":"FreeProduct.NeWord.replaceHead_head","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.replaceHead_head","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L629-L631","name":"FreeProduct.NeWord.replaceHead","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.replaceHead","doc":"One can replace the first letter in a non-empty reduced word by an element of the same\ngroup "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L623-L624","name":"FreeProduct.NeWord.append_prod","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.append_prod","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L617-L619","name":"FreeProduct.NeWord.append_last","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.append_last","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L611-L613","name":"FreeProduct.NeWord.append_head","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.append_head","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L606-L607","name":"FreeProduct.NeWord.prod_singleton","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.prod_singleton","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L601-L602","name":"FreeProduct.NeWord.singleton_last","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.singleton_last","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L596-L597","name":"FreeProduct.NeWord.singleton_head","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.singleton_head","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L591-L592","name":"FreeProduct.NeWord.prod","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.prod","doc":"A non-empty reduced word determines an element of the free product, given by multiplication. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L569-L587","name":"FreeProduct.NeWord.of_word","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.of_word","doc":"Every nonempty `Word M` can be constructed as a `NeWord M i j` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L547-L565","name":"FreeProduct.NeWord.toWord","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.toWord","doc":"The `Word M` represented by a `NeWord M i j` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L538-L543","name":"FreeProduct.NeWord.toList_getLast?","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.toList_getLast?","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L529-L534","name":"FreeProduct.NeWord.toList_head?","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.toList_head?","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L523-L525","name":"FreeProduct.NeWord.last","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.last","doc":"The last letter of a `NeWord` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L516-L518","name":"FreeProduct.NeWord.head","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.head","doc":"The first letter of a `NeWord` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L507-L511","name":"FreeProduct.NeWord.toList_ne_nil","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.toList_ne_nil","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L502-L504","name":"FreeProduct.NeWord.toList","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.toList","doc":"The list represented by a given `NeWord` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L491-L491","name":"FreeProduct.NeWord.append","kind":"ctor","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.append","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L490-L490","name":"FreeProduct.NeWord.singleton","kind":"ctor","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord.singleton","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L489-L491","name":"FreeProduct.NeWord","kind":"inductive","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.NeWord","doc":"A `NeWord M i j` is a representation of a non-empty reduced words where the first letter comes\nfrom `M i` and the last letter comes from `M j`. It can be constructed from singletons and via\nconcatenation, and thus provides a useful induction principle. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L478-L479","name":"FreeProduct.Word.instDecidableEqFreeProduct","kind":"instance","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.instDecidableEqFreeProduct","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L475-L476","name":"FreeProduct.Word.instDecidableEqWord","kind":"instance","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.instDecidableEqWord","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L462-L472","name":"FreeProduct.Word.equiv","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.equiv","doc":"Each element of the free product corresponds to a unique reduced word. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L447-L458","name":"FreeProduct.Word.prod_smul","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.prod_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L436-L443","name":"FreeProduct.Word.smul_induction","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.smul_induction","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L428-L433","name":"FreeProduct.Word.cons_eq_smul","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.cons_eq_smul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L423-L425","name":"FreeProduct.Word.of_smul_def","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.of_smul_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L420-L421","name":"FreeProduct.Word.instMulActionFreeProductWordInstMonoidFreeProduct","kind":"instance","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.instMulActionFreeProductWordInstMonoidFreeProduct","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L410-L417","name":"FreeProduct.Word.summandAction","kind":"instance","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.summandAction","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L405-L407","name":"FreeProduct.Word.equivPair_eq_of_fstIdx_ne","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.equivPair_eq_of_fstIdx_ne","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L401-L402","name":"FreeProduct.Word.equivPair_symm","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.equivPair_symm","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L394-L398","name":"FreeProduct.Word.equivPair","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.equivPair","doc":"The equivalence between words and pairs. Given a word, it decomposes it as a pair by removing\nthe first letter if it comes from `M i`. Given a pair, it prepends the head to the tail. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L353-L371","name":"FreeProduct.Word.rcons_inj","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.rcons_inj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L348-L350","name":"FreeProduct.Word.prod_rcons","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.prod_rcons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L340-L344","name":"FreeProduct.Word.cons_eq_rcons","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.cons_eq_rcons","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L322-L331","name":"FreeProduct.Word.rcons","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.rcons","doc":"Given a pair `(head, tail)`, we can form a word by prepending `head` to `tail`, except if `head`\nis `1 : M i` then we have to just return `Word` since we need the result to be reduced. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L312-L313","name":"FreeProduct.Word.instInhabitedPair","kind":"instance","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.instInhabitedPair","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L309-L309","name":"FreeProduct.Word.Pair.fstIdx_ne","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.Pair.fstIdx_ne","doc":"The index first letter of tail of a `Pair M i` is not equal to `i` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L307-L307","name":"FreeProduct.Word.Pair.tail","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.Pair.tail","doc":"The remaining letters of the word, excluding the first letter "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L305-L305","name":"FreeProduct.Word.Pair.head","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.Pair.head","doc":"An element of `M i`, the first letter of the word. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L303-L303","name":"FreeProduct.Word.Pair.mk","kind":"ctor","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.Pair.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L303-L309","name":"FreeProduct.Word.Pair","kind":"structure","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.Pair","doc":"Given an index `i : ι`, `Pair M i` is the type of pairs `(head, tail)` where `head : M i` and\n`tail : Word M`, subject to the constraint that first letter of `tail` can't be `⟨i, m⟩`.\nBy prepending `head` to `tail`, one obtains a new word. We'll show that any word can be uniquely\nobtained in this way. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L302-L302","name":"FreeProduct.Word.Pair.ext","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.Pair.ext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L302-L302","name":"FreeProduct.Word.Pair.ext_iff","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.Pair.ext_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L291-L293","name":"FreeProduct.Word.fstIdx_ne_iff","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.fstIdx_ne_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L287-L288","name":"FreeProduct.Word.fstIdx","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.fstIdx","doc":"`fstIdx w` is `some i` if the first letter of `w` is `⟨i, m⟩` with `m : M i`. If `w` is empty\nthen it's `none`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L281-L282","name":"FreeProduct.Word.prod_empty","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.prod_empty","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L276-L277","name":"FreeProduct.Word.prod","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.prod","doc":"A reduced word determines an element of the free product, given by multiplication. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L272-L273","name":"FreeProduct.Word.instInhabitedWord","kind":"instance","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.instInhabitedWord","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L266-L269","name":"FreeProduct.Word.empty","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.empty","doc":"The empty reduced word. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L254-L258","name":"FreeProduct.range_eq_iSup","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.range_eq_iSup","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L243-L251","name":"FreeProduct.lift_range_le","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.lift_range_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L229-L241","name":"FreeProduct.instGroupFreeProductToMonoidToDivInvMonoid","kind":"instance","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.instGroupFreeProductToMonoidToDivInvMonoid","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L222-L226","name":"FreeProduct.inv_def","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.inv_def","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L218-L220","name":"FreeProduct.instInvFreeProductToMonoidToDivInvMonoid","kind":"instance","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.instInvFreeProductToMonoidToDivInvMonoid","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L206-L211","name":"FreeProduct.mrange_eq_iSup","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.mrange_eq_iSup","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L195-L203","name":"FreeProduct.lift_mrange_le","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.lift_mrange_le","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L191-L192","name":"FreeProduct.of_injective","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.of_injective","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L186-L188","name":"FreeProduct.of_leftInverse","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.of_leftInverse","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L172-L183","name":"FreeProduct.induction_on","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.induction_on","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L167-L168","name":"FreeProduct.lift_of","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.lift_of","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L142-L163","name":"FreeProduct.lift","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.lift","doc":"A map out of the free product corresponds to a family of maps out of the summands. This is the\nuniversal property of the free product, characterizing it as a categorical coproduct. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L141-L141","name":"FreeProduct.lift_symm_apply","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.lift_symm_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L132-L136","name":"FreeProduct.ext_hom","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.ext_hom","doc":"See note [partially-applied ext lemmas]. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L123-L124","name":"FreeProduct.of_apply","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.of_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L116-L120","name":"FreeProduct.of","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.of","doc":"The inclusion of a summand into the free product. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L110-L110","name":"FreeProduct.Word.chain_ne","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.chain_ne","doc":"Adjacent letters are not from the same summand. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L108-L108","name":"FreeProduct.Word.ne_one","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.ne_one","doc":"A reduced word does not contain `1` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L106-L106","name":"FreeProduct.Word.toList","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.toList","doc":"A `Word` is a `List (Σ i, M i)`, such that `1` is not in the list, and no\ntwo adjacent letters are from the same summand "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L103-L110","name":"FreeProduct.Word","kind":"structure","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word","doc":"The type of reduced words. A reduced word cannot contain a letter `1`, and no two adjacent\nletters can come from the same summand. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L102-L102","name":"FreeProduct.Word.ext","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.ext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L102-L102","name":"FreeProduct.Word.ext_iff","kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.ext_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L95-L96","name":"instInhabitedFreeProduct","kind":"instance","docLink":"./Mathlib/GroupTheory/FreeProduct.html#instInhabitedFreeProduct","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L92-L93","name":"instMonoidFreeProduct","kind":"instance","docLink":"./Mathlib/GroupTheory/FreeProduct.html#instMonoidFreeProduct","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L87-L88","name":"FreeProduct","kind":"def","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct","doc":"The free product (categorical coproduct) of an indexed family of monoids. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L81-L83","name":"FreeProduct.Rel.of_mul","kind":"ctor","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Rel.of_mul","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L80-L80","name":"FreeProduct.Rel.of_one","kind":"ctor","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Rel.of_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L79-L83","name":"FreeProduct.Rel","kind":"inductive","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Rel","doc":"A relation on the free monoid on alphabet `Σ i, M i`, relating `⟨i, 1⟩` with `1` and\n`⟨i, x⟩ * ⟨i, y⟩` with `⟨i, x * y⟩`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/GroupTheory/FreeProduct.lean#L1-L1","name":"FreeProduct.Word.mk","kind":"ctor","docLink":"./Mathlib/GroupTheory/FreeProduct.html#FreeProduct.Word.mk","doc":""}]}