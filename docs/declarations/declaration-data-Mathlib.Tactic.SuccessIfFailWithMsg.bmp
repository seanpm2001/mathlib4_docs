{"name":"Mathlib.Tactic.SuccessIfFailWithMsg","instances":[],"imports":["Init","Lean","Std.Util.TermUnsafe"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SuccessIfFailWithMsg.lean#L30-L47","name":"Mathlib.Tactic.successIfFailWithMessage","kind":"def","docLink":"./Mathlib/Tactic/SuccessIfFailWithMsg.html#Mathlib.Tactic.successIfFailWithMessage","doc":"Evaluates `tacs` and succeeds only if `tacs` both fails and throws an error equal (as a string)\nto `msg`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Tactic/SuccessIfFailWithMsg.lean#L22-L26","name":"Mathlib.Tactic.successIfFailWithMsg","kind":"def","docLink":"./Mathlib/Tactic/SuccessIfFailWithMsg.html#Mathlib.Tactic.successIfFailWithMsg","doc":"`success_if_fail_with_msg msg tacs` runs `tacs` and succeeds only if they fail with the message\n`msg`.\n\n`msg` can be any term that evaluates to an explicit `String`. "}]}