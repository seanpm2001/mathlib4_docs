{"name":"Mathlib.Combinatorics.SimpleGraph.Acyclic","instances":[],"imports":["Init","Mathlib.Combinatorics.SimpleGraph.Connectivity"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L132-L152","name":"SimpleGraph.isTree_iff_existsUnique_path","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.isTree_iff_existsUnique_path","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L128-L129","name":"SimpleGraph.isAcyclic_iff_path_unique","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.isAcyclic_iff_path_unique","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L116-L125","name":"SimpleGraph.isAcyclic_of_path_unique","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.isAcyclic_of_path_unique","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L86-L113","name":"SimpleGraph.IsAcyclic.path_unique","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsAcyclic.path_unique","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L81-L83","name":"SimpleGraph.isAcyclic_iff_forall_edge_isBridge","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.isAcyclic_iff_forall_edge_isBridge","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L66-L78","name":"SimpleGraph.isAcyclic_iff_forall_adj_isBridge","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.isAcyclic_iff_forall_adj_isBridge","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L61-L61","name":"SimpleGraph.IsTree.IsAcyclic","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsTree.IsAcyclic","doc":"Graph is acyclic. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L59-L59","name":"SimpleGraph.IsTree.isConnected","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsTree.isConnected","doc":"Graph is connected. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L57-L61","name":"SimpleGraph.IsTree","kind":"structure","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsTree","doc":"A *tree* is a connected acyclic graph. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L56-L56","name":"SimpleGraph.IsTree_iff","kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsTree_iff","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L52-L52","name":"SimpleGraph.IsAcyclic","kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsAcyclic","doc":"A graph is *acyclic* (or a *forest*) if it has no cycles. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Combinatorics/SimpleGraph/Acyclic.lean#L1-L1","name":"SimpleGraph.IsTree.mk","kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Acyclic.html#SimpleGraph.IsTree.mk","doc":""}]}