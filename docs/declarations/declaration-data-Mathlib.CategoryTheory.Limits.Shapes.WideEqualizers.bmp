{"name":"Mathlib.CategoryTheory.Limits.Shapes.WideEqualizers","instances":[{"typeNames":["Eq","CategoryTheory.Limits.WalkingParallelFamily"],"name":"CategoryTheory.Limits.instDecidableEqWalkingParallelFamily","className":"Decidable"},{"typeNames":["CategoryTheory.Limits.WalkingParallelFamily"],"name":"CategoryTheory.Limits.instInhabitedWalkingParallelFamily","className":"Inhabited"},{"typeNames":["Eq","CategoryTheory.Limits.WalkingParallelFamily.Hom"],"name":"CategoryTheory.Limits.WalkingParallelFamily.instDecidableEqHom","className":"Decidable"},{"typeNames":["CategoryTheory.Limits.WalkingParallelFamily.Hom","CategoryTheory.Limits.WalkingParallelFamily.zero"],"name":"CategoryTheory.Limits.instInhabitedHomZero","className":"Inhabited"},{"typeNames":["CategoryTheory.Limits.WalkingParallelFamily"],"name":"CategoryTheory.Limits.WalkingParallelFamily.category","className":"CategoryTheory.Category"},{"typeNames":["CategoryTheory.Limits.wideEqualizer","CategoryTheory.Limits.wideEqualizer.ι"],"name":"CategoryTheory.Limits.wideEqualizer.ι_mono","className":"CategoryTheory.Mono"},{"typeNames":["CategoryTheory.Limits.wideCoequalizer","CategoryTheory.Limits.wideCoequalizer.π"],"name":"CategoryTheory.Limits.wideCoequalizer.π_epi","className":"CategoryTheory.Epi"},{"typeNames":[],"name":"CategoryTheory.Limits.hasEqualizers_of_hasWideEqualizers","className":"CategoryTheory.Limits.HasLimitsOfShape"},{"typeNames":[],"name":"CategoryTheory.Limits.hasCoequalizers_of_hasWideCoequalizers","className":"CategoryTheory.Limits.HasColimitsOfShape"}],"imports":["Init","Mathlib.CategoryTheory.Limits.HasLimits","Mathlib.CategoryTheory.Limits.Shapes.Equalizers"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L818-L820","name":"CategoryTheory.Limits.hasCoequalizers_of_hasWideCoequalizers","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.hasCoequalizers_of_hasWideCoequalizers","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L811-L813","name":"CategoryTheory.Limits.hasEqualizers_of_hasWideEqualizers","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.hasEqualizers_of_hasWideEqualizers","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L803-L806","name":"CategoryTheory.Limits.hasWideCoequalizers_of_hasColimit_parallelFamily","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.hasWideCoequalizers_of_hasColimit_parallelFamily","doc":"If `C` has all colimits of diagrams `parallelFamily f`, then it has all wide coequalizers "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L794-L797","name":"CategoryTheory.Limits.hasWideEqualizers_of_hasLimit_parallelFamily","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.hasWideEqualizers_of_hasLimit_parallelFamily","doc":"If `C` has all limits of diagrams `parallelFamily f`, then it has all wide equalizers "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L789-L790","name":"CategoryTheory.Limits.HasWideCoequalizers","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.HasWideCoequalizers","doc":"`HasWideCoequalizers` represents a choice of wide coequalizer for every family of morphisms "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L784-L785","name":"CategoryTheory.Limits.HasWideEqualizers","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.HasWideEqualizers","doc":"`HasWideEqualizers` represents a choice of wide equalizer for every family of morphisms "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L772-L774","name":"CategoryTheory.Limits.epi_of_isColimit_parallelFamily","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.epi_of_isColimit_parallelFamily","doc":"The wide coequalizer morphism in any colimit cocone is an epimorphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L761-L762","name":"CategoryTheory.Limits.wideCoequalizer.π_epi","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideCoequalizer.π_epi","doc":"A wide coequalizer morphism is an epimorphism "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L755-L757","name":"CategoryTheory.Limits.wideCoequalizer.hom_ext","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideCoequalizer.hom_ext","doc":"Two maps from a wide coequalizer are equal if they are equal when composed with the wide\ncoequalizer map "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L747-L749","name":"CategoryTheory.Limits.wideCoequalizer.desc'","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideCoequalizer.desc'","doc":"Any morphism `k : Y ⟶ W` satisfying `∀ j₁ j₂, f j₁ ≫ k = f j₂ ≫ k` induces a morphism\n`l : wideCoequalizer f ⟶ W` satisfying `wideCoequalizer.π ≫ g = l`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L739-L742","name":"CategoryTheory.Limits.wideCoequalizer.π_desc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideCoequalizer.π_desc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L738-L738","name":"CategoryTheory.Limits.wideCoequalizer.π_desc_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideCoequalizer.π_desc_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L733-L735","name":"CategoryTheory.Limits.wideCoequalizer.desc","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideCoequalizer.desc","doc":"Any morphism `k : Y ⟶ W` satisfying `∀ j₁ j₂, f j₁ ≫ k = f j₂ ≫ k` factors through the\nwide coequalizer of `f` via `wideCoequalizer.desc : wideCoequalizer f ⟶ W`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L722-L724","name":"CategoryTheory.Limits.wideCoequalizerIsWideCoequalizer","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideCoequalizerIsWideCoequalizer","doc":"The cotrident built from `wideCoequalizer.π f` is colimiting. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L714-L716","name":"CategoryTheory.Limits.wideCoequalizer.condition","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideCoequalizer.condition","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L713-L713","name":"CategoryTheory.Limits.wideCoequalizer.condition_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideCoequalizer.condition_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L706-L708","name":"CategoryTheory.Limits.wideCoequalizer.cotrident_ι_app_one","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideCoequalizer.cotrident_ι_app_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L699-L700","name":"CategoryTheory.Limits.wideCoequalizer.cotrident_π","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideCoequalizer.cotrident_π","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L692-L693","name":"CategoryTheory.Limits.wideCoequalizer.cotrident","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideCoequalizer.cotrident","doc":"An arbitrary choice of coequalizer cocone for a parallel family `f`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L686-L687","name":"CategoryTheory.Limits.wideCoequalizer.π","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideCoequalizer.π","doc":"If a wideCoequalizer of `f` exists, we can access the corresponding projection by\nsaying `wideCoequalizer.π f`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L680-L681","name":"CategoryTheory.Limits.wideCoequalizer","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideCoequalizer","doc":"If a wide coequalizer of `f`, we can access an arbitrary choice of such by\nsaying `wideCoequalizer f`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L672-L673","name":"CategoryTheory.Limits.HasWideCoequalizer","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.HasWideCoequalizer","doc":"`HasWideCoequalizer f g` represents a particular choice of colimiting cocone\nfor the parallel family of morphisms `f`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L658-L660","name":"CategoryTheory.Limits.mono_of_isLimit_parallelFamily","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.mono_of_isLimit_parallelFamily","doc":"The wide equalizer morphism in any limit cone is a monomorphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L647-L648","name":"CategoryTheory.Limits.wideEqualizer.ι_mono","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideEqualizer.ι_mono","doc":"A wide equalizer morphism is a monomorphism "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L641-L643","name":"CategoryTheory.Limits.wideEqualizer.hom_ext","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideEqualizer.hom_ext","doc":"Two maps into a wide equalizer are equal if they are are equal when composed with the wide\nequalizer map. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L633-L635","name":"CategoryTheory.Limits.wideEqualizer.lift'","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideEqualizer.lift'","doc":"A morphism `k : W ⟶ X` satisfying `∀ j₁ j₂, k ≫ f j₁ = k ≫ f j₂` induces a morphism\n`l : W ⟶ wideEqualizer f` satisfying `l ≫ wideEqualizer.ι f = k`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L625-L628","name":"CategoryTheory.Limits.wideEqualizer.lift_ι","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideEqualizer.lift_ι","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L624-L624","name":"CategoryTheory.Limits.wideEqualizer.lift_ι_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideEqualizer.lift_ι_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L619-L621","name":"CategoryTheory.Limits.wideEqualizer.lift","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideEqualizer.lift","doc":"A morphism `k : W ⟶ X` satisfying `∀ j₁ j₂, k ≫ f j₁ = k ≫ f j₂` factors through the\nwide equalizer of `f` via `wideEqualizer.lift : W ⟶ wideEqualizer f`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L608-L610","name":"CategoryTheory.Limits.wideEqualizerIsWideEqualizer","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideEqualizerIsWideEqualizer","doc":"The wideEqualizer built from `wideEqualizer.ι f` is limiting. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L603-L604","name":"CategoryTheory.Limits.wideEqualizer.condition","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideEqualizer.condition","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L602-L602","name":"CategoryTheory.Limits.wideEqualizer.condition_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideEqualizer.condition_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L595-L597","name":"CategoryTheory.Limits.wideEqualizer.trident_π_app_zero","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideEqualizer.trident_π_app_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L590-L591","name":"CategoryTheory.Limits.wideEqualizer.trident_ι","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideEqualizer.trident_ι","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L585-L586","name":"CategoryTheory.Limits.wideEqualizer.trident","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideEqualizer.trident","doc":"A wide equalizer cone for a parallel family `f`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L579-L580","name":"CategoryTheory.Limits.wideEqualizer.ι","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideEqualizer.ι","doc":"If a wide equalizer of `f` exists, we can access the inclusion `wideEqualizer f ⟶ X` by\nsaying `wideEqualizer.ι f`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L573-L574","name":"CategoryTheory.Limits.wideEqualizer","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.wideEqualizer","doc":"If a wide equalizer of `f` exists, we can access an arbitrary choice of such by\nsaying `wideEqualizer f`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L565-L566","name":"CategoryTheory.Limits.HasWideEqualizer","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.HasWideEqualizer","doc":"`HasWideEqualizer f` represents a particular choice of limiting cone for the parallel family of\nmorphisms `f`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L551-L554","name":"CategoryTheory.Limits.Cotrident.ext","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.ext","doc":"To construct an isomorphism between cotridents,\nit suffices to give an isomorphism between the cocone points\nand check that it commutes with the `π` morphisms.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L538-L544","name":"CategoryTheory.Limits.Cotrident.mkHom","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.mkHom","doc":"Helper function for constructing morphisms between coequalizer cotridents.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L537-L537","name":"CategoryTheory.Limits.Cotrident.mkHom_Hom","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.mkHom_Hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L529-L532","name":"CategoryTheory.Limits.Trident.ext","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.ext","doc":"To construct an isomorphism between tridents,\nit suffices to give an isomorphism between the cone points\nand check that it commutes with the `ι` morphisms.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L528-L528","name":"CategoryTheory.Limits.Trident.ext_inv","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.ext_inv","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L528-L528","name":"CategoryTheory.Limits.Trident.ext_hom","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.ext_hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L515-L521","name":"CategoryTheory.Limits.Trident.mkHom","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.mkHom","doc":"Helper function for constructing morphisms between wide equalizer tridents.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L514-L514","name":"CategoryTheory.Limits.Trident.mkHom_Hom","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.mkHom_Hom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L507-L509","name":"CategoryTheory.Limits.Cotrident.ofCocone_ι","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.ofCocone_ι","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L501-L503","name":"CategoryTheory.Limits.Trident.ofCone_π","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.ofCone_π","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L492-L497","name":"CategoryTheory.Limits.Cotrident.ofCocone","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.ofCocone","doc":"Given `F : WalkingParallelFamily ⥤ C`, which is really the same as\n`parallelFamily (F.map left) (F.map right)` and a cocone on `F`, we get a cotrident on\n`fun j ↦ F.map (line j)`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L481-L486","name":"CategoryTheory.Limits.Trident.ofCone","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.ofCone","doc":"Given `F : WalkingParallelFamily ⥤ C`, which is really the same as\n`parallelFamily (fun j ↦ F.map (line j))` and a cone on `F`, we get a trident on\n`fun j ↦ F.map (line j)`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L472-L475","name":"CategoryTheory.Limits.Cocone.ofCotrident_ι","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cocone.ofCotrident_ι","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L466-L468","name":"CategoryTheory.Limits.Cone.ofTrident_π","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cone.ofTrident_π","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L457-L462","name":"CategoryTheory.Limits.Cocone.ofCotrident","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cocone.ofCotrident","doc":"This is a helper construction that can be useful when verifying that a category has all\ncoequalizers. Given `F : WalkingParallelFamily ⥤ C`, which is really the same as\n`parallelFamily (fun j ↦ F.map (line j))`, and a cotrident on `fun j ↦ F.map (line j)` we get a\ncocone on `F`.\n\nIf you're thinking about using this, have a look at\n`hasWideCoequalizers_of_hasColimit_parallelFamily`, which you may find to be an easier way\nof achieving your goal. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L441-L446","name":"CategoryTheory.Limits.Cone.ofTrident","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cone.ofTrident","doc":"This is a helper construction that can be useful when verifying that a category has certain wide\nequalizers. Given `F : WalkingParallelFamily ⥤ C`, which is really the same as\n`parallelFamily (λ j, F.map (line j))`, and a trident on `λ j, F.map (line j)`, we get a cone\non `F`.\n\nIf you're thinking about using this, have a look at\n`hasWideEqualizers_of_hasLimit_parallelFamily`, which you may find to be an easier way of\nachieving your goal. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L424-L428","name":"CategoryTheory.Limits.Cotrident.IsColimit.homIso_natural","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.IsColimit.homIso_natural","doc":"The bijection of `Cotrident.IsColimit.homIso` is natural in `Z`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L413-L418","name":"CategoryTheory.Limits.Cotrident.IsColimit.homIso","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.IsColimit.homIso","doc":"Given a colimit cocone for the family `f : J → (X ⟶ Y)`, for any `Z`, morphisms from the cocone\npoint to `Z` are in bijection with morphisms `h : Z ⟶ X` such that\n`∀ j₁ j₂, f j₁ ≫ h = f j₂ ≫ h`.  Further, this bijection is natural in `Z`: see\n`Cotrident.IsColimit.homIso_natural`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L412-L412","name":"CategoryTheory.Limits.Cotrident.IsColimit.homIso_apply_coe","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.IsColimit.homIso_apply_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L412-L412","name":"CategoryTheory.Limits.Cotrident.IsColimit.homIso_symm_apply","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.IsColimit.homIso_symm_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L398-L402","name":"CategoryTheory.Limits.Trident.IsLimit.homIso_natural","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.IsLimit.homIso_natural","doc":"The bijection of `Trident.IsLimit.homIso` is natural in `Z`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L389-L394","name":"CategoryTheory.Limits.Trident.IsLimit.homIso","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.IsLimit.homIso","doc":"Given a limit cone for the family `f : J → (X ⟶ Y)`, for any `Z`, morphisms from `Z` to its point\nare in bijection with morphisms `h : Z ⟶ X` such that `∀ j₁ j₂, h ≫ f j₁ = h ≫ f j₂`.\nFurther, this bijection is natural in `Z`: see `Trident.Limits.homIso_natural`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L388-L388","name":"CategoryTheory.Limits.Trident.IsLimit.homIso_apply_coe","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.IsLimit.homIso_apply_coe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L388-L388","name":"CategoryTheory.Limits.Trident.IsLimit.homIso_symm_apply","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.IsLimit.homIso_symm_apply","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L375-L380","name":"CategoryTheory.Limits.Cotrident.IsColimit.mk'","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.IsColimit.mk'","doc":"This is another convenient method to verify that a cotrident is a colimit cocone. It\nonly asks for a proof of facts that carry any mathematical content, and allows access to the\nsame `s` for all parts. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L359-L369","name":"CategoryTheory.Limits.Cotrident.IsColimit.mk","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.IsColimit.mk","doc":"This is a slightly more convenient method to verify that a cotrident is a colimit cocone. It\nonly asks for a proof of facts that carry any mathematical content "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L350-L354","name":"CategoryTheory.Limits.Trident.IsLimit.mk'","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.IsLimit.mk'","doc":"This is another convenient method to verify that a trident is a limit cone. It\nonly asks for a proof of facts that carry any mathematical content, and allows access to the\nsame `s` for all parts. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L334-L344","name":"CategoryTheory.Limits.Trident.IsLimit.mk","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.IsLimit.mk","doc":"This is a slightly more convenient method to verify that a trident is a limit cone. It\nonly asks for a proof of facts that carry any mathematical content "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L325-L327","name":"CategoryTheory.Limits.Cotrident.IsColimit.desc'","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.IsColimit.desc'","doc":"If `s` is a colimit cotrident over `f`, then a morphism `k : Y ⟶ W` satisfying\n`∀ j₁ j₂, f j₁ ≫ k = f j₂ ≫ k` induces a morphism `l : s.X ⟶ W` such that\n`Cotrident.π s ≫ l = k`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L317-L319","name":"CategoryTheory.Limits.Trident.IsLimit.lift'","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.IsLimit.lift'","doc":"If `s` is a limit trident over `f`, then a morphism `k : W ⟶ X` satisfying\n`∀ j₁ j₂, k ≫ f j₁ = k ≫ f j₂` induces a morphism `l : W ⟶ s.X` such that\n`l ≫ Trident.ι s = k`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L307-L309","name":"CategoryTheory.Limits.Cotrident.IsColimit.hom_ext","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.IsColimit.hom_ext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L302-L304","name":"CategoryTheory.Limits.Trident.IsLimit.hom_ext","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.IsLimit.hom_ext","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L294-L297","name":"CategoryTheory.Limits.Cotrident.coequalizer_ext","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.coequalizer_ext","doc":"To check whether two maps are coequalized by both maps of a cotrident, it suffices to check it\nfor the second map "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L286-L289","name":"CategoryTheory.Limits.Trident.equalizer_ext","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.equalizer_ext","doc":"To check whether two maps are equalized by both maps of a trident, it suffices to check it for\nthe first map "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L280-L281","name":"CategoryTheory.Limits.Cotrident.condition","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.condition","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L279-L279","name":"CategoryTheory.Limits.Cotrident.condition_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.condition_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L275-L276","name":"CategoryTheory.Limits.Trident.condition","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.condition","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L274-L274","name":"CategoryTheory.Limits.Trident.condition_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.condition_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L269-L271","name":"CategoryTheory.Limits.Cotrident.π_ofπ","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.π_ofπ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L264-L266","name":"CategoryTheory.Limits.Trident.ι_ofι","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.ι_ofι","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L251-L260","name":"CategoryTheory.Limits.Cotrident.ofπ","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.ofπ","doc":"A cotrident on `f : J → (X ⟶ Y)` is determined by the morphism `π : Y ⟶ P` satisfying\n`∀ j₁ j₂, f j₁ ≫ π = f j₂ ≫ π`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L250-L250","name":"CategoryTheory.Limits.Cotrident.ofπ_pt","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.ofπ_pt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L250-L250","name":"CategoryTheory.Limits.Cotrident.ofπ_ι_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.ofπ_ι_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L235-L244","name":"CategoryTheory.Limits.Trident.ofι","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.ofι","doc":"A trident on `f : J → (X ⟶ Y)` is determined by the morphism `ι : P ⟶ X` satisfying\n`∀ j₁ j₂, ι ≫ f j₁ = ι ≫ f j₂`.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L234-L234","name":"CategoryTheory.Limits.Trident.ofι_pt","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.ofι_pt","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L234-L234","name":"CategoryTheory.Limits.Trident.ofι_π_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.ofι_π_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L227-L228","name":"CategoryTheory.Limits.Cotrident.app_one","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.app_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L226-L226","name":"CategoryTheory.Limits.Cotrident.app_one_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.app_one_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L222-L223","name":"CategoryTheory.Limits.Trident.app_zero","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.app_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L221-L221","name":"CategoryTheory.Limits.Trident.app_zero_assoc","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.app_zero_assoc","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L217-L218","name":"CategoryTheory.Limits.Cotrident.π_eq_app_one","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.π_eq_app_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L212-L213","name":"CategoryTheory.Limits.Trident.ι_eq_app_zero","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.ι_eq_app_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L207-L208","name":"CategoryTheory.Limits.Cotrident.π","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident.π","doc":"A cotrident `t` on the parallel family `f : J → (X ⟶ Y)` consists of two morphisms\n`t.ι.app zero : X ⟶ t.X` and `t.ι.app one : Y ⟶ t.X`. Of these, only the second one is\ninteresting, and we give it the shorter name `Cotrident.π t`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L200-L201","name":"CategoryTheory.Limits.Trident.ι","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident.ι","doc":"A trident `t` on the parallel family `f : J → (X ⟶ Y)` consists of two morphisms\n`t.π.app zero : t.X ⟶ X` and `t.π.app one : t.X ⟶ Y`. Of these, only the first one is\ninteresting, and we give it the shorter name `Trident.ι t`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L191-L192","name":"CategoryTheory.Limits.Cotrident","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Cotrident","doc":"A cotrident on `f` and `g` is just a `Cocone (parallelFamily f)`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L186-L187","name":"CategoryTheory.Limits.Trident","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.Trident","doc":"A trident on `f` is just a `Cone (parallelFamily f)`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L171-L180","name":"CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair","doc":"`WalkingParallelPair` as a category is equivalent to a special case of\n`WalkingParallelFamily`.  "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L170-L170","name":"CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair_counitIso_hom_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair_counitIso_hom_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L170-L170","name":"CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair_functor_obj","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair_functor_obj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L170-L170","name":"CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair_unitIso_inv_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair_unitIso_inv_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L170-L170","name":"CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair_unitIso_hom_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair_unitIso_hom_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L170-L170","name":"CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair_inverse_obj","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair_inverse_obj","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L170-L170","name":"CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair_functor_map","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair_functor_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L170-L170","name":"CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair_counitIso_inv_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair_counitIso_inv_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L170-L170","name":"CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair_inverse_map","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.walkingParallelFamilyEquivWalkingParallelPair_inverse_map","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L160-L163","name":"CategoryTheory.Limits.diagramIsoParallelFamily","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.diagramIsoParallelFamily","doc":"Every functor indexing a wide (co)equalizer is naturally isomorphic (actually, equal) to a\n`parallelFamily` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L159-L159","name":"CategoryTheory.Limits.diagramIsoParallelFamily_hom_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.diagramIsoParallelFamily_hom_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L159-L159","name":"CategoryTheory.Limits.diagramIsoParallelFamily_inv_app","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.diagramIsoParallelFamily_inv_app","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L151-L152","name":"CategoryTheory.Limits.parallelFamily_map_left","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.parallelFamily_map_left","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L146-L147","name":"CategoryTheory.Limits.parallelFamily_obj_one","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.parallelFamily_obj_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L141-L142","name":"CategoryTheory.Limits.parallelFamily_obj_zero","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.parallelFamily_obj_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L129-L137","name":"CategoryTheory.Limits.parallelFamily","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.parallelFamily","doc":"`parallelFamily f` is the diagram in `C` consisting of the given family of morphisms, each with\ncommon domain and codomain.\n"},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L115-L117","name":"CategoryTheory.Limits.WalkingParallelFamily.hom_id","kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.WalkingParallelFamily.hom_id","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L104-L109","name":"CategoryTheory.Limits.WalkingParallelFamily.category","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.WalkingParallelFamily.category","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L93-L97","name":"CategoryTheory.Limits.WalkingParallelFamily.Hom.comp","kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.WalkingParallelFamily.Hom.comp","doc":"Composition of morphisms in the indexing diagram for wide (co)equalizers. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L88-L88","name":"CategoryTheory.Limits.instInhabitedHomZero","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.instInhabitedHomZero","doc":"Satisfying the inhabited linter "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L82-L82","name":"CategoryTheory.Limits.WalkingParallelFamily.instDecidableEqHom","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.WalkingParallelFamily.instDecidableEqHom","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L81-L81","name":"CategoryTheory.Limits.WalkingParallelFamily.Hom.line","kind":"ctor","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.WalkingParallelFamily.Hom.line","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L80-L80","name":"CategoryTheory.Limits.WalkingParallelFamily.Hom.id","kind":"ctor","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.WalkingParallelFamily.Hom.id","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L78-L82","name":"CategoryTheory.Limits.WalkingParallelFamily.Hom","kind":"inductive","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.WalkingParallelFamily.Hom","doc":"The type family of morphisms for the diagram indexing a wide (co)equalizer. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L74-L75","name":"CategoryTheory.Limits.instInhabitedWalkingParallelFamily","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.instInhabitedWalkingParallelFamily","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L68-L72","name":"CategoryTheory.Limits.instDecidableEqWalkingParallelFamily","kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.instDecidableEqWalkingParallelFamily","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L63-L63","name":"CategoryTheory.Limits.WalkingParallelFamily.one","kind":"ctor","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.WalkingParallelFamily.one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L62-L62","name":"CategoryTheory.Limits.WalkingParallelFamily.zero","kind":"ctor","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.WalkingParallelFamily.zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.lean#L61-L63","name":"CategoryTheory.Limits.WalkingParallelFamily","kind":"inductive","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.WalkingParallelFamily","doc":"The type of objects for the diagram indexing a wide (co)equalizer. "}]}