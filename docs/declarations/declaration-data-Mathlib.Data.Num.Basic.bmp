{"name":"Mathlib.Data.Num.Basic","instances":[{"typeNames":["Eq","PosNum"],"name":"instDecidableEqPosNum","className":"Decidable"},{"typeNames":["PosNum"],"name":"instOnePosNum","className":"One"},{"typeNames":["PosNum"],"name":"instInhabitedPosNum","className":"Inhabited"},{"typeNames":["Eq","Num"],"name":"instDecidableEqNum","className":"Decidable"},{"typeNames":["Num"],"name":"instZeroNum","className":"Zero"},{"typeNames":["Num"],"name":"instOneNum","className":"One"},{"typeNames":["Num"],"name":"instInhabitedNum","className":"Inhabited"},{"typeNames":["Eq","ZNum"],"name":"instDecidableEqZNum","className":"Decidable"},{"typeNames":["ZNum"],"name":"instZeroZNum","className":"Zero"},{"typeNames":["ZNum"],"name":"instOneZNum","className":"One"},{"typeNames":["ZNum"],"name":"instInhabitedZNum","className":"Inhabited"},{"typeNames":["PosNum"],"name":"PosNum.instAddPosNum","className":"Add"},{"typeNames":["PosNum"],"name":"PosNum.instMulPosNum","className":"Mul"},{"typeNames":["PosNum","HAdd.hAdd","Nat","instHAdd","instAddNat","OfNat.ofNat","instOfNatNat"],"name":"PosNum.instOfNatPosNumHAddNatInstHAddInstAddNatOfNat","className":"OfNat"},{"typeNames":["PosNum"],"name":"PosNum.instLTPosNum","className":"LT"},{"typeNames":["PosNum"],"name":"PosNum.instLEPosNum","className":"LE"},{"typeNames":["PosNum","LT.lt","PosNum.instLTPosNum"],"name":"PosNum.decidableLT","className":"Decidable"},{"typeNames":["PosNum","LE.le","PosNum.instLEPosNum"],"name":"PosNum.decidableLE","className":"Decidable"},{"typeNames":["PosNum"],"name":"posNumCoe","className":"CoeHTCT"},{"typeNames":["Num"],"name":"numNatCoe","className":"CoeHTCT"},{"typeNames":["PosNum"],"name":"instReprPosNum","className":"Repr"},{"typeNames":["Num"],"name":"instReprNum","className":"Repr"},{"typeNames":["Num"],"name":"Num.instAddNum","className":"Add"},{"typeNames":["Num"],"name":"Num.instMulNum","className":"Mul"},{"typeNames":["Num"],"name":"Num.instLTNum","className":"LT"},{"typeNames":["Num"],"name":"Num.instLENum","className":"LE"},{"typeNames":["Num","LT.lt","Num.instLTNum"],"name":"Num.decidableLT","className":"Decidable"},{"typeNames":["Num","LE.le","Num.instLENum"],"name":"Num.decidableLE","className":"Decidable"},{"typeNames":["ZNum"],"name":"ZNum.instNegZNum","className":"Neg"},{"typeNames":["PosNum"],"name":"PosNum.instSubPosNum","className":"Sub"},{"typeNames":["Num"],"name":"Num.instSubNum","className":"Sub"},{"typeNames":["ZNum"],"name":"ZNum.instAddZNum","className":"Add"},{"typeNames":["ZNum"],"name":"ZNum.instMulZNum","className":"Mul"},{"typeNames":["ZNum"],"name":"ZNum.instLTZNum","className":"LT"},{"typeNames":["ZNum"],"name":"ZNum.instLEZNum","className":"LE"},{"typeNames":["ZNum","LT.lt","ZNum.instLTZNum"],"name":"ZNum.decidableLT","className":"Decidable"},{"typeNames":["ZNum","LE.le","ZNum.instLEZNum"],"name":"ZNum.decidableLE","className":"Decidable"},{"typeNames":["Num"],"name":"Num.instDivNum","className":"Div"},{"typeNames":["Num"],"name":"Num.instModNum","className":"Mod"},{"typeNames":["ZNum"],"name":"ZNum.instDivZNum","className":"Div"},{"typeNames":["ZNum"],"name":"ZNum.instModZNum","className":"Mod"},{"typeNames":["ZNum"],"name":"znumCoe","className":"CoeHTCT"},{"typeNames":["ZNum"],"name":"instReprZNum","className":"Repr"}],"imports":["Init","Mathlib.Mathport.Rename","Mathlib.Init.Data.Nat.Bitwise","Mathlib.Init.Data.Int.Basic","Lean.Linter.Deprecated"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L689-L690","name":"instReprZNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instReprZNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L685-L686","name":"znumCoe","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#znumCoe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L678-L681","name":"castZNum","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#castZNum","doc":"`castZNum` casts a `ZNum` into any type which has `0`, `1`, `+` and `neg` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L666-L667","name":"ZNum.gcd","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.gcd","doc":"Greatest Common Divisor (GCD) of two `ZNum`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L662-L663","name":"ZNum.instModZNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.instModZNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L659-L660","name":"ZNum.instDivZNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.instDivZNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L653-L656","name":"ZNum.mod","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.mod","doc":"Modulus of `ZNum`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L643-L649","name":"ZNum.div","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.div","doc":"Division of `ZNum`, where `x / 0 = 0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L634-L635","name":"Num.gcd","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.gcd","doc":"Greatest Common Divisor (GCD) of two `Num`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L627-L630","name":"Num.gcdAux","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.gcdAux","doc":"Auxiliary definition for `Num.gcd`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L623-L624","name":"Num.instModNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.instModNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L620-L621","name":"Num.instDivNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.instDivNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L614-L617","name":"Num.mod","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.mod","doc":"Modulus of `Num`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L607-L610","name":"Num.div","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.div","doc":"Division of `Num`s, where `x / 0 = 0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L586-L587","name":"PosNum.mod'","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.mod'","doc":"Modulus of `PosNum`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L581-L582","name":"PosNum.div'","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.div'","doc":"Division of `PosNum`, "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L570-L577","name":"PosNum.divMod","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.divMod","doc":"`divMod x y = (y / x, y % x)`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L563-L566","name":"PosNum.divModAux","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.divModAux","doc":"Auxiliary definition for `PosNum.divMod`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L554-L555","name":"ZNum.decidableLE","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.decidableLE","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L550-L551","name":"ZNum.decidableLT","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.decidableLT","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L547-L548","name":"ZNum.instLEZNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.instLEZNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L544-L545","name":"ZNum.instLTZNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.instLTZNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L534-L541","name":"ZNum.cmp","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.cmp","doc":"Ordering on `ZNum`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L528-L529","name":"ZNum.instMulZNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.instMulZNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L519-L525","name":"ZNum.mul","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.mul","doc":"Multiplication of `ZNum`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L515-L516","name":"ZNum.instAddZNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.instAddZNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L506-L512","name":"ZNum.add","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.add","doc":"Addition of `ZNum`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L496-L497","name":"Num.instSubNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.instSubNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L492-L493","name":"Num.sub","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.sub","doc":"Subtraction of two `Num`s, where if `a < b`, `a - b = 0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L487-L488","name":"Num.psub","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.psub","doc":"Subtraction of two `Num`s, producing an `Option Num`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L479-L483","name":"Num.sub'","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.sub'","doc":"Subtraction of two `Num`s, producing a `ZNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L473-L475","name":"Num.ofZNum","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.ofZNum","doc":"Converts a `ZNum` to an `Option Num`, where `ofZNum p = 0` if `p < 0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L466-L469","name":"Num.ofZNum'","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.ofZNum'","doc":"Converts a `ZNum` to an `Option Num`, where `ofZNum' p = none` if `p < 0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L458-L462","name":"Num.div2","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.div2","doc":"Divides a `Num` by `2` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L452-L454","name":"Num.pred","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.pred","doc":"The predecessor of a `Num` as a `Num`, where `pred 0 = 0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L446-L448","name":"Num.ppred","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.ppred","doc":"The predecessor of a `Num` as an `Option Num`, where `ppred 0 = none` "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L438-L439","name":"PosNum.instSubPosNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.instSubPosNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L432-L435","name":"PosNum.sub","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.sub","doc":"Subtraction of `PosNum`s, where if `a < b`, then `a - b = 1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L426-L428","name":"PosNum.ofZNum","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.ofZNum","doc":"Converts a `ZNum` to a `PosNum`, mapping all out of range values to `1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L420-L422","name":"PosNum.ofZNum'","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.ofZNum'","doc":"Converts a `ZNum` to `Option PosNum`, where it is `some` if the `ZNum` was positive and `none`\notherwise. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L409-L415","name":"PosNum.sub'","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.sub'","doc":"Subtraction of two `PosNum`s, producing a `ZNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L397-L399","name":"ZNum.ofInt'","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.ofInt'","doc":"Converts an `Int` to a `ZNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L390-L393","name":"ZNum.bitm1","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.bitm1","doc":"`bitm1 x` appends a `1` to the end of `x`, mapping `x` to `2 * x - 1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L383-L386","name":"ZNum.bit1","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.bit1","doc":"`bit1 x` appends a `1` to the end of `x`, mapping `x` to `2 * x + 1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L376-L379","name":"ZNum.bit0","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.bit0","doc":"`bit0 n` appends a `0` to the end of `n`, where `bit0 n = n0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L369-L372","name":"ZNum.pred","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.pred","doc":"The predecessor of a `ZNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L362-L365","name":"ZNum.succ","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.succ","doc":"The successor of a `ZNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L355-L358","name":"ZNum.abs","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.abs","doc":"The absolute value of a `ZNum` as a `Num`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L351-L352","name":"ZNum.instNegZNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.instNegZNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L345-L348","name":"ZNum.zNeg","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.zNeg","doc":"The negation of a `ZNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L334-L335","name":"Num.ofNat'","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.ofNat'","doc":"Converts a `Nat` to a `Num`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L328-L330","name":"Num.toZNumNeg","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.toZNumNeg","doc":"Converts `x : Num` to `-x : ZNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L322-L324","name":"Num.toZNum","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.toZNum","doc":"Converts a `Num` to a `ZNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L317-L318","name":"Num.decidableLE","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.decidableLE","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L313-L314","name":"Num.decidableLT","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.decidableLT","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L310-L311","name":"Num.instLENum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.instLENum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L307-L308","name":"Num.instLTNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.instLTNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L300-L304","name":"Num.cmp","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.cmp","doc":"Ordering of `Num`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L294-L295","name":"Num.instMulNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.instMulNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L288-L291","name":"Num.mul","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.mul","doc":"Multiplication of two `Num`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L282-L284","name":"Num.natSize","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.natSize","doc":"The number of bits required to represent a `Num`, as a `Nat`. `size 0` is defined to be `0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L276-L278","name":"Num.size","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.size","doc":"The number of bits required to represent a `Num`, as a `Num`. `size 0` is defined to be `0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L271-L272","name":"Num.bit","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.bit","doc":"`bit b n` appends the bit `b` to the end of `n`, where `bit tt x = x1` and `bit ff x = x0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L265-L267","name":"Num.bit1","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.bit1","doc":"`bit1 n` appends a `1` to the end of `n`, where `bit1 n = n1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L259-L261","name":"Num.bit0","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.bit0","doc":"`bit0 n` appends a `0` to the end of `n`, where `bit0 n = n0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L255-L256","name":"Num.instAddNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#Num.instAddNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L249-L252","name":"Num.add","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.add","doc":"Addition of two `Num`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L244-L245","name":"Num.succ","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.succ","doc":"The successor of a `Num` as a `Num`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L238-L240","name":"Num.succ'","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#Num.succ'","doc":"The successor of a `Num` as a `PosNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L228-L229","name":"instReprNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instReprNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L225-L226","name":"instReprPosNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instReprPosNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L219-L220","name":"numNatCoe","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#numNatCoe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L214-L215","name":"posNumCoe","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#posNumCoe","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L208-L210","name":"castNum","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#castNum","doc":"`castNum` casts a `Num` into any type which has `0`, `1` and `+`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L201-L204","name":"castPosNum","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#castPosNum","doc":"`castPosNum` casts a `PosNum` into any type which has `1` and `+`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L187-L188","name":"PosNum.decidableLE","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.decidableLE","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L183-L184","name":"PosNum.decidableLT","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.decidableLT","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L180-L181","name":"PosNum.instLEPosNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.instLEPosNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L177-L178","name":"PosNum.instLTPosNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.instLTPosNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L167-L174","name":"PosNum.cmp","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.cmp","doc":"Ordering of `PosNum`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L161-L162","name":"PosNum.instOfNatPosNumHAddNatInstHAddInstAddNatOfNat","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.instOfNatPosNumHAddNatInstHAddInstAddNatOfNat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L157-L158","name":"PosNum.ofNat","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.ofNat","doc":"`ofNat n` is the `PosNum` corresponding to `n`, except for `ofNat 0 = 1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L151-L153","name":"PosNum.ofNatSucc","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.ofNatSucc","doc":"`ofNatSucc n` is the `PosNum` corresponding to `n + 1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L147-L148","name":"PosNum.instMulPosNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.instMulPosNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L141-L144","name":"PosNum.mul","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.mul","doc":"Multiplication of two `PosNum`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L134-L137","name":"PosNum.natSize","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.natSize","doc":"The number of bits of a `PosNum`, as a `Nat`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L127-L130","name":"PosNum.size","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.size","doc":"The number of bits of a `PosNum`, as a `PosNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L122-L123","name":"PosNum.pred","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.pred","doc":"The predecessor of a `PosNum` as a `PosNum`. This means that `pred 1 = 1`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L115-L118","name":"PosNum.pred'","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.pred'","doc":"The predecessor of a `PosNum` as a `Num`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L111-L112","name":"PosNum.instAddPosNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.instAddPosNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L102-L108","name":"PosNum.add","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.add","doc":"Addition of two `PosNum`s. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L96-L98","name":"PosNum.isOne","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.isOne","doc":"Returns a boolean for whether the `PosNum` is `one`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L89-L92","name":"PosNum.succ","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.succ","doc":"The successor of a `PosNum`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L84-L85","name":"PosNum.bit","kind":"def","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.bit","doc":"`bit b n` appends the bit `b` to the end of `n`, where `bit tt x = x1` and `bit ff x = x0`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L78-L79","name":"instInhabitedZNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instInhabitedZNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L75-L76","name":"instOneZNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instOneZNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L72-L73","name":"instZeroZNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instZeroZNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L68-L68","name":"instDecidableEqZNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instDecidableEqZNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L67-L67","name":"ZNum.neg","kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.neg","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L66-L66","name":"ZNum.pos","kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.pos","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L65-L65","name":"ZNum.zero","kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#ZNum.zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L64-L68","name":"ZNum","kind":"inductive","docLink":"./Mathlib/Data/Num/Basic.html#ZNum","doc":"Representation of integers using trichotomy around zero.\n\n13 = 1101(base 2) = pos (bit1 (bit0 (bit1 one)))\n-13 = -1101(base 2) = neg (bit1 (bit0 (bit1 one))) "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L57-L58","name":"instInhabitedNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instInhabitedNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L54-L55","name":"instOneNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instOneNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L51-L52","name":"instZeroNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instZeroNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L47-L47","name":"instDecidableEqNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instDecidableEqNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L46-L46","name":"Num.pos","kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#Num.pos","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L45-L45","name":"Num.zero","kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#Num.zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L44-L47","name":"Num","kind":"inductive","docLink":"./Mathlib/Data/Num/Basic.html#Num","doc":"The type of nonnegative binary numbers, using `PosNum`.\n\n13 = 1101(base 2) = pos (bit1 (bit0 (bit1 one))) "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L38-L39","name":"instInhabitedPosNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instInhabitedPosNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L35-L36","name":"instOnePosNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instOnePosNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L32-L32","name":"instDecidableEqPosNum","kind":"instance","docLink":"./Mathlib/Data/Num/Basic.html#instDecidableEqPosNum","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L31-L31","name":"PosNum.bit0","kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.bit0","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L30-L30","name":"PosNum.bit1","kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.bit1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L29-L29","name":"PosNum.one","kind":"ctor","docLink":"./Mathlib/Data/Num/Basic.html#PosNum.one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Num/Basic.lean#L28-L32","name":"PosNum","kind":"inductive","docLink":"./Mathlib/Data/Num/Basic.html#PosNum","doc":"The type of positive binary numbers.\n\n13 = 1101(base 2) = bit1 (bit0 (bit1 one)) "}]}