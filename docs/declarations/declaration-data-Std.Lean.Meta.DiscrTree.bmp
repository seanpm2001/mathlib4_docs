{"name":"Std.Lean.Meta.DiscrTree","instances":[{"typeNames":["Lean.Meta.DiscrTree.Key"],"name":"Lean.Meta.DiscrTree.Key.instOrdKey","className":"Ord"}],"imports":["Init","Lean.Meta.DiscrTree","Std.Data.Array.Merge","Std.Data.Ord","Std.Lean.Meta.Expr","Std.Lean.PersistentHashMap"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/DiscrTree.lean#L162-L164","name":"Lean.Meta.DiscrTree.mergePreservingDuplicates","kind":"def","docLink":"./Std/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.mergePreservingDuplicates","doc":"Merge two `DiscrTree`s. Duplicate values are preserved.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/DiscrTree.lean#L155-L156","name":"Lean.Meta.DiscrTree.size","kind":"def","docLink":"./Std/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.size","doc":"Get the number of values stored in a `DiscrTree`. O(n) in the size of the tree.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/DiscrTree.lean#L148-L149","name":"Lean.Meta.DiscrTree.toArray","kind":"def","docLink":"./Std/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.toArray","doc":"Extract the keys and values stored in a `DiscrTree`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/DiscrTree.lean#L141-L142","name":"Lean.Meta.DiscrTree.values","kind":"def","docLink":"./Std/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.values","doc":"Extract the values stored in a `DiscrTree`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/DiscrTree.lean#L134-L135","name":"Lean.Meta.DiscrTree.foldValues","kind":"def","docLink":"./Std/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.foldValues","doc":"Fold over the values stored in a `DiscrTree`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/DiscrTree.lean#L126-L128","name":"Lean.Meta.DiscrTree.foldValuesM","kind":"def","docLink":"./Std/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.foldValuesM","doc":"Monadically fold over the values stored in a `DiscrTree`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/DiscrTree.lean#L119-L120","name":"Lean.Meta.DiscrTree.fold","kind":"def","docLink":"./Std/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.fold","doc":"Fold over the keys and values stored in a `DiscrTree`\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/DiscrTree.lean#L111-L113","name":"Lean.Meta.DiscrTree.foldM","kind":"def","docLink":"./Std/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.foldM","doc":"Monadically fold over the keys and values stored in a `DiscrTree`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/DiscrTree.lean#L98-L102","name":"Lean.Meta.DiscrTree.Trie.mergePreservingDuplicates.mergeChildren","kind":"opaque","docLink":"./Std/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.Trie.mergePreservingDuplicates.mergeChildren","doc":"Auxiliary definition for `mergePreservingDuplicates`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/DiscrTree.lean#L93-L102","name":"Lean.Meta.DiscrTree.Trie.mergePreservingDuplicates","kind":"opaque","docLink":"./Std/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.Trie.mergePreservingDuplicates","doc":"Merge two `Trie`s. Duplicate values are preserved.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/DiscrTree.lean#L86-L88","name":"Lean.Meta.DiscrTree.Trie.size","kind":"opaque","docLink":"./Std/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.Trie.size","doc":"The number of values stored in a `Trie`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/DiscrTree.lean#L80-L81","name":"Lean.Meta.DiscrTree.Trie.foldValues","kind":"def","docLink":"./Std/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.Trie.foldValues","doc":"Fold the values stored in a `Trie`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/DiscrTree.lean#L74-L74","name":"Lean.Meta.DiscrTree.Trie.foldValuesM","kind":"opaque","docLink":"./Std/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.Trie.foldValuesM","doc":"Monadically fold the values stored in a `Trie`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/DiscrTree.lean#L58-L60","name":"Lean.Meta.DiscrTree.Trie.fold","kind":"def","docLink":"./Std/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.Trie.fold","doc":"Fold the keys and values stored in a `Trie`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/DiscrTree.lean#L50-L52","name":"Lean.Meta.DiscrTree.Trie.foldM","kind":"opaque","docLink":"./Std/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.Trie.foldM","doc":"Monadically fold the keys and values stored in a `Trie`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/DiscrTree.lean#L29-L30","name":"Lean.Meta.DiscrTree.Key.instOrdKey","kind":"instance","docLink":"./Std/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.Key.instOrdKey","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Lean/Meta/DiscrTree.lean#L21-L27","name":"Lean.Meta.DiscrTree.Key.cmp","kind":"def","docLink":"./Std/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.Key.cmp","doc":"Compare two `Key`s. The ordering is total but otherwise arbitrary. (It uses\n`Name.quickCmp` internally.)\n"}]}