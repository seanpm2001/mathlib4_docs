{"name":"Mathlib.Data.Nat.Cast.Defs","instances":[{"typeNames":["HAdd.hAdd","Nat","instHAdd","instAddNat","OfNat.ofNat","instOfNatNat"],"name":"instAtLeastTwoHAddNatInstHAddInstAddNatOfNat","className":"Nat.AtLeastTwo"},{"typeNames":[],"name":"instOfNat","className":"OfNat"}],"imports":["Init","Mathlib.Algebra.Group.Defs","Mathlib.Algebra.NeZero"],"declarations":[{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L238-L242","name":"three_add_one_eq_four","kind":"theorem","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#three_add_one_eq_four","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L233-L236","name":"two_add_one_eq_three","kind":"theorem","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#two_add_one_eq_three","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L227-L230","name":"one_add_one_eq_two","kind":"theorem","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#one_add_one_eq_two","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L221-L222","name":"NeZero.pos_of_neZero_natCast","kind":"theorem","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#NeZero.pos_of_neZero_natCast","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L217-L218","name":"NeZero.of_neZero_natCast","kind":"theorem","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#NeZero.of_neZero_natCast","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L213-L214","name":"NeZero.natCast_ne","kind":"theorem","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#NeZero.natCast_ne","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L201-L208","name":"AddMonoidWithOne.binary","kind":"def","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#AddMonoidWithOne.binary","doc":"`AddMonoidWithOne` implementation using binary recursion. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L195-L196","name":"AddMonoidWithOne.unary","kind":"def","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#AddMonoidWithOne.unary","doc":"`AddMonoidWithOne` implementation using unary recursion. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L186-L186","name":"Nat.cast_two","kind":"theorem","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#Nat.cast_two","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L180-L181","name":"Nat.cast_bit1","kind":"theorem","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#Nat.cast_bit1","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L175-L176","name":"Nat.cast_bit0","kind":"theorem","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#Nat.cast_bit0","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L153-L168","name":"Nat.binCast_eq","kind":"theorem","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#Nat.binCast_eq","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L144-L149","name":"Nat.binCast","kind":"def","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#Nat.binCast","doc":"Computationally friendlier cast than `Nat.unaryCast`, using binary representation. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L139-L140","name":"Nat.cast_add","kind":"theorem","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#Nat.cast_add","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L134-L135","name":"Nat.cast_one","kind":"theorem","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#Nat.cast_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L124-L126","name":"Nat.cast_ite","kind":"theorem","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#Nat.cast_ite","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L119-L120","name":"Nat.cast_add_one","kind":"theorem","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#Nat.cast_add_one","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L115-L116","name":"Nat.cast_succ","kind":"theorem","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#Nat.cast_succ","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L107-L108","name":"Nat.cast_zero","kind":"theorem","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#Nat.cast_zero","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L82-L82","name":"AddCommMonoidWithOne.mk","kind":"ctor","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#AddCommMonoidWithOne.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L82-L82","name":"AddCommMonoidWithOne","kind":"class","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#AddCommMonoidWithOne","doc":"An `AddCommMonoidWithOne` is an `AddMonoidWithOne` satisfying `a + b = b + a`.  "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L73-L73","name":"AddMonoidWithOne.natCast_succ","kind":"def","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#AddMonoidWithOne.natCast_succ","doc":"The canonical map `ℕ → R` is a homomorphism. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L71-L71","name":"AddMonoidWithOne.natCast_zero","kind":"def","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#AddMonoidWithOne.natCast_zero","doc":"The canonical map `ℕ → R` sends `0 : ℕ` to `0 : R`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L68-L68","name":"AddMonoidWithOne.mk","kind":"ctor","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#AddMonoidWithOne.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L68-L73","name":"AddMonoidWithOne","kind":"class","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#AddMonoidWithOne","doc":"An `AddMonoidWithOne` is an `AddMonoid` with a `1`.\nIt also contains data for the unique homomorphism `ℕ → R`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L62-L62","name":"Nat.cast_eq_ofNat","kind":"theorem","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#Nat.cast_eq_ofNat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L59-L60","name":"Nat.cast_ofNat","kind":"theorem","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#Nat.cast_ofNat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L56-L57","name":"instOfNat","kind":"instance","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#instOfNat","doc":"Recognize numeric literals which are at least `2` as terms of `R` via `Nat.cast`. This\ninstance is what makes things like `37 : R` type check.  Note that `0` and `1` are not needed\nbecause they are recognized as terms of `R` (at least when `R` is an `AddMonoidWithOne`) through\n`Zero` and `One`, respectively. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L48-L49","name":"instAtLeastTwoHAddNatInstHAddInstAddNatOfNat","kind":"instance","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#instAtLeastTwoHAddNatInstHAddInstAddNatOfNat","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L46-L46","name":"Nat.AtLeastTwo.prop","kind":"def","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#Nat.AtLeastTwo.prop","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L45-L45","name":"Nat.AtLeastTwo.mk","kind":"ctor","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#Nat.AtLeastTwo.mk","doc":""},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L45-L46","name":"Nat.AtLeastTwo","kind":"class","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#Nat.AtLeastTwo","doc":"A type class for natural numbers which are greater than or equal to `2`. "},{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/44c828ca5b12983ef1d4eea5c54f95c2ef52cb36/Mathlib/Data/Nat/Cast/Defs.lean#L31-L33","name":"Nat.unaryCast","kind":"def","docLink":"./Mathlib/Data/Nat/Cast/Defs.html#Nat.unaryCast","doc":"The numeral `((0+1)+⋯)+1`. "}]}