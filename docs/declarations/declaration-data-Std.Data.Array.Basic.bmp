{"name":"Std.Data.Array.Basic","instances":[{"typeNames":["Subarray"],"name":"Subarray.instEmptyCollectionSubarray","className":"EmptyCollection"},{"typeNames":["Subarray"],"name":"Subarray.instInhabitedSubarray","className":"Inhabited"}],"imports":["Init","Std.Data.Array.Init.Basic","Std.Data.Ord"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Basic.lean#L159-L169","name":"Subarray.popHead?","kind":"def","docLink":"./Std/Data/Array/Basic.html#Subarray.popHead?","doc":"Remove the first element of a subarray. Returns the element and the remaining\nsubarray, or `none` if the subarray is empty.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Basic.lean#L152-L153","name":"Subarray.contains","kind":"def","docLink":"./Std/Data/Array/Basic.html#Subarray.contains","doc":"Check whether a subarray contains an element.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Basic.lean#L145-L146","name":"Subarray.isEmpty","kind":"def","docLink":"./Std/Data/Array/Basic.html#Subarray.isEmpty","doc":"Check whether a subarray is empty.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Basic.lean#L138-L139","name":"Subarray.instInhabitedSubarray","kind":"instance","docLink":"./Std/Data/Array/Basic.html#Subarray.instInhabitedSubarray","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Basic.lean#L135-L136","name":"Subarray.instEmptyCollectionSubarray","kind":"instance","docLink":"./Std/Data/Array/Basic.html#Subarray.instEmptyCollectionSubarray","doc":""},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Basic.lean#L128-L133","name":"Subarray.empty","kind":"def","docLink":"./Std/Data/Array/Basic.html#Subarray.empty","doc":"The empty subarray.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Basic.lean#L116-L118","name":"Array.maxI","kind":"def","docLink":"./Std/Data/Array/Basic.html#Array.maxI","doc":"Find the first maximal element of an array. If the array is empty, `default` is\nreturned. If `start` and `stop` are given, only the subarray `xs[start:stop]` is\nconsidered.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Basic.lean#L105-L107","name":"Array.max?","kind":"def","docLink":"./Std/Data/Array/Basic.html#Array.max?","doc":"Find the first maximal element of an array. If the array is empty, `none` is\nreturned. If `start` and `stop` are given, only the subarray `xs[start:stop]` is\nconsidered.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Basic.lean#L94-L96","name":"Array.maxD","kind":"def","docLink":"./Std/Data/Array/Basic.html#Array.maxD","doc":"Find the first maximal element of an array. If the array is empty, `d` is\nreturned. If `start` and `stop` are given, only the subarray `xs[start:stop]` is\nconsidered.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Basic.lean#L83-L85","name":"Array.minI","kind":"def","docLink":"./Std/Data/Array/Basic.html#Array.minI","doc":"Find the first minimal element of an array. If the array is empty, `default` is\nreturned. If `start` and `stop` are given, only the subarray `xs[start:stop]` is\nconsidered.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Basic.lean#L69-L74","name":"Array.min?","kind":"def","docLink":"./Std/Data/Array/Basic.html#Array.min?","doc":"Find the first minimal element of an array. If the array is empty, `none` is\nreturned. If `start` and `stop` are given, only the subarray `xs[start:stop]` is\nconsidered.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Basic.lean#L57-L60","name":"Array.minD","kind":"def","docLink":"./Std/Data/Array/Basic.html#Array.minD","doc":"Find the first minimal element of an array. If the array is empty, `d` is\nreturned. If `start` and `stop` are given, only the subarray `xs[start:stop]` is\nconsidered.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Basic.lean#L47-L48","name":"Array.qsortOrd","kind":"def","docLink":"./Std/Data/Array/Basic.html#Array.qsortOrd","doc":"Sort an array using `compare` to compare elements.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Basic.lean#L40-L41","name":"Array.equalSet","kind":"def","docLink":"./Std/Data/Array/Basic.html#Array.equalSet","doc":"Check whether `xs` and `ys` are equal as sets, i.e. they contain the same\nelements when disregarding order and duplicates. `O(n*m)`! If your element type\nhas an `Ord` instance, it is asymptotically more efficient to sort the two\narrays, remove duplicates and then compare them elementwise.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Basic.lean#L31-L32","name":"Array.zipWithIndex","kind":"def","docLink":"./Std/Data/Array/Basic.html#Array.zipWithIndex","doc":"Turns `#[a, b]` into `#[(a, 0), (b, 1)]`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Basic.lean#L27-L28","name":"Array.flatten","kind":"def","docLink":"./Std/Data/Array/Basic.html#Array.flatten","doc":"Turns `#[#[a₁, a₂, ⋯], #[b₁, b₂, ⋯], ⋯]` into `#[a₁, a₂, ⋯, b₁, b₂, ⋯]` "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Basic.lean#L23-L24","name":"Array.reduceOption","kind":"def","docLink":"./Std/Data/Array/Basic.html#Array.reduceOption","doc":"Drop `none`s from a Array, and replace each remaining `some a` with `a`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Basic.lean#L19-L20","name":"Array.range","kind":"def","docLink":"./Std/Data/Array/Basic.html#Array.range","doc":"The array `#[0, 1, ..., n - 1]`. "}]}