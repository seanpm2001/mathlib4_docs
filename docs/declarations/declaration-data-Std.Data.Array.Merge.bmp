{"name":"Std.Data.Array.Merge","instances":[],"imports":["Init","Std.Data.Nat.Lemmas","Std.Data.Ord"],"declarations":[{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Merge.lean#L145-L147","name":"Array.sortAndDeduplicate","kind":"def","docLink":"./Std/Data/Array/Merge.html#Array.sortAndDeduplicate","doc":"Sort and deduplicate an array.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Merge.lean#L139-L140","name":"Array.deduplicateSorted","kind":"def","docLink":"./Std/Data/Array/Merge.html#Array.deduplicateSorted","doc":"Deduplicate a sorted array. The array must be sorted with to an order which\nagrees with `==`, i.e. whenever `x == y` then `compare x y == .eq`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Merge.lean#L124-L132","name":"Array.mergeAdjacentDuplicates.go","kind":"def","docLink":"./Std/Data/Array/Merge.html#Array.mergeAdjacentDuplicates.go","doc":"Auxiliary definition for `mergeAdjacentDuplicates`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Merge.lean#L119-L133","name":"Array.mergeAdjacentDuplicates","kind":"def","docLink":"./Std/Data/Array/Merge.html#Array.mergeAdjacentDuplicates","doc":"Replace each run `[x₁, ⋯, xₙ]` of equal elements in `xs` with\n`f ⋯ (f (f x₁ x₂) x₃) ⋯ xₙ`.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Merge.lean#L110-L113","name":"Array.mergeUnsortedDeduplicating.go","kind":"def","docLink":"./Std/Data/Array/Merge.html#Array.mergeUnsortedDeduplicating.go","doc":"Auxiliary definition for `mergeUnsortedDeduplicating`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Merge.lean#L103-L113","name":"Array.mergeUnsortedDeduplicating","kind":"def","docLink":"./Std/Data/Array/Merge.html#Array.mergeUnsortedDeduplicating","doc":"Merge `xs` and `ys`, which do not need to be sorted. Elements which occur in\nboth `xs` and `ys` are only added once. If `xs` and `ys` do not contain\nduplicates, then neither does the result. O(n*m)!\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Merge.lean#L94-L95","name":"Array.mergeSortedDeduplicating","kind":"def","docLink":"./Std/Data/Array/Merge.html#Array.mergeSortedDeduplicating","doc":"Merge arrays `xs` and `ys`, which must be sorted according to `compare` and must\nnot contain duplicates. If an element appears in both `xs` and `ys`, only one\ncopy is kept.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Merge.lean#L58-L85","name":"Array.mergeSortedMergingDuplicates.go","kind":"def","docLink":"./Std/Data/Array/Merge.html#Array.mergeSortedMergingDuplicates.go","doc":"Auxiliary definition for `mergeSortedMergingDuplicates`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Merge.lean#L52-L86","name":"Array.mergeSortedMergingDuplicates","kind":"def","docLink":"./Std/Data/Array/Merge.html#Array.mergeSortedMergingDuplicates","doc":"Merge arrays `xs` and `ys`, which must be sorted according to `compare` and must\nnot contain duplicates. Equal elements are merged using `merge`. If `merge`\nrespects the order (i.e. for all `x`, `y`, `y'`, `z`, if `x < y < z` and\n`x < y' < z` then `x < merge y y' < z`) then the resulting array is again\nsorted.\n"},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Merge.lean#L23-L42","name":"Array.mergeSortedPreservingDuplicates.go","kind":"def","docLink":"./Std/Data/Array/Merge.html#Array.mergeSortedPreservingDuplicates.go","doc":"Auxiliary definition for `mergeSortedPreservingDuplicates`. "},{"sourceLink":"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/Array/Merge.lean#L17-L43","name":"Array.mergeSortedPreservingDuplicates","kind":"def","docLink":"./Std/Data/Array/Merge.html#Array.mergeSortedPreservingDuplicates","doc":"Merge arrays `xs` and `ys`, which must be sorted according to `compare`. The\nresult is sorted as well. If two (or more) elements are equal according to\n`compare`, they are preserved.\n"}]}